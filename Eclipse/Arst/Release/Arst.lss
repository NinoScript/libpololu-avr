
Arst.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000048  00800100  0000172e  000017c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000172e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000027  00800148  00800148  0000180a  2**0
                  ALLOC
  3 .stab         00000738  00000000  00000000  0000180c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000000dc  00000000  00000000  00001f44  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000358  00000000  00000000  00002020  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000993  00000000  00000000  00002378  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002119  00000000  00000000  00002d0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000b2e  00000000  00000000  00004e24  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000204c  00000000  00000000  00005952  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000005f0  00000000  00000000  000079a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000f3f  00000000  00000000  00007f90  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001632  00000000  00000000  00008ecf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000152  00000000  00000000  0000a501  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000002f8  00000000  00000000  0000a653  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__vector_9>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 97 03 	jmp	0x72e	; 0x72e <__vector_13>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ee e2       	ldi	r30, 0x2E	; 46
      7c:	f7 e1       	ldi	r31, 0x17	; 23
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a8 34       	cpi	r26, 0x48	; 72
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	a8 e4       	ldi	r26, 0x48	; 72
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	af 36       	cpi	r26, 0x6F	; 111
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 a8 00 	call	0x150	; 0x150 <main>
      9e:	0c 94 95 0b 	jmp	0x172a	; 0x172a <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <set_digital_output>:
      a6:	88 30       	cpi	r24, 0x08	; 8
      a8:	60 f4       	brcc	.+24     	; 0xc2 <set_digital_output+0x1c>
      aa:	21 e0       	ldi	r18, 0x01	; 1
      ac:	30 e0       	ldi	r19, 0x00	; 0
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <set_digital_output+0xe>
      b0:	22 0f       	add	r18, r18
      b2:	33 1f       	adc	r19, r19
      b4:	8a 95       	dec	r24
      b6:	e2 f7       	brpl	.-8      	; 0xb0 <set_digital_output+0xa>
      b8:	aa e2       	ldi	r26, 0x2A	; 42
      ba:	b0 e0       	ldi	r27, 0x00	; 0
      bc:	eb e2       	ldi	r30, 0x2B	; 43
      be:	f0 e0       	ldi	r31, 0x00	; 0
      c0:	25 c0       	rjmp	.+74     	; 0x10c <set_digital_output+0x66>
      c2:	8e 30       	cpi	r24, 0x0E	; 14
      c4:	70 f4       	brcc	.+28     	; 0xe2 <set_digital_output+0x3c>
      c6:	90 e0       	ldi	r25, 0x00	; 0
      c8:	08 97       	sbiw	r24, 0x08	; 8
      ca:	21 e0       	ldi	r18, 0x01	; 1
      cc:	30 e0       	ldi	r19, 0x00	; 0
      ce:	02 c0       	rjmp	.+4      	; 0xd4 <set_digital_output+0x2e>
      d0:	22 0f       	add	r18, r18
      d2:	33 1f       	adc	r19, r19
      d4:	8a 95       	dec	r24
      d6:	e2 f7       	brpl	.-8      	; 0xd0 <set_digital_output+0x2a>
      d8:	a4 e2       	ldi	r26, 0x24	; 36
      da:	b0 e0       	ldi	r27, 0x00	; 0
      dc:	e5 e2       	ldi	r30, 0x25	; 37
      de:	f0 e0       	ldi	r31, 0x00	; 0
      e0:	15 c0       	rjmp	.+42     	; 0x10c <set_digital_output+0x66>
      e2:	85 31       	cpi	r24, 0x15	; 21
      e4:	70 f4       	brcc	.+28     	; 0x102 <set_digital_output+0x5c>
      e6:	90 e0       	ldi	r25, 0x00	; 0
      e8:	0e 97       	sbiw	r24, 0x0e	; 14
      ea:	21 e0       	ldi	r18, 0x01	; 1
      ec:	30 e0       	ldi	r19, 0x00	; 0
      ee:	02 c0       	rjmp	.+4      	; 0xf4 <set_digital_output+0x4e>
      f0:	22 0f       	add	r18, r18
      f2:	33 1f       	adc	r19, r19
      f4:	8a 95       	dec	r24
      f6:	e2 f7       	brpl	.-8      	; 0xf0 <set_digital_output+0x4a>
      f8:	a7 e2       	ldi	r26, 0x27	; 39
      fa:	b0 e0       	ldi	r27, 0x00	; 0
      fc:	e8 e2       	ldi	r30, 0x28	; 40
      fe:	f0 e0       	ldi	r31, 0x00	; 0
     100:	05 c0       	rjmp	.+10     	; 0x10c <set_digital_output+0x66>
     102:	20 e0       	ldi	r18, 0x00	; 0
     104:	a0 e0       	ldi	r26, 0x00	; 0
     106:	b0 e0       	ldi	r27, 0x00	; 0
     108:	e0 e0       	ldi	r30, 0x00	; 0
     10a:	f0 e0       	ldi	r31, 0x00	; 0
     10c:	6f 3f       	cpi	r22, 0xFF	; 255
     10e:	19 f4       	brne	.+6      	; 0x116 <set_digital_output+0x70>
     110:	80 81       	ld	r24, Z
     112:	82 27       	eor	r24, r18
     114:	09 c0       	rjmp	.+18     	; 0x128 <set_digital_output+0x82>
     116:	66 23       	and	r22, r22
     118:	19 f0       	breq	.+6      	; 0x120 <set_digital_output+0x7a>
     11a:	80 81       	ld	r24, Z
     11c:	82 2b       	or	r24, r18
     11e:	04 c0       	rjmp	.+8      	; 0x128 <set_digital_output+0x82>
     120:	90 81       	ld	r25, Z
     122:	82 2f       	mov	r24, r18
     124:	80 95       	com	r24
     126:	89 23       	and	r24, r25
     128:	80 83       	st	Z, r24
     12a:	8c 91       	ld	r24, X
     12c:	82 2b       	or	r24, r18
     12e:	8c 93       	st	X, r24
     130:	08 95       	ret

00000132 <_ZL33_pololu_atmel_studio_6_workaroundv>:
     132:	80 91 1d 01 	lds	r24, 0x011D
     136:	8f 5f       	subi	r24, 0xFF	; 255
     138:	80 93 1d 01 	sts	0x011D, r24
     13c:	08 95       	ret

0000013e <_Z10debug_putsPKc>:
     13e:	28 2f       	mov	r18, r24
     140:	39 2f       	mov	r19, r25
     142:	f9 01       	movw	r30, r18
     144:	01 c0       	rjmp	.+2      	; 0x148 <_Z10debug_putsPKc+0xa>
     146:	80 b9       	out	0x00, r24	; 0
     148:	81 91       	ld	r24, Z+
     14a:	88 23       	and	r24, r24
     14c:	e1 f7       	brne	.-8      	; 0x146 <_Z10debug_putsPKc+0x8>
     14e:	08 95       	ret

00000150 <main>:
     150:	80 e0       	ldi	r24, 0x00	; 0
     152:	91 e0       	ldi	r25, 0x01	; 1
     154:	0e 94 b4 05 	call	0xb68	; 0xb68 <print>
     158:	87 e0       	ldi	r24, 0x07	; 7
     15a:	91 e0       	ldi	r25, 0x01	; 1
     15c:	0e 94 9f 00 	call	0x13e	; 0x13e <_Z10debug_putsPKc>
     160:	83 e1       	ldi	r24, 0x13	; 19
     162:	91 e0       	ldi	r25, 0x01	; 1
     164:	0e 94 0b 04 	call	0x816	; 0x816 <play>
     168:	81 e0       	ldi	r24, 0x01	; 1
     16a:	60 e0       	ldi	r22, 0x00	; 0
     16c:	0e 94 53 00 	call	0xa6	; 0xa6 <set_digital_output>
     170:	87 e0       	ldi	r24, 0x07	; 7
     172:	61 e0       	ldi	r22, 0x01	; 1
     174:	0e 94 53 00 	call	0xa6	; 0xa6 <set_digital_output>
     178:	84 e6       	ldi	r24, 0x64	; 100
     17a:	90 e0       	ldi	r25, 0x00	; 0
     17c:	0e 94 b1 08 	call	0x1162	; 0x1162 <delay_ms>
     180:	81 e0       	ldi	r24, 0x01	; 1
     182:	61 e0       	ldi	r22, 0x01	; 1
     184:	0e 94 53 00 	call	0xa6	; 0xa6 <set_digital_output>
     188:	87 e0       	ldi	r24, 0x07	; 7
     18a:	60 e0       	ldi	r22, 0x00	; 0
     18c:	0e 94 53 00 	call	0xa6	; 0xa6 <set_digital_output>
     190:	84 e6       	ldi	r24, 0x64	; 100
     192:	90 e0       	ldi	r25, 0x00	; 0
     194:	0e 94 b1 08 	call	0x1162	; 0x1162 <delay_ms>
     198:	e7 cf       	rjmp	.-50     	; 0x168 <main+0x18>

0000019a <_ZL16currentCharacterv>:
static char currentCharacter()
{
	char c = 0;
	do
	{
		if(use_program_space)
     19a:	90 91 4d 01 	lds	r25, 0x014D
     19e:	e0 91 49 01 	lds	r30, 0x0149
     1a2:	f0 91 4a 01 	lds	r31, 0x014A
     1a6:	99 23       	and	r25, r25
     1a8:	11 f0       	breq	.+4      	; 0x1ae <_ZL16currentCharacterv+0x14>
			c = pgm_read_byte(buzzerSequence);
     1aa:	84 91       	lpm	r24, Z+
     1ac:	01 c0       	rjmp	.+2      	; 0x1b0 <_ZL16currentCharacterv+0x16>
		else
			c = *buzzerSequence;
     1ae:	80 81       	ld	r24, Z

		if(c >= 'A' && c <= 'Z')
     1b0:	28 2f       	mov	r18, r24
     1b2:	21 54       	subi	r18, 0x41	; 65
     1b4:	2a 31       	cpi	r18, 0x1A	; 26
     1b6:	10 f4       	brcc	.+4      	; 0x1bc <_ZL16currentCharacterv+0x22>
			c += 'a'-'A';
     1b8:	80 5e       	subi	r24, 0xE0	; 224
     1ba:	08 95       	ret
// Gets the current character, converting to lower-case and skipping
// spaces.  For any spaces, this automatically increments sequence!
static char currentCharacter()
{
	char c = 0;
	do
     1bc:	80 32       	cpi	r24, 0x20	; 32
     1be:	71 f4       	brne	.+28     	; 0x1dc <_ZL16currentCharacterv+0x42>
     1c0:	20 91 49 01 	lds	r18, 0x0149
     1c4:	30 91 4a 01 	lds	r19, 0x014A
     1c8:	a9 01       	movw	r20, r18
     1ca:	4f 5f       	subi	r20, 0xFF	; 255
     1cc:	5f 4f       	sbci	r21, 0xFF	; 255
     1ce:	50 93 4a 01 	sts	0x014A, r21
     1d2:	40 93 49 01 	sts	0x0149, r20
     1d6:	21 15       	cp	r18, r1
     1d8:	31 05       	cpc	r19, r1
     1da:	09 f7       	brne	.-62     	; 0x19e <_ZL16currentCharacterv+0x4>
		if(c >= 'A' && c <= 'Z')
			c += 'a'-'A';
	} while(c == ' ' && (buzzerSequence ++));

	return c;
}
     1dc:	08 95       	ret

000001de <_ZL9getNumberv>:

// Returns the numerical argument specified at buzzerSequence[0] and
// increments sequence to point to the character immediately after the
// argument.
static unsigned int getNumber()
{
     1de:	cf 93       	push	r28
     1e0:	df 93       	push	r29
	unsigned int arg = 0;

	// read all digits, one at a time
	char c = currentCharacter();
     1e2:	0e 94 cd 00 	call	0x19a	; 0x19a <_ZL16currentCharacterv>
// Returns the numerical argument specified at buzzerSequence[0] and
// increments sequence to point to the character immediately after the
// argument.
static unsigned int getNumber()
{
	unsigned int arg = 0;
     1e6:	c0 e0       	ldi	r28, 0x00	; 0
     1e8:	d0 e0       	ldi	r29, 0x00	; 0

	// read all digits, one at a time
	char c = currentCharacter();
	while(c >= '0' && c <= '9')
     1ea:	1b c0       	rjmp	.+54     	; 0x222 <_ZL9getNumberv+0x44>
	{
		arg *= 10;
     1ec:	9e 01       	movw	r18, r28
     1ee:	22 0f       	add	r18, r18
     1f0:	33 1f       	adc	r19, r19
     1f2:	93 e0       	ldi	r25, 0x03	; 3
     1f4:	cc 0f       	add	r28, r28
     1f6:	dd 1f       	adc	r29, r29
     1f8:	9a 95       	dec	r25
     1fa:	e1 f7       	brne	.-8      	; 0x1f4 <_ZL9getNumberv+0x16>
     1fc:	c2 0f       	add	r28, r18
     1fe:	d3 1f       	adc	r29, r19
		arg += c-'0';
     200:	99 27       	eor	r25, r25
     202:	87 fd       	sbrc	r24, 7
     204:	90 95       	com	r25
     206:	c8 0f       	add	r28, r24
     208:	d9 1f       	adc	r29, r25
     20a:	e0 97       	sbiw	r28, 0x30	; 48
		buzzerSequence ++;
     20c:	80 91 49 01 	lds	r24, 0x0149
     210:	90 91 4a 01 	lds	r25, 0x014A
     214:	01 96       	adiw	r24, 0x01	; 1
     216:	90 93 4a 01 	sts	0x014A, r25
     21a:	80 93 49 01 	sts	0x0149, r24
		c = currentCharacter();
     21e:	0e 94 cd 00 	call	0x19a	; 0x19a <_ZL16currentCharacterv>
{
	unsigned int arg = 0;

	// read all digits, one at a time
	char c = currentCharacter();
	while(c >= '0' && c <= '9')
     222:	98 2f       	mov	r25, r24
     224:	90 53       	subi	r25, 0x30	; 48
     226:	9a 30       	cpi	r25, 0x0A	; 10
     228:	08 f3       	brcs	.-62     	; 0x1ec <_ZL9getNumberv+0xe>
		buzzerSequence ++;
		c = currentCharacter();
	}

	return arg;
}
     22a:	ce 01       	movw	r24, r28
     22c:	df 91       	pop	r29
     22e:	cf 91       	pop	r28
     230:	08 95       	ret

00000232 <_ZN15OrangutanBuzzerC1Ev>:

// constructor

OrangutanBuzzer::OrangutanBuzzer()
{
}
     232:	08 95       	ret

00000234 <_ZN15OrangutanBuzzer5init2Ev>:
}

// initializes timer1 for buzzer control
void OrangutanBuzzer::init2()
{
	DISABLE_TIMER1_INTERRUPT();	// disable all timer1 interrupts
     234:	10 92 6f 00 	sts	0x006F, r1
	TCCR1A = 0x03;	// bits 6 and 7 clear: normal port op., OC1A disconnected
					// bit 4 and 5 clear: normal port op., OC1B disconnected
					// bits 2 and 3: not used
					// bits 0 & 1 set: combine with bits 3 & 4 of TCCR1B...
#else
	TCCR1A = 0x23;	// bits 6 and 7 clear: normal port op., OC1A disconnected
     238:	83 e2       	ldi	r24, 0x23	; 35
     23a:	80 93 80 00 	sts	0x0080, r24
					//                     set OC1B on comp match when downcounting
					// bits 2 and 3: not used
					// bits 0 & 1 set: combine with bits 3 & 4 of TCCR1B...
#endif

	TCCR1B = 0x11;	// bit 7 clear: input capture noise canceler disabled
     23e:	81 e1       	ldi	r24, 0x11	; 17
     240:	80 93 81 00 	sts	0x0081, r24
					// bit 3 clear and 4 set: combine with bits 0 & 1 of TCCR1A to
					// 		select waveform generation mode 11, phase-correct PWM,
					//		TOP = OCR1A, OCR1B set at TOP, TOV1 flag set at TOP
					// bit 0 set, 1-2 clear: timer clock = IO clk (prescaler 1)

	TCCR1C = 0x00;	// bit 7 clear: no force output compare for channel A
     244:	10 92 82 00 	sts	0x0082, r1
	//   on compare match, set at TOP; OC1B is disconnected.
	//   Note: if the PWM frequency and duty cycle are changed, the first
	//   cycle of the new frequency will be at the old duty cycle, since
	//   the duty cycle (OCR1A) is not updated until TOP.

	OCR1A = (F_CPU/2) / 1000;	// set TOP for freq = 1 kHz
     248:	80 e1       	ldi	r24, 0x10	; 16
     24a:	97 e2       	ldi	r25, 0x27	; 39
     24c:	90 93 89 00 	sts	0x0089, r25
     250:	80 93 88 00 	sts	0x0088, r24
	OCR1B = 0;					// set 0% duty cycle
     254:	10 92 8b 00 	sts	0x008B, r1
     258:	10 92 8a 00 	sts	0x008A, r1
	
#ifndef _ORANGUTAN_X2
	BUZZER_DDR |= BUZZER;		// buzzer pin set as an output
     25c:	22 9a       	sbi	0x04, 2	; 4
#endif
	sei();
     25e:	78 94       	sei
}
     260:	08 95       	ret

00000262 <_ZN15OrangutanBuzzer4initEv>:
extern unsigned char buzzerInitialized;

// this is called by playFrequency()
inline void OrangutanBuzzer::init()
{
	if (!buzzerInitialized)
     262:	80 91 48 01 	lds	r24, 0x0148
     266:	88 23       	and	r24, r24
     268:	29 f4       	brne	.+10     	; 0x274 <_ZN15OrangutanBuzzer4initEv+0x12>
	{
		buzzerInitialized = 1;
     26a:	81 e0       	ldi	r24, 0x01	; 1
     26c:	80 93 48 01 	sts	0x0148, r24
		init2();
     270:	0e 94 1a 01 	call	0x234	; 0x234 <_ZN15OrangutanBuzzer5init2Ev>
     274:	08 95       	ret

00000276 <_ZN15OrangutanBuzzer13playFrequencyEjjh>:
//   greater than 1 kHz.  For example, the max duration you can use for a
//   frequency of 10 kHz is 6553 ms.  If you use a duration longer than this,
//   you will cause an integer overflow that produces unexpected behavior.
void OrangutanBuzzer::playFrequency(unsigned int freq, unsigned int dur, 
				   					unsigned char volume)
{
     276:	a0 e0       	ldi	r26, 0x00	; 0
     278:	b0 e0       	ldi	r27, 0x00	; 0
     27a:	e1 e4       	ldi	r30, 0x41	; 65
     27c:	f1 e0       	ldi	r31, 0x01	; 1
     27e:	0c 94 c3 09 	jmp	0x1386	; 0x1386 <__prologue_saves__+0x10>
     282:	8c 01       	movw	r16, r24
     284:	5b 01       	movw	r10, r22
     286:	e4 2e       	mov	r14, r20
	init();		// initializes the buzzer if necessary
     288:	0e 94 31 01 	call	0x262	; 0x262 <_ZN15OrangutanBuzzer4initEv>
	buzzerFinished = 0;
     28c:	10 92 1e 01 	sts	0x011E, r1
	unsigned int newTCCR1B;
	unsigned int timeout;
	unsigned char multiplier = 1;
	

	if (freq & DIV_BY_10)		// if frequency's DIV_BY_10 bit is set
     290:	17 ff       	sbrs	r17, 7
     292:	04 c0       	rjmp	.+8      	; 0x29c <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x26>
	{							//  then the true frequency is freq/10
		multiplier = 10;		//  (gives higher resolution for small freqs)
		freq &= ~DIV_BY_10;		// clear DIV_BY_10 bit
     294:	1f 77       	andi	r17, 0x7F	; 127
	unsigned char multiplier = 1;
	

	if (freq & DIV_BY_10)		// if frequency's DIV_BY_10 bit is set
	{							//  then the true frequency is freq/10
		multiplier = 10;		//  (gives higher resolution for small freqs)
     296:	fa e0       	ldi	r31, 0x0A	; 10
     298:	ff 2e       	mov	r15, r31
     29a:	02 c0       	rjmp	.+4      	; 0x2a0 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x2a>
#else

	unsigned int newOCR1A;
	unsigned int newTCCR1B;
	unsigned int timeout;
	unsigned char multiplier = 1;
     29c:	ff 24       	eor	r15, r15
     29e:	f3 94       	inc	r15
	{							//  then the true frequency is freq/10
		multiplier = 10;		//  (gives higher resolution for small freqs)
		freq &= ~DIV_BY_10;		// clear DIV_BY_10 bit
	}

	newTCCR1B = TCCR1B & 0xF8;	// clear clock select bits
     2a0:	c0 90 81 00 	lds	r12, 0x0081
     2a4:	dd 24       	eor	r13, r13
     2a6:	28 ef       	ldi	r18, 0xF8	; 248
     2a8:	c2 22       	and	r12, r18
     2aa:	dd 24       	eor	r13, r13

	// calculate necessary clock source and counter top value to get freq
	if (freq > 200 * ((unsigned int)multiplier))	// clock prescaler = 1
     2ac:	88 ec       	ldi	r24, 0xC8	; 200
     2ae:	6f 2d       	mov	r22, r15
     2b0:	68 9f       	mul	r22, r24
     2b2:	c0 01       	movw	r24, r0
     2b4:	11 24       	eor	r1, r1
     2b6:	80 17       	cp	r24, r16
     2b8:	91 07       	cpc	r25, r17
     2ba:	d8 f4       	brcc	.+54     	; 0x2f2 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x7c>
     2bc:	e8 01       	movw	r28, r16
     2be:	77 e2       	ldi	r23, 0x27	; 39
     2c0:	01 31       	cpi	r16, 0x11	; 17
     2c2:	17 07       	cpc	r17, r23
     2c4:	10 f0       	brcs	.+4      	; 0x2ca <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x54>
     2c6:	c0 e1       	ldi	r28, 0x10	; 16
     2c8:	d7 e2       	ldi	r29, 0x27	; 39
	{
		if (freq > 10000)
			freq = 10000;			// max frequency allowed is 10kHz

		newOCR1A = (unsigned int)((10000000UL + (freq >> 1)) / freq);
     2ca:	be 01       	movw	r22, r28
     2cc:	76 95       	lsr	r23
     2ce:	67 95       	ror	r22
     2d0:	80 e0       	ldi	r24, 0x00	; 0
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	60 58       	subi	r22, 0x80	; 128
     2d6:	79 46       	sbci	r23, 0x69	; 105
     2d8:	87 46       	sbci	r24, 0x67	; 103
     2da:	9f 4f       	sbci	r25, 0xFF	; 255
     2dc:	9e 01       	movw	r18, r28
     2de:	40 e0       	ldi	r20, 0x00	; 0
     2e0:	50 e0       	ldi	r21, 0x00	; 0
     2e2:	0e 94 7e 09 	call	0x12fc	; 0x12fc <__udivmodsi4>
     2e6:	89 01       	movw	r16, r18

		// timer1 clock select:
		newTCCR1B |= TIMER1_CLK_1;	// select IO clk (prescaler = 1)
     2e8:	81 e0       	ldi	r24, 0x01	; 1
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	c8 2a       	or	r12, r24
     2ee:	d9 2a       	or	r13, r25
     2f0:	28 c0       	rjmp	.+80     	; 0x342 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xcc>
     2f2:	98 e2       	ldi	r25, 0x28	; 40
     2f4:	f9 9e       	mul	r15, r25
     2f6:	90 2d       	mov	r25, r0
     2f8:	11 24       	eor	r1, r1
     2fa:	80 e0       	ldi	r24, 0x00	; 0
     2fc:	c9 2f       	mov	r28, r25
     2fe:	d8 2f       	mov	r29, r24
     300:	c0 17       	cp	r28, r16
     302:	d1 07       	cpc	r29, r17
     304:	08 f4       	brcc	.+2      	; 0x308 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x92>
     306:	e8 01       	movw	r28, r16
     308:	be 01       	movw	r22, r28
     30a:	76 95       	lsr	r23
     30c:	67 95       	ror	r22
     30e:	9e 01       	movw	r18, r28
     310:	40 e0       	ldi	r20, 0x00	; 0
     312:	50 e0       	ldi	r21, 0x00	; 0
		unsigned char val = 40 * multiplier;
		if (freq < val)				// min frequency allowed is 40 Hz
			freq = val;

		// set top (frequency):
		if (multiplier == 10)
     314:	9f 2d       	mov	r25, r15
     316:	9a 30       	cpi	r25, 0x0A	; 10
     318:	39 f4       	brne	.+14     	; 0x328 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xb2>
			newOCR1A = (unsigned int)((12500000UL + (freq >> 1))/ freq);
     31a:	80 e0       	ldi	r24, 0x00	; 0
     31c:	90 e0       	ldi	r25, 0x00	; 0
     31e:	60 5e       	subi	r22, 0xE0	; 224
     320:	73 44       	sbci	r23, 0x43	; 67
     322:	81 44       	sbci	r24, 0x41	; 65
     324:	9f 4f       	sbci	r25, 0xFF	; 255
     326:	06 c0       	rjmp	.+12     	; 0x334 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xbe>
		else
			newOCR1A = (unsigned int)((1250000UL + (freq >> 1)) / freq);
     328:	80 e0       	ldi	r24, 0x00	; 0
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	60 53       	subi	r22, 0x30	; 48
     32e:	7d 4e       	sbci	r23, 0xED	; 237
     330:	8c 4e       	sbci	r24, 0xEC	; 236
     332:	9f 4f       	sbci	r25, 0xFF	; 255
     334:	0e 94 7e 09 	call	0x12fc	; 0x12fc <__udivmodsi4>
     338:	89 01       	movw	r16, r18

		// timer1 clock select
		newTCCR1B |= TIMER1_CLK_8;	// select IO clk / 8
     33a:	62 e0       	ldi	r22, 0x02	; 2
     33c:	70 e0       	ldi	r23, 0x00	; 0
     33e:	c6 2a       	or	r12, r22
     340:	d7 2a       	or	r13, r23
	}


	// set timeout (duration):
	if (multiplier == 10)
     342:	7f 2d       	mov	r23, r15
     344:	7a 30       	cpi	r23, 0x0A	; 10
     346:	39 f4       	brne	.+14     	; 0x356 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xe0>
		freq = (freq + 5) / 10;
     348:	ce 01       	movw	r24, r28
     34a:	05 96       	adiw	r24, 0x05	; 5
     34c:	6a e0       	ldi	r22, 0x0A	; 10
     34e:	70 e0       	ldi	r23, 0x00	; 0
     350:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <__udivmodhi4>
     354:	eb 01       	movw	r28, r22

	if (freq == 1000)
     356:	83 e0       	ldi	r24, 0x03	; 3
     358:	c8 3e       	cpi	r28, 0xE8	; 232
     35a:	d8 07       	cpc	r29, r24
     35c:	79 f0       	breq	.+30     	; 0x37c <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x106>
		timeout = dur;	// duration for silent notes is exact
	else
		timeout = (unsigned int)((long)dur * freq / 1000);
     35e:	be 01       	movw	r22, r28
     360:	80 e0       	ldi	r24, 0x00	; 0
     362:	90 e0       	ldi	r25, 0x00	; 0
     364:	95 01       	movw	r18, r10
     366:	40 e0       	ldi	r20, 0x00	; 0
     368:	50 e0       	ldi	r21, 0x00	; 0
     36a:	0e 94 3f 09 	call	0x127e	; 0x127e <__mulsi3>
     36e:	28 ee       	ldi	r18, 0xE8	; 232
     370:	33 e0       	ldi	r19, 0x03	; 3
     372:	40 e0       	ldi	r20, 0x00	; 0
     374:	50 e0       	ldi	r21, 0x00	; 0
     376:	0e 94 a0 09 	call	0x1340	; 0x1340 <__divmodsi4>
     37a:	01 c0       	rjmp	.+2      	; 0x37e <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x108>
	// set timeout (duration):
	if (multiplier == 10)
		freq = (freq + 5) / 10;

	if (freq == 1000)
		timeout = dur;	// duration for silent notes is exact
     37c:	95 01       	movw	r18, r10
		timeout = (unsigned int)((long)dur * freq / 1000);
	
	if (volume > 15)
		volume = 15;

	DISABLE_TIMER1_INTERRUPT();			// disable interrupts while writing 
     37e:	10 92 6f 00 	sts	0x006F, r1
										//  to 16-bit registers
	TCCR1B = newTCCR1B;					// select timer 1 clock prescaler
     382:	c0 92 81 00 	sts	0x0081, r12
	OCR1A = newOCR1A;					// set timer 1 pwm frequency
     386:	10 93 89 00 	sts	0x0089, r17
     38a:	00 93 88 00 	sts	0x0088, r16
	OCR1B = OCR1A >> (16 - volume);	// set duty cycle (volume)
     38e:	40 91 88 00 	lds	r20, 0x0088
     392:	50 91 89 00 	lds	r21, 0x0089
     396:	6e 2d       	mov	r22, r14
     398:	60 31       	cpi	r22, 0x10	; 16
     39a:	08 f0       	brcs	.+2      	; 0x39e <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x128>
     39c:	6f e0       	ldi	r22, 0x0F	; 15
     39e:	80 e1       	ldi	r24, 0x10	; 16
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	86 1b       	sub	r24, r22
     3a4:	91 09       	sbc	r25, r1
     3a6:	ba 01       	movw	r22, r20
     3a8:	02 c0       	rjmp	.+4      	; 0x3ae <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x138>
     3aa:	76 95       	lsr	r23
     3ac:	67 95       	ror	r22
     3ae:	8a 95       	dec	r24
     3b0:	e2 f7       	brpl	.-8      	; 0x3aa <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x134>
     3b2:	70 93 8b 00 	sts	0x008B, r23
     3b6:	60 93 8a 00 	sts	0x008A, r22
	buzzerTimeout = timeout;			// set buzzer duration
     3ba:	30 93 50 01 	sts	0x0150, r19
     3be:	20 93 4f 01 	sts	0x014F, r18
	
#endif // _ORANGUTAN_X2

	TIFR1 |= 0xFF;						// clear any pending t1 overflow int.
     3c2:	86 b3       	in	r24, 0x16	; 22
     3c4:	8f ef       	ldi	r24, 0xFF	; 255
     3c6:	86 bb       	out	0x16, r24	; 22
	ENABLE_TIMER1_INTERRUPT();			// this is the only place the t1
     3c8:	81 e0       	ldi	r24, 0x01	; 1
     3ca:	80 93 6f 00 	sts	0x006F, r24
										//  overflow is enabled unless using X2
										
}
     3ce:	cd b7       	in	r28, 0x3d	; 61
     3d0:	de b7       	in	r29, 0x3e	; 62
     3d2:	ea e0       	ldi	r30, 0x0A	; 10
     3d4:	0c 94 df 09 	jmp	0x13be	; 0x13be <__epilogue_restores__+0x10>

000003d8 <play_frequency>:


extern "C" void play_frequency(unsigned int freq, unsigned int dur, 
							   unsigned char volume)
{
	OrangutanBuzzer::playFrequency(freq, dur, volume);
     3d8:	0e 94 3b 01 	call	0x276	; 0x276 <_ZN15OrangutanBuzzer13playFrequencyEjjh>
}
     3dc:	08 95       	ret

000003de <_ZN15OrangutanBuzzer8playNoteEhjh>:
//  greater than 1 kHz.  For example, the max duration you can use for a
//  frequency of 10 kHz is 6553 ms.  If you use a duration longer than this,
//  you will cause an integer overflow that produces unexpected behavior.
void OrangutanBuzzer::playNote(unsigned char note, unsigned int dur,
							   unsigned char volume)
{
     3de:	9b 01       	movw	r18, r22
#else

	unsigned int freq = 0;
	unsigned char offset_note = note - 16;

	if (note == SILENT_NOTE || volume == 0)
     3e0:	8f 3f       	cpi	r24, 0xFF	; 255
     3e2:	11 f0       	breq	.+4      	; 0x3e8 <_ZN15OrangutanBuzzer8playNoteEhjh+0xa>
     3e4:	44 23       	and	r20, r20
     3e6:	29 f4       	brne	.+10     	; 0x3f2 <_ZN15OrangutanBuzzer8playNoteEhjh+0x14>
	{
		freq = 1000;	// silent notes => use 1kHz freq (for cycle counter)
		playFrequency(freq, dur, 0);
     3e8:	88 ee       	ldi	r24, 0xE8	; 232
     3ea:	93 e0       	ldi	r25, 0x03	; 3
     3ec:	b9 01       	movw	r22, r18
     3ee:	40 e0       	ldi	r20, 0x00	; 0
     3f0:	49 c0       	rjmp	.+146    	; 0x484 <_ZN15OrangutanBuzzer8playNoteEhjh+0xa6>
		return;
	}

	if (note <= 16)
     3f2:	81 31       	cpi	r24, 0x11	; 17
     3f4:	30 f0       	brcs	.+12     	; 0x402 <_ZN15OrangutanBuzzer8playNoteEhjh+0x24>
	sei();
	
#else

	unsigned int freq = 0;
	unsigned char offset_note = note - 16;
     3f6:	58 2f       	mov	r21, r24
     3f8:	50 51       	subi	r21, 0x10	; 16
     3fa:	50 36       	cpi	r21, 0x60	; 96
     3fc:	18 f0       	brcs	.+6      	; 0x404 <_ZN15OrangutanBuzzer8playNoteEhjh+0x26>
     3fe:	5f e5       	ldi	r21, 0x5F	; 95
     400:	01 c0       	rjmp	.+2      	; 0x404 <_ZN15OrangutanBuzzer8playNoteEhjh+0x26>
		playFrequency(freq, dur, 0);
		return;
	}

	if (note <= 16)
		offset_note = 0;
     402:	50 e0       	ldi	r21, 0x00	; 0
	else if (offset_note > 95)
		offset_note = 95;

	unsigned char exponent = offset_note / 12;
     404:	85 2f       	mov	r24, r21
     406:	6c e0       	ldi	r22, 0x0C	; 12
     408:	0e 94 5e 09 	call	0x12bc	; 0x12bc <__udivmodqi4>

	// frequency table for the lowest 12 allowed notes
	//   frequencies are specified in tenths of a Hertz for added resolution
	switch (offset_note - exponent * 12)	// equivalent to (offset_note % 12)
     40c:	a8 2f       	mov	r26, r24
     40e:	b0 e0       	ldi	r27, 0x00	; 0
     410:	e4 ef       	ldi	r30, 0xF4	; 244
     412:	ff ef       	ldi	r31, 0xFF	; 255
     414:	ae 9f       	mul	r26, r30
     416:	b0 01       	movw	r22, r0
     418:	af 9f       	mul	r26, r31
     41a:	70 0d       	add	r23, r0
     41c:	be 9f       	mul	r27, r30
     41e:	70 0d       	add	r23, r0
     420:	11 24       	eor	r1, r1
     422:	65 0f       	add	r22, r21
     424:	71 1d       	adc	r23, r1
     426:	6c 30       	cpi	r22, 0x0C	; 12
     428:	71 05       	cpc	r23, r1
     42a:	40 f4       	brcc	.+16     	; 0x43c <_ZN15OrangutanBuzzer8playNoteEhjh+0x5e>
     42c:	fb 01       	movw	r30, r22
     42e:	ee 0f       	add	r30, r30
     430:	ff 1f       	adc	r31, r31
     432:	e8 5d       	subi	r30, 0xD8	; 216
     434:	fe 4f       	sbci	r31, 0xFE	; 254
     436:	60 81       	ld	r22, Z
     438:	71 81       	ldd	r23, Z+1	; 0x01
     43a:	02 c0       	rjmp	.+4      	; 0x440 <_ZN15OrangutanBuzzer8playNoteEhjh+0x62>
     43c:	60 e0       	ldi	r22, 0x00	; 0
     43e:	70 e0       	ldi	r23, 0x00	; 0
		case 11:			// note D#2 = 77.8 Hz
			freq = 778;
			break;
	}

	if (exponent < 7)
     440:	87 30       	cpi	r24, 0x07	; 7
     442:	81 f0       	breq	.+32     	; 0x464 <_ZN15OrangutanBuzzer8playNoteEhjh+0x86>
	{
		freq = freq << exponent;	// frequency *= 2 ^ exponent
     444:	08 2e       	mov	r0, r24
     446:	02 c0       	rjmp	.+4      	; 0x44c <_ZN15OrangutanBuzzer8playNoteEhjh+0x6e>
     448:	66 0f       	add	r22, r22
     44a:	77 1f       	adc	r23, r23
     44c:	0a 94       	dec	r0
     44e:	e2 f7       	brpl	.-8      	; 0x448 <_ZN15OrangutanBuzzer8playNoteEhjh+0x6a>
		if (exponent > 1)			// if the frequency is greater than 160 Hz
     450:	82 30       	cpi	r24, 0x02	; 2
     452:	28 f0       	brcs	.+10     	; 0x45e <_ZN15OrangutanBuzzer8playNoteEhjh+0x80>
			freq = (freq + 5) / 10;	//   we don't need the extra resolution
     454:	cb 01       	movw	r24, r22
     456:	05 96       	adiw	r24, 0x05	; 5
     458:	6a e0       	ldi	r22, 0x0A	; 10
     45a:	70 e0       	ldi	r23, 0x00	; 0
     45c:	0c c0       	rjmp	.+24     	; 0x476 <_ZN15OrangutanBuzzer8playNoteEhjh+0x98>
		else
			freq += DIV_BY_10;		// else keep the added digit of resolution
     45e:	60 50       	subi	r22, 0x00	; 0
     460:	70 48       	sbci	r23, 0x80	; 128
     462:	0b c0       	rjmp	.+22     	; 0x47a <_ZN15OrangutanBuzzer8playNoteEhjh+0x9c>
	}
	else
		freq = (freq * 64 + 2) / 5;	// == freq * 2^7 / 10 without int overflow
     464:	cb 01       	movw	r24, r22
     466:	a6 e0       	ldi	r26, 0x06	; 6
     468:	88 0f       	add	r24, r24
     46a:	99 1f       	adc	r25, r25
     46c:	aa 95       	dec	r26
     46e:	e1 f7       	brne	.-8      	; 0x468 <_ZN15OrangutanBuzzer8playNoteEhjh+0x8a>
     470:	02 96       	adiw	r24, 0x02	; 2
     472:	65 e0       	ldi	r22, 0x05	; 5
     474:	70 e0       	ldi	r23, 0x00	; 0
     476:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <__udivmodhi4>

	if (volume > 15)
		volume = 15;
	playFrequency(freq, dur, volume);	// set buzzer this freq/duration
     47a:	40 31       	cpi	r20, 0x10	; 16
     47c:	08 f0       	brcs	.+2      	; 0x480 <_ZN15OrangutanBuzzer8playNoteEhjh+0xa2>
     47e:	4f e0       	ldi	r20, 0x0F	; 15
     480:	cb 01       	movw	r24, r22
     482:	b9 01       	movw	r22, r18
     484:	0e 94 3b 01 	call	0x276	; 0x276 <_ZN15OrangutanBuzzer13playFrequencyEjjh>
     488:	08 95       	ret

0000048a <_ZL8nextNotev>:

	return arg;
}

static void nextNote()
{
     48a:	a0 e0       	ldi	r26, 0x00	; 0
     48c:	b0 e0       	ldi	r27, 0x00	; 0
     48e:	eb e4       	ldi	r30, 0x4B	; 75
     490:	f2 e0       	ldi	r31, 0x02	; 2
     492:	0c 94 c0 09 	jmp	0x1380	; 0x1380 <__prologue_saves__+0xa>
	unsigned char note = 0;
	unsigned char rest = 0;
	unsigned char tmp_octave = octave; // the octave for this note
     496:	b0 90 1f 01 	lds	r11, 0x011F
	unsigned int dot_add;

	char c; // temporary variable

	// if we are playing staccato, after every note we play a rest
	if(staccato && staccato_rest_duration)
     49a:	80 91 4b 01 	lds	r24, 0x014B
     49e:	88 23       	and	r24, r24
     4a0:	61 f0       	breq	.+24     	; 0x4ba <_ZL8nextNotev+0x30>
     4a2:	60 91 4c 01 	lds	r22, 0x014C
     4a6:	66 23       	and	r22, r22
     4a8:	41 f0       	breq	.+16     	; 0x4ba <_ZL8nextNotev+0x30>
	{
		OrangutanBuzzer::playNote(SILENT_NOTE, staccato_rest_duration, 0);
     4aa:	8f ef       	ldi	r24, 0xFF	; 255
     4ac:	70 e0       	ldi	r23, 0x00	; 0
     4ae:	40 e0       	ldi	r20, 0x00	; 0
     4b0:	0e 94 ef 01 	call	0x3de	; 0x3de <_ZN15OrangutanBuzzer8playNoteEhjh>
		staccato_rest_duration = 0;
     4b4:	10 92 4c 01 	sts	0x014C, r1
		return;
     4b8:	35 c1       	rjmp	.+618    	; 0x724 <_ZL8nextNotev+0x29a>
		// Rest - the note value doesn't matter.
		rest = 1;
		break;
	case 't':
		// set the tempo
		whole_note_duration = 60*400/getNumber()*10;
     4ba:	c0 ec       	ldi	r28, 0xC0	; 192
     4bc:	dd e5       	ldi	r29, 0x5D	; 93
		// set music staccato or legato
		if(currentCharacter() == 'l')
			staccato = false;
		else
		{
			staccato = true;
     4be:	aa 24       	eor	r10, r10
     4c0:	a3 94       	inc	r10
		// set the volume
		volume = getNumber();
		goto parse_character;
	case '!':
		// reset to defaults
		octave = 4;
     4c2:	14 e0       	ldi	r17, 0x04	; 4
     4c4:	71 2e       	mov	r7, r17
		whole_note_duration = 2000;
     4c6:	00 ed       	ldi	r16, 0xD0	; 208
     4c8:	17 e0       	ldi	r17, 0x07	; 7
		note_type = 4;
     4ca:	b4 e0       	ldi	r27, 0x04	; 4
     4cc:	eb 2e       	mov	r14, r27
     4ce:	f1 2c       	mov	r15, r1
		duration = 500;
     4d0:	a4 ef       	ldi	r26, 0xF4	; 244
     4d2:	ca 2e       	mov	r12, r26
     4d4:	a1 e0       	ldi	r26, 0x01	; 1
     4d6:	da 2e       	mov	r13, r26
		volume = 15;
     4d8:	ff e0       	ldi	r31, 0x0F	; 15
     4da:	8f 2e       	mov	r8, r31
     4dc:	91 2c       	mov	r9, r1
	}

 parse_character:

	// Get current character
	c = currentCharacter();
     4de:	0e 94 cd 00 	call	0x19a	; 0x19a <_ZL16currentCharacterv>
	buzzerSequence ++;
     4e2:	20 91 49 01 	lds	r18, 0x0149
     4e6:	30 91 4a 01 	lds	r19, 0x014A
     4ea:	2f 5f       	subi	r18, 0xFF	; 255
     4ec:	3f 4f       	sbci	r19, 0xFF	; 255
     4ee:	30 93 4a 01 	sts	0x014A, r19
     4f2:	20 93 49 01 	sts	0x0149, r18

	// Interpret the character.
	switch(c)
     4f6:	86 36       	cpi	r24, 0x66	; 102
     4f8:	f1 f1       	breq	.+124    	; 0x576 <_ZL8nextNotev+0xec>
     4fa:	87 36       	cpi	r24, 0x67	; 103
     4fc:	cc f4       	brge	.+50     	; 0x530 <_ZL8nextNotev+0xa6>
     4fe:	82 36       	cpi	r24, 0x62	; 98
     500:	09 f4       	brne	.+2      	; 0x504 <_ZL8nextNotev+0x7a>
     502:	af c0       	rjmp	.+350    	; 0x662 <_ZL8nextNotev+0x1d8>
     504:	83 36       	cpi	r24, 0x63	; 99
     506:	7c f4       	brge	.+30     	; 0x526 <_ZL8nextNotev+0x9c>
     508:	8e 33       	cpi	r24, 0x3E	; 62
     50a:	49 f1       	breq	.+82     	; 0x55e <_ZL8nextNotev+0xd4>
     50c:	8f 33       	cpi	r24, 0x3F	; 63
     50e:	3c f4       	brge	.+14     	; 0x51e <_ZL8nextNotev+0x94>
     510:	81 32       	cpi	r24, 0x21	; 33
     512:	09 f4       	brne	.+2      	; 0x516 <_ZL8nextNotev+0x8c>
     514:	87 c0       	rjmp	.+270    	; 0x624 <_ZL8nextNotev+0x19a>
     516:	8c 33       	cpi	r24, 0x3C	; 60
     518:	09 f0       	breq	.+2      	; 0x51c <_ZL8nextNotev+0x92>
     51a:	9b c0       	rjmp	.+310    	; 0x652 <_ZL8nextNotev+0x1c8>
     51c:	22 c0       	rjmp	.+68     	; 0x562 <_ZL8nextNotev+0xd8>
     51e:	81 36       	cpi	r24, 0x61	; 97
     520:	09 f0       	breq	.+2      	; 0x524 <_ZL8nextNotev+0x9a>
     522:	97 c0       	rjmp	.+302    	; 0x652 <_ZL8nextNotev+0x1c8>
     524:	9b c0       	rjmp	.+310    	; 0x65c <_ZL8nextNotev+0x1d2>
     526:	84 36       	cpi	r24, 0x64	; 100
     528:	01 f1       	breq	.+64     	; 0x56a <_ZL8nextNotev+0xe0>
     52a:	85 36       	cpi	r24, 0x65	; 101
     52c:	0c f5       	brge	.+66     	; 0x570 <_ZL8nextNotev+0xe6>
     52e:	1b c0       	rjmp	.+54     	; 0x566 <_ZL8nextNotev+0xdc>
     530:	8f 36       	cpi	r24, 0x6F	; 111
     532:	09 f4       	brne	.+2      	; 0x536 <_ZL8nextNotev+0xac>
     534:	47 c0       	rjmp	.+142    	; 0x5c4 <_ZL8nextNotev+0x13a>
     536:	80 37       	cpi	r24, 0x70	; 112
     538:	44 f4       	brge	.+16     	; 0x54a <_ZL8nextNotev+0xc0>
     53a:	8c 36       	cpi	r24, 0x6C	; 108
     53c:	11 f1       	breq	.+68     	; 0x582 <_ZL8nextNotev+0xf8>
     53e:	8d 36       	cpi	r24, 0x6D	; 109
     540:	61 f1       	breq	.+88     	; 0x59a <_ZL8nextNotev+0x110>
     542:	87 36       	cpi	r24, 0x67	; 103
     544:	09 f0       	breq	.+2      	; 0x548 <_ZL8nextNotev+0xbe>
     546:	85 c0       	rjmp	.+266    	; 0x652 <_ZL8nextNotev+0x1c8>
     548:	19 c0       	rjmp	.+50     	; 0x57c <_ZL8nextNotev+0xf2>
     54a:	84 37       	cpi	r24, 0x74	; 116
     54c:	09 f4       	brne	.+2      	; 0x550 <_ZL8nextNotev+0xc6>
     54e:	44 c0       	rjmp	.+136    	; 0x5d8 <_ZL8nextNotev+0x14e>
     550:	86 37       	cpi	r24, 0x76	; 118
     552:	09 f4       	brne	.+2      	; 0x556 <_ZL8nextNotev+0xcc>
     554:	60 c0       	rjmp	.+192    	; 0x616 <_ZL8nextNotev+0x18c>
     556:	82 37       	cpi	r24, 0x72	; 114
     558:	09 f0       	breq	.+2      	; 0x55c <_ZL8nextNotev+0xd2>
     55a:	7b c0       	rjmp	.+246    	; 0x652 <_ZL8nextNotev+0x1c8>
     55c:	39 c0       	rjmp	.+114    	; 0x5d0 <_ZL8nextNotev+0x146>
	{
	case '>':
		// shift the octave temporarily up
		tmp_octave ++;
     55e:	b3 94       	inc	r11
		goto parse_character;
     560:	be cf       	rjmp	.-132    	; 0x4de <_ZL8nextNotev+0x54>
	case '<':
		// shift the octave temporarily down
		tmp_octave --;
     562:	ba 94       	dec	r11
		goto parse_character;
     564:	bc cf       	rjmp	.-136    	; 0x4de <_ZL8nextNotev+0x54>
}

static void nextNote()
{
	unsigned char note = 0;
	unsigned char rest = 0;
     566:	ee 24       	eor	r14, r14
     568:	35 c0       	rjmp	.+106    	; 0x5d4 <_ZL8nextNotev+0x14a>
     56a:	ee 24       	eor	r14, r14
		break;
	case 'c':
		note = NOTE_C(0);
		break;
	case 'd':
		note = NOTE_D(0);
     56c:	82 e0       	ldi	r24, 0x02	; 2
		break;
     56e:	7b c0       	rjmp	.+246    	; 0x666 <_ZL8nextNotev+0x1dc>
}

static void nextNote()
{
	unsigned char note = 0;
	unsigned char rest = 0;
     570:	ee 24       	eor	r14, r14
		break;
	case 'd':
		note = NOTE_D(0);
		break;
	case 'e':
		note = NOTE_E(0);
     572:	84 e0       	ldi	r24, 0x04	; 4
		break;
     574:	78 c0       	rjmp	.+240    	; 0x666 <_ZL8nextNotev+0x1dc>
}

static void nextNote()
{
	unsigned char note = 0;
	unsigned char rest = 0;
     576:	ee 24       	eor	r14, r14
		break;
	case 'e':
		note = NOTE_E(0);
		break;
	case 'f':
		note = NOTE_F(0);
     578:	85 e0       	ldi	r24, 0x05	; 5
		break;
     57a:	75 c0       	rjmp	.+234    	; 0x666 <_ZL8nextNotev+0x1dc>
}

static void nextNote()
{
	unsigned char note = 0;
	unsigned char rest = 0;
     57c:	ee 24       	eor	r14, r14
		break;
	case 'f':
		note = NOTE_F(0);
		break;
	case 'g':
		note = NOTE_G(0);
     57e:	87 e0       	ldi	r24, 0x07	; 7
		break;
     580:	72 c0       	rjmp	.+228    	; 0x666 <_ZL8nextNotev+0x1dc>
	case 'l':
		// set the default note duration
		note_type = getNumber();
     582:	0e 94 ef 00 	call	0x1de	; 0x1de <_ZL9getNumberv>
     586:	bc 01       	movw	r22, r24
     588:	90 93 21 01 	sts	0x0121, r25
     58c:	80 93 20 01 	sts	0x0120, r24
		duration = whole_note_duration/note_type;
     590:	80 91 22 01 	lds	r24, 0x0122
     594:	90 91 23 01 	lds	r25, 0x0123
     598:	37 c0       	rjmp	.+110    	; 0x608 <_ZL8nextNotev+0x17e>
		goto parse_character;
	case 'm':
		// set music staccato or legato
		if(currentCharacter() == 'l')
     59a:	0e 94 cd 00 	call	0x19a	; 0x19a <_ZL16currentCharacterv>
     59e:	8c 36       	cpi	r24, 0x6C	; 108
     5a0:	19 f4       	brne	.+6      	; 0x5a8 <_ZL8nextNotev+0x11e>
			staccato = false;
     5a2:	10 92 4b 01 	sts	0x014B, r1
     5a6:	04 c0       	rjmp	.+8      	; 0x5b0 <_ZL8nextNotev+0x126>
		else
		{
			staccato = true;
     5a8:	a0 92 4b 01 	sts	0x014B, r10
			staccato_rest_duration = 0;
     5ac:	10 92 4c 01 	sts	0x014C, r1
		}
		buzzerSequence ++;
     5b0:	80 91 49 01 	lds	r24, 0x0149
     5b4:	90 91 4a 01 	lds	r25, 0x014A
     5b8:	01 96       	adiw	r24, 0x01	; 1
     5ba:	90 93 4a 01 	sts	0x014A, r25
     5be:	80 93 49 01 	sts	0x0149, r24
		goto parse_character;
     5c2:	8d cf       	rjmp	.-230    	; 0x4de <_ZL8nextNotev+0x54>
	case 'o':
		// set the octave permanently
		octave = getNumber();
     5c4:	0e 94 ef 00 	call	0x1de	; 0x1de <_ZL9getNumberv>
     5c8:	b8 2e       	mov	r11, r24
     5ca:	80 93 1f 01 	sts	0x011F, r24
		tmp_octave = octave;
		goto parse_character;
     5ce:	87 cf       	rjmp	.-242    	; 0x4de <_ZL8nextNotev+0x54>
	case 'r':
		// Rest - the note value doesn't matter.
		rest = 1;
     5d0:	ee 24       	eor	r14, r14
     5d2:	e3 94       	inc	r14
	return arg;
}

static void nextNote()
{
	unsigned char note = 0;
     5d4:	80 e0       	ldi	r24, 0x00	; 0
		tmp_octave = octave;
		goto parse_character;
	case 'r':
		// Rest - the note value doesn't matter.
		rest = 1;
		break;
     5d6:	47 c0       	rjmp	.+142    	; 0x666 <_ZL8nextNotev+0x1dc>
	case 't':
		// set the tempo
		whole_note_duration = 60*400/getNumber()*10;
     5d8:	0e 94 ef 00 	call	0x1de	; 0x1de <_ZL9getNumberv>
     5dc:	bc 01       	movw	r22, r24
     5de:	ce 01       	movw	r24, r28
     5e0:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <__udivmodhi4>
     5e4:	cb 01       	movw	r24, r22
     5e6:	88 0f       	add	r24, r24
     5e8:	99 1f       	adc	r25, r25
     5ea:	53 e0       	ldi	r21, 0x03	; 3
     5ec:	66 0f       	add	r22, r22
     5ee:	77 1f       	adc	r23, r23
     5f0:	5a 95       	dec	r21
     5f2:	e1 f7       	brne	.-8      	; 0x5ec <_ZL8nextNotev+0x162>
     5f4:	86 0f       	add	r24, r22
     5f6:	97 1f       	adc	r25, r23
     5f8:	90 93 23 01 	sts	0x0123, r25
     5fc:	80 93 22 01 	sts	0x0122, r24
		duration = whole_note_duration/note_type;
     600:	60 91 20 01 	lds	r22, 0x0120
     604:	70 91 21 01 	lds	r23, 0x0121
     608:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <__udivmodhi4>
     60c:	70 93 25 01 	sts	0x0125, r23
     610:	60 93 24 01 	sts	0x0124, r22
		goto parse_character;
     614:	64 cf       	rjmp	.-312    	; 0x4de <_ZL8nextNotev+0x54>
	case 'v':
		// set the volume
		volume = getNumber();
     616:	0e 94 ef 00 	call	0x1de	; 0x1de <_ZL9getNumberv>
     61a:	90 93 27 01 	sts	0x0127, r25
     61e:	80 93 26 01 	sts	0x0126, r24
		goto parse_character;
     622:	5d cf       	rjmp	.-326    	; 0x4de <_ZL8nextNotev+0x54>
	case '!':
		// reset to defaults
		octave = 4;
     624:	70 92 1f 01 	sts	0x011F, r7
		whole_note_duration = 2000;
     628:	10 93 23 01 	sts	0x0123, r17
     62c:	00 93 22 01 	sts	0x0122, r16
		note_type = 4;
     630:	f0 92 21 01 	sts	0x0121, r15
     634:	e0 92 20 01 	sts	0x0120, r14
		duration = 500;
     638:	d0 92 25 01 	sts	0x0125, r13
     63c:	c0 92 24 01 	sts	0x0124, r12
		volume = 15;
     640:	90 92 27 01 	sts	0x0127, r9
     644:	80 92 26 01 	sts	0x0126, r8
		staccato = 0;
     648:	10 92 4b 01 	sts	0x014B, r1
		// reset temp variables that depend on the defaults
		tmp_octave = octave;
     64c:	44 e0       	ldi	r20, 0x04	; 4
     64e:	b4 2e       	mov	r11, r20
     650:	46 cf       	rjmp	.-372    	; 0x4de <_ZL8nextNotev+0x54>
		tmp_duration = duration;
		goto parse_character;
	default:
		buzzerSequence = 0;
     652:	10 92 4a 01 	sts	0x014A, r1
     656:	10 92 49 01 	sts	0x0149, r1
		return;
     65a:	64 c0       	rjmp	.+200    	; 0x724 <_ZL8nextNotev+0x29a>
}

static void nextNote()
{
	unsigned char note = 0;
	unsigned char rest = 0;
     65c:	ee 24       	eor	r14, r14
	case '<':
		// shift the octave temporarily down
		tmp_octave --;
		goto parse_character;
	case 'a':
		note = NOTE_A(0);
     65e:	89 e0       	ldi	r24, 0x09	; 9
     660:	02 c0       	rjmp	.+4      	; 0x666 <_ZL8nextNotev+0x1dc>
}

static void nextNote()
{
	unsigned char note = 0;
	unsigned char rest = 0;
     662:	ee 24       	eor	r14, r14
		goto parse_character;
	case 'a':
		note = NOTE_A(0);
		break;
	case 'b':
		note = NOTE_B(0);
     664:	8b e0       	ldi	r24, 0x0B	; 11
	default:
		buzzerSequence = 0;
		return;
	}

	note += tmp_octave*12;
     666:	9c e0       	ldi	r25, 0x0C	; 12
     668:	b9 9e       	mul	r11, r25
     66a:	b0 2c       	mov	r11, r0
     66c:	11 24       	eor	r1, r1
     66e:	b8 0e       	add	r11, r24

	// handle sharps and flats
	c = currentCharacter();
     670:	0e 94 cd 00 	call	0x19a	; 0x19a <_ZL16currentCharacterv>
	while(c == '+' || c == '#')
     674:	8b 32       	cpi	r24, 0x2B	; 43
     676:	11 f0       	breq	.+4      	; 0x67c <_ZL8nextNotev+0x1f2>
     678:	83 32       	cpi	r24, 0x23	; 35
     67a:	b9 f4       	brne	.+46     	; 0x6aa <_ZL8nextNotev+0x220>
	{
		buzzerSequence ++;
     67c:	80 91 49 01 	lds	r24, 0x0149
     680:	90 91 4a 01 	lds	r25, 0x014A
     684:	01 96       	adiw	r24, 0x01	; 1
     686:	90 93 4a 01 	sts	0x014A, r25
     68a:	80 93 49 01 	sts	0x0149, r24
		note ++;
     68e:	b3 94       	inc	r11
     690:	ef cf       	rjmp	.-34     	; 0x670 <_ZL8nextNotev+0x1e6>
		c = currentCharacter();
	}
	while(c == '-')
	{
		buzzerSequence ++;
     692:	80 91 49 01 	lds	r24, 0x0149
     696:	90 91 4a 01 	lds	r25, 0x014A
     69a:	01 96       	adiw	r24, 0x01	; 1
     69c:	90 93 4a 01 	sts	0x014A, r25
     6a0:	80 93 49 01 	sts	0x0149, r24
		note --;
     6a4:	ba 94       	dec	r11
		c = currentCharacter();
     6a6:	0e 94 cd 00 	call	0x19a	; 0x19a <_ZL16currentCharacterv>
	{
		buzzerSequence ++;
		note ++;
		c = currentCharacter();
	}
	while(c == '-')
     6aa:	8d 32       	cpi	r24, 0x2D	; 45
     6ac:	91 f3       	breq	.-28     	; 0x692 <_ZL8nextNotev+0x208>
		note --;
		c = currentCharacter();
	}

	// set the duration of just this note
	tmp_duration = duration;
     6ae:	c0 91 24 01 	lds	r28, 0x0124
     6b2:	d0 91 25 01 	lds	r29, 0x0125

	// If the input is 'c16', make it a 16th note, etc.
	if(c > '0' && c < '9')
     6b6:	81 53       	subi	r24, 0x31	; 49
     6b8:	88 30       	cpi	r24, 0x08	; 8
     6ba:	58 f4       	brcc	.+22     	; 0x6d2 <_ZL8nextNotev+0x248>
		tmp_duration = whole_note_duration/getNumber();
     6bc:	c0 91 22 01 	lds	r28, 0x0122
     6c0:	d0 91 23 01 	lds	r29, 0x0123
     6c4:	0e 94 ef 00 	call	0x1de	; 0x1de <_ZL9getNumberv>
     6c8:	bc 01       	movw	r22, r24
     6ca:	ce 01       	movw	r24, r28
     6cc:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <__udivmodhi4>
     6d0:	eb 01       	movw	r28, r22

	// Handle dotted notes - the first dot adds 50%, and each
	// additional dot adds 50% of the previous dot.
	dot_add = tmp_duration/2;
     6d2:	8e 01       	movw	r16, r28
     6d4:	0c c0       	rjmp	.+24     	; 0x6ee <_ZL8nextNotev+0x264>
	while(currentCharacter() == '.')
	{
		buzzerSequence ++;
     6d6:	20 91 49 01 	lds	r18, 0x0149
     6da:	30 91 4a 01 	lds	r19, 0x014A
     6de:	2f 5f       	subi	r18, 0xFF	; 255
     6e0:	3f 4f       	sbci	r19, 0xFF	; 255
     6e2:	30 93 4a 01 	sts	0x014A, r19
     6e6:	20 93 49 01 	sts	0x0149, r18
		tmp_duration += dot_add;
     6ea:	c0 0f       	add	r28, r16
     6ec:	d1 1f       	adc	r29, r17
		dot_add /= 2;
     6ee:	16 95       	lsr	r17
     6f0:	07 95       	ror	r16
		tmp_duration = whole_note_duration/getNumber();

	// Handle dotted notes - the first dot adds 50%, and each
	// additional dot adds 50% of the previous dot.
	dot_add = tmp_duration/2;
	while(currentCharacter() == '.')
     6f2:	0e 94 cd 00 	call	0x19a	; 0x19a <_ZL16currentCharacterv>
     6f6:	8e 32       	cpi	r24, 0x2E	; 46
     6f8:	71 f3       	breq	.-36     	; 0x6d6 <_ZL8nextNotev+0x24c>
		buzzerSequence ++;
		tmp_duration += dot_add;
		dot_add /= 2;
	}

	if(staccato)
     6fa:	80 91 4b 01 	lds	r24, 0x014B
     6fe:	88 23       	and	r24, r24
     700:	39 f0       	breq	.+14     	; 0x710 <_ZL8nextNotev+0x286>
	{
		staccato_rest_duration = tmp_duration / 2;
     702:	ce 01       	movw	r24, r28
     704:	96 95       	lsr	r25
     706:	87 95       	ror	r24
     708:	80 93 4c 01 	sts	0x014C, r24
		tmp_duration -= staccato_rest_duration;
     70c:	c8 1b       	sub	r28, r24
     70e:	d1 09       	sbc	r29, r1
	}
	
	// this will re-enable the timer1 overflow interrupt
	OrangutanBuzzer::playNote(rest ? SILENT_NOTE : note, tmp_duration, volume);
     710:	ee 20       	and	r14, r14
     712:	11 f0       	breq	.+4      	; 0x718 <_ZL8nextNotev+0x28e>
     714:	bb 24       	eor	r11, r11
     716:	ba 94       	dec	r11
     718:	8b 2d       	mov	r24, r11
     71a:	be 01       	movw	r22, r28
     71c:	40 91 26 01 	lds	r20, 0x0126
     720:	0e 94 ef 01 	call	0x3de	; 0x3de <_ZN15OrangutanBuzzer8playNoteEhjh>
}
     724:	cd b7       	in	r28, 0x3d	; 61
     726:	de b7       	in	r29, 0x3e	; 62
     728:	ed e0       	ldi	r30, 0x0D	; 13
     72a:	0c 94 dc 09 	jmp	0x13b8	; 0x13b8 <__epilogue_restores__+0xa>

0000072e <__vector_13>:

static void nextNote();

// Timer1 overflow interrupt
ISR (TIMER1_OVF_vect)
{
     72e:	1f 92       	push	r1
     730:	0f 92       	push	r0
     732:	0f b6       	in	r0, 0x3f	; 63
     734:	0f 92       	push	r0
     736:	11 24       	eor	r1, r1
     738:	2f 93       	push	r18
     73a:	3f 93       	push	r19
     73c:	4f 93       	push	r20
     73e:	5f 93       	push	r21
     740:	6f 93       	push	r22
     742:	7f 93       	push	r23
     744:	8f 93       	push	r24
     746:	9f 93       	push	r25
     748:	af 93       	push	r26
     74a:	bf 93       	push	r27
     74c:	ef 93       	push	r30
     74e:	ff 93       	push	r31
	if (buzzerTimeout-- == 0)
     750:	80 91 4f 01 	lds	r24, 0x014F
     754:	90 91 50 01 	lds	r25, 0x0150
     758:	9c 01       	movw	r18, r24
     75a:	21 50       	subi	r18, 0x01	; 1
     75c:	30 40       	sbci	r19, 0x00	; 0
     75e:	30 93 50 01 	sts	0x0150, r19
     762:	20 93 4f 01 	sts	0x014F, r18
     766:	00 97       	sbiw	r24, 0x00	; 0
     768:	11 f5       	brne	.+68     	; 0x7ae <__vector_13+0x80>
	{
		DISABLE_TIMER1_INTERRUPT();
     76a:	10 92 6f 00 	sts	0x006F, r1
		sei();		// re-enable global interrupts (nextNote() is very slow)
     76e:	78 94       	sei
		TCCR1B = (TCCR1B & 0xF8) | TIMER1_CLK_1;	// select IO clock
     770:	80 91 81 00 	lds	r24, 0x0081
     774:	88 7f       	andi	r24, 0xF8	; 248
     776:	81 60       	ori	r24, 0x01	; 1
     778:	80 93 81 00 	sts	0x0081, r24
		OCR1A = (F_CPU/2) / 1000;			// set TOP for freq = 1 kHz
     77c:	80 e1       	ldi	r24, 0x10	; 16
     77e:	97 e2       	ldi	r25, 0x27	; 39
     780:	90 93 89 00 	sts	0x0089, r25
     784:	80 93 88 00 	sts	0x0088, r24
		OCR1B = 0;						// 0% duty cycle
     788:	10 92 8b 00 	sts	0x008B, r1
     78c:	10 92 8a 00 	sts	0x008A, r1
		buzzerFinished = 1;
     790:	81 e0       	ldi	r24, 0x01	; 1
     792:	80 93 1e 01 	sts	0x011E, r24
		if (buzzerSequence && (play_mode_setting == PLAY_AUTOMATIC))
     796:	80 91 49 01 	lds	r24, 0x0149
     79a:	90 91 4a 01 	lds	r25, 0x014A
     79e:	00 97       	sbiw	r24, 0x00	; 0
     7a0:	31 f0       	breq	.+12     	; 0x7ae <__vector_13+0x80>
     7a2:	80 91 4e 01 	lds	r24, 0x014E
     7a6:	88 23       	and	r24, r24
     7a8:	11 f4       	brne	.+4      	; 0x7ae <__vector_13+0x80>
			nextNote();
     7aa:	0e 94 45 02 	call	0x48a	; 0x48a <_ZL8nextNotev>
	}
}
     7ae:	ff 91       	pop	r31
     7b0:	ef 91       	pop	r30
     7b2:	bf 91       	pop	r27
     7b4:	af 91       	pop	r26
     7b6:	9f 91       	pop	r25
     7b8:	8f 91       	pop	r24
     7ba:	7f 91       	pop	r23
     7bc:	6f 91       	pop	r22
     7be:	5f 91       	pop	r21
     7c0:	4f 91       	pop	r20
     7c2:	3f 91       	pop	r19
     7c4:	2f 91       	pop	r18
     7c6:	0f 90       	pop	r0
     7c8:	0f be       	out	0x3f, r0	; 63
     7ca:	0f 90       	pop	r0
     7cc:	1f 90       	pop	r1
     7ce:	18 95       	reti

000007d0 <play_note>:
}

extern "C" void play_note(unsigned char note, unsigned int dur,
						  unsigned char volume)
{
	OrangutanBuzzer::playNote(note, dur, volume);
     7d0:	0e 94 ef 01 	call	0x3de	; 0x3de <_ZN15OrangutanBuzzer8playNoteEhjh>
}
     7d4:	08 95       	ret

000007d6 <_ZN15OrangutanBuzzer9isPlayingEv>:


// Returns 1 if the buzzer is currently playing, otherwise it returns 0
unsigned char OrangutanBuzzer::isPlaying()
{
	return !buzzerFinished || buzzerSequence != 0;
     7d6:	80 91 1e 01 	lds	r24, 0x011E
     7da:	88 23       	and	r24, r24
     7dc:	51 f0       	breq	.+20     	; 0x7f2 <_ZN15OrangutanBuzzer9isPlayingEv+0x1c>
}



// Returns 1 if the buzzer is currently playing, otherwise it returns 0
unsigned char OrangutanBuzzer::isPlaying()
     7de:	81 e0       	ldi	r24, 0x01	; 1
     7e0:	20 91 49 01 	lds	r18, 0x0149
     7e4:	30 91 4a 01 	lds	r19, 0x014A
     7e8:	21 15       	cp	r18, r1
     7ea:	31 05       	cpc	r19, r1
     7ec:	19 f4       	brne	.+6      	; 0x7f4 <_ZN15OrangutanBuzzer9isPlayingEv+0x1e>
     7ee:	80 e0       	ldi	r24, 0x00	; 0
     7f0:	08 95       	ret
{
	return !buzzerFinished || buzzerSequence != 0;
     7f2:	81 e0       	ldi	r24, 0x01	; 1
}
     7f4:	08 95       	ret

000007f6 <is_playing>:
	OrangutanBuzzer::playFromProgramSpace(sequence_p);
}

extern "C" unsigned char is_playing()
{
	return OrangutanBuzzer::isPlaying();
     7f6:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <_ZN15OrangutanBuzzer9isPlayingEv>
}
     7fa:	08 95       	ret

000007fc <_ZN15OrangutanBuzzer4playEPKc>:
//
// Here is an example from Bach:
//   play("T240 L8 a gafaeada c+adaeafa <aa<bac#ada c#adaeaf4");
void OrangutanBuzzer::play(const char *notes)
{
	DISABLE_TIMER1_INTERRUPT();	// prevent this from being interrupted
     7fc:	10 92 6f 00 	sts	0x006F, r1
	buzzerSequence = notes;
     800:	90 93 4a 01 	sts	0x014A, r25
     804:	80 93 49 01 	sts	0x0149, r24
	use_program_space = 0;
     808:	10 92 4d 01 	sts	0x014D, r1
	staccato_rest_duration = 0;
     80c:	10 92 4c 01 	sts	0x014C, r1
	nextNote();					// this re-enables the timer1 interrupt
     810:	0e 94 45 02 	call	0x48a	; 0x48a <_ZL8nextNotev>
}
     814:	08 95       	ret

00000816 <play>:
	OrangutanBuzzer::playNote(note, dur, volume);
}

extern "C" void play(const char *sequence)
{
	OrangutanBuzzer::play(sequence);
     816:	0e 94 fe 03 	call	0x7fc	; 0x7fc <_ZN15OrangutanBuzzer4playEPKc>
}
     81a:	08 95       	ret

0000081c <_ZN15OrangutanBuzzer20playFromProgramSpaceEPKc>:
	nextNote();					// this re-enables the timer1 interrupt
}

void OrangutanBuzzer::playFromProgramSpace(const char *notes_p)
{
	DISABLE_TIMER1_INTERRUPT();	// prevent this from being interrupted
     81c:	10 92 6f 00 	sts	0x006F, r1
	buzzerSequence = notes_p;
     820:	90 93 4a 01 	sts	0x014A, r25
     824:	80 93 49 01 	sts	0x0149, r24
	use_program_space = 1;
     828:	81 e0       	ldi	r24, 0x01	; 1
     82a:	80 93 4d 01 	sts	0x014D, r24
	staccato_rest_duration = 0;
     82e:	10 92 4c 01 	sts	0x014C, r1
	nextNote();					// this re-enables the timer1 interrupt
     832:	0e 94 45 02 	call	0x48a	; 0x48a <_ZL8nextNotev>
}
     836:	08 95       	ret

00000838 <play_from_program_space>:
	OrangutanBuzzer::play(sequence);
}

extern "C" void play_from_program_space(const char *sequence_p)
{
	OrangutanBuzzer::playFromProgramSpace(sequence_p);
     838:	0e 94 0e 04 	call	0x81c	; 0x81c <_ZN15OrangutanBuzzer20playFromProgramSpaceEPKc>
}
     83c:	08 95       	ret

0000083e <_ZN15OrangutanBuzzer11stopPlayingEv>:


// stop all sound playback immediately
void OrangutanBuzzer::stopPlaying()
{
	DISABLE_TIMER1_INTERRUPT();					// disable interrupts
     83e:	10 92 6f 00 	sts	0x006F, r1
	TCCR1B = (TCCR1B & 0xF8) | TIMER1_CLK_1;	// select IO clock
     842:	e1 e8       	ldi	r30, 0x81	; 129
     844:	f0 e0       	ldi	r31, 0x00	; 0
     846:	80 81       	ld	r24, Z
     848:	88 7f       	andi	r24, 0xF8	; 248
     84a:	81 60       	ori	r24, 0x01	; 1
     84c:	80 83       	st	Z, r24
	OCR1A = (F_CPU/2) / 1000;					// set TOP for freq = 1 kHz
     84e:	80 e1       	ldi	r24, 0x10	; 16
     850:	97 e2       	ldi	r25, 0x27	; 39
     852:	90 93 89 00 	sts	0x0089, r25
     856:	80 93 88 00 	sts	0x0088, r24
	OCR1B = 0;									// 0% duty cycle
     85a:	10 92 8b 00 	sts	0x008B, r1
     85e:	10 92 8a 00 	sts	0x008A, r1
	buzzerFinished = 1;
     862:	81 e0       	ldi	r24, 0x01	; 1
     864:	80 93 1e 01 	sts	0x011E, r24
	buzzerSequence = 0;
     868:	10 92 4a 01 	sts	0x014A, r1
     86c:	10 92 49 01 	sts	0x0149, r1
#ifdef _ORANGUTAN_X2
	OrangutanX2::buzzerOff();
#endif
}
     870:	08 95       	ret

00000872 <stop_playing>:
	return OrangutanBuzzer::isPlaying();
}

extern "C" void stop_playing()
{
	OrangutanBuzzer::stopPlaying();
     872:	0e 94 1f 04 	call	0x83e	; 0x83e <_ZN15OrangutanBuzzer11stopPlayingEv>
}
     876:	08 95       	ret

00000878 <_ZN15OrangutanBuzzer9playCheckEv>:
// in your main loop to avoid delays between notes in the sequence.
//
// Returns true if it is still playing.
unsigned char OrangutanBuzzer::playCheck()
{
	if(buzzerFinished && buzzerSequence != 0)
     878:	80 91 1e 01 	lds	r24, 0x011E
     87c:	88 23       	and	r24, r24
     87e:	41 f0       	breq	.+16     	; 0x890 <_ZN15OrangutanBuzzer9playCheckEv+0x18>
     880:	80 91 49 01 	lds	r24, 0x0149
     884:	90 91 4a 01 	lds	r25, 0x014A
     888:	00 97       	sbiw	r24, 0x00	; 0
     88a:	11 f0       	breq	.+4      	; 0x890 <_ZN15OrangutanBuzzer9playCheckEv+0x18>
		nextNote();
     88c:	0e 94 45 02 	call	0x48a	; 0x48a <_ZL8nextNotev>
	return buzzerSequence != 0;
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	20 91 49 01 	lds	r18, 0x0149
     896:	30 91 4a 01 	lds	r19, 0x014A
     89a:	21 15       	cp	r18, r1
     89c:	31 05       	cpc	r19, r1
     89e:	09 f4       	brne	.+2      	; 0x8a2 <_ZN15OrangutanBuzzer9playCheckEv+0x2a>
     8a0:	80 e0       	ldi	r24, 0x00	; 0
}
     8a2:	08 95       	ret

000008a4 <_ZN15OrangutanBuzzer8playModeEh>:
// Usage: playMode(PLAY_AUTOMATIC) makes it automatic (the
// default), playMode(PLAY_CHECK) sets it to a mode where you have
// to call playCheck().
void OrangutanBuzzer::playMode(unsigned char mode)
{
	play_mode_setting = mode;
     8a4:	80 93 4e 01 	sts	0x014E, r24

	// We want to check to make sure that we didn't miss a note if we
	// are going out of play-check mode.
	if(mode == PLAY_AUTOMATIC)
     8a8:	88 23       	and	r24, r24
     8aa:	11 f4       	brne	.+4      	; 0x8b0 <_ZN15OrangutanBuzzer8playModeEh+0xc>
		playCheck();
     8ac:	0e 94 3c 04 	call	0x878	; 0x878 <_ZN15OrangutanBuzzer9playCheckEv>
     8b0:	08 95       	ret

000008b2 <play_mode>:
	OrangutanBuzzer::stopPlaying();
}

extern "C" void play_mode(unsigned char mode)
{
	OrangutanBuzzer::playMode(mode);
     8b2:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN15OrangutanBuzzer8playModeEh>
}
     8b6:	08 95       	ret

000008b8 <play_check>:

extern "C" unsigned char play_check()
{
	return OrangutanBuzzer::playCheck();
     8b8:	0e 94 3c 04 	call	0x878	; 0x878 <_ZN15OrangutanBuzzer9playCheckEv>
}
     8bc:	08 95       	ret

000008be <void_getchar>:
	return c;
}

extern "C" int void_getchar(FILE *f) {
	return 0;
}
     8be:	80 e0       	ldi	r24, 0x00	; 0
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	08 95       	ret

000008c4 <delayMicroseconds.clone.0>:
		    "   pop  r22"     "\n\t"   
		    "   sbiw %0, 1"   "\n\t"
		    "   brne 1b"
		    : "=w" ( microseconds )  
		    : "0" ( microseconds )
		    );  
     8c4:	81 e0       	ldi	r24, 0x01	; 1
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	6f 93       	push	r22
     8ca:	64 e0       	ldi	r22, 0x04	; 4
     8cc:	6a 95       	dec	r22
     8ce:	f1 f7       	brne	.-4      	; 0x8cc <delayMicroseconds.clone.0+0x8>
     8d0:	6f 91       	pop	r22
     8d2:	01 97       	sbiw	r24, 0x01	; 1
     8d4:	c9 f7       	brne	.-14     	; 0x8c8 <delayMicroseconds.clone.0+0x4>
}

// These are alternative aliases:
static inline void delay(unsigned int milliseconds) { delay_ms(milliseconds); }
static inline unsigned long millis(void) { return get_ms(); }
static inline void delayMicroseconds(unsigned int microseconds) { delay_us(microseconds); }
     8d6:	08 95       	ret

000008d8 <_ZN12OrangutanLCDC1Ev>:

// constructor (doesn't do anything)

OrangutanLCD::OrangutanLCD()
{
}
     8d8:	08 95       	ret

000008da <_ZN12OrangutanLCD8busyWaitEv>:
// Wait for the busy flag to clear.  The 4-bit interface is 
// more complicated than the 8-bit interface because E must
// be strobed twice to get the full eight bits back from
// the LCD, even though we're only interested in one of them.
void OrangutanLCD::busyWait()
{
     8da:	0f 93       	push	r16
     8dc:	1f 93       	push	r17
     8de:	cf 93       	push	r28
     8e0:	df 93       	push	r29
	uint8_t temp_ddr, data;

	// Save our DDR information
	temp_ddr = LCD_BF_DDR;
     8e2:	1a b1       	in	r17, 0x0a	; 10

	// Set up the data DDR for input
	LCD_BF_DDR &= ~LCD_BF_MASK;
     8e4:	57 98       	cbi	0x0a, 7	; 10

	// Set up RS and RW to read the state of the LCD's busy flag
	LCD_RS_PORT &= ~(1 << LCD_RS);
     8e6:	5a 98       	cbi	0x0b, 2	; 11
	LCD_RW_PORT |= 1 << LCD_RW;
     8e8:	28 9a       	sbi	0x05, 0	; 5
	
	unsigned int usCounter = 0;
     8ea:	c0 e0       	ldi	r28, 0x00	; 0
     8ec:	d0 e0       	ldi	r29, 0x00	; 0

	do
	{
		delayMicroseconds(1);
     8ee:	0e 94 62 04 	call	0x8c4	; 0x8c4 <delayMicroseconds.clone.0>
		
		// Bring E high
		LCD_E_PORT |= 1 << LCD_E;
     8f2:	5c 9a       	sbi	0x0b, 4	; 11

		// Wait at least 120ns (1us is excessive)
		delayMicroseconds(1);
     8f4:	0e 94 62 04 	call	0x8c4	; 0x8c4 <delayMicroseconds.clone.0>

		// Get the data back from the LCD
		data = LCD_BF_PIN;
     8f8:	09 b1       	in	r16, 0x09	; 9
		// That excessive delay means our cycle time on E cannot be
		// shorter than 1000ns (500ns being the spec), so no further
		// delays are required

		// Bring E low
		LCD_E_PORT &= ~(1 << LCD_E);
     8fa:	5c 98       	cbi	0x0b, 4	; 11
		usCounter += 2;

#ifndef _ORANGUTAN_X2

		// Wait a small bit
		delayMicroseconds(1);
     8fc:	0e 94 62 04 	call	0x8c4	; 0x8c4 <delayMicroseconds.clone.0>

		// When using the 4-bit interface, we still need to
		// strobe out the 4 bits we don't care about:

		// Bring E high
		LCD_E_PORT |= 1 << LCD_E;
     900:	5c 9a       	sbi	0x0b, 4	; 11

		// Wait at least 120ns (1us is excessive)
		delayMicroseconds(1);
     902:	0e 94 62 04 	call	0x8c4	; 0x8c4 <delayMicroseconds.clone.0>

		// Bring E low
		LCD_E_PORT &= ~(1 << LCD_E);
     906:	5c 98       	cbi	0x0b, 4	; 11
	LCD_RS_PORT &= ~(1 << LCD_RS);
	LCD_RW_PORT |= 1 << LCD_RW;
	
	unsigned int usCounter = 0;

	do
     908:	07 ff       	sbrs	r16, 7
     90a:	11 c0       	rjmp	.+34     	; 0x92e <__stack+0x2f>
		delayMicroseconds(1);

		// Bring E low
		LCD_E_PORT &= ~(1 << LCD_E);
		
		usCounter += 2;
     90c:	24 96       	adiw	r28, 0x04	; 4
	LCD_RS_PORT &= ~(1 << LCD_RS);
	LCD_RW_PORT |= 1 << LCD_RW;
	
	unsigned int usCounter = 0;

	do
     90e:	9e 01       	movw	r18, r28
     910:	40 e0       	ldi	r20, 0x00	; 0
     912:	50 e0       	ldi	r21, 0x00	; 0
     914:	80 91 55 01 	lds	r24, 0x0155
     918:	90 91 56 01 	lds	r25, 0x0156
     91c:	a0 91 57 01 	lds	r26, 0x0157
     920:	b0 91 58 01 	lds	r27, 0x0158
     924:	28 17       	cp	r18, r24
     926:	39 07       	cpc	r19, r25
     928:	4a 07       	cpc	r20, r26
     92a:	5b 07       	cpc	r21, r27
     92c:	00 f3       	brcs	.-64     	; 0x8ee <_ZN12OrangutanLCD8busyWaitEv+0x14>
	}
	
#endif

	// Restore our DDR information
	LCD_BF_DDR = temp_ddr;
     92e:	1a b9       	out	0x0a, r17	; 10
}
     930:	df 91       	pop	r29
     932:	cf 91       	pop	r28
     934:	1f 91       	pop	r17
     936:	0f 91       	pop	r16
     938:	08 95       	ret

0000093a <_ZN12OrangutanLCD8sendDataEh>:
#ifdef _ORANGUTAN_SVP
	PORTC = (PORTC & ~LCD_PORTC_MASK) | LCD_PORTC_DATA(data);
#elif defined(_ORANGUTAN_X2)
	PORTC = data;
#else
	PORTB = (PORTB & ~LCD_PORTB_MASK) | LCD_PORTB_DATA(data);
     93a:	65 b1       	in	r22, 0x05	; 5
     93c:	90 e0       	ldi	r25, 0x00	; 0
     93e:	ac 01       	movw	r20, r24
     940:	41 70       	andi	r20, 0x01	; 1
     942:	50 70       	andi	r21, 0x00	; 0
     944:	44 0f       	add	r20, r20
     946:	55 1f       	adc	r21, r21
     948:	9c 01       	movw	r18, r24
     94a:	26 70       	andi	r18, 0x06	; 6
     94c:	30 70       	andi	r19, 0x00	; 0
     94e:	53 e0       	ldi	r21, 0x03	; 3
     950:	22 0f       	add	r18, r18
     952:	33 1f       	adc	r19, r19
     954:	5a 95       	dec	r21
     956:	e1 f7       	brne	.-8      	; 0x950 <_ZN12OrangutanLCD8sendDataEh+0x16>
     958:	24 2b       	or	r18, r20
     95a:	6d 7c       	andi	r22, 0xCD	; 205
     95c:	26 2b       	or	r18, r22
     95e:	25 b9       	out	0x05, r18	; 5
	PORTD = (PORTD & ~LCD_PORTD_MASK) | LCD_PORTD_DATA(data);
     960:	2b b1       	in	r18, 0x0b	; 11
     962:	88 70       	andi	r24, 0x08	; 8
     964:	90 70       	andi	r25, 0x00	; 0
     966:	34 e0       	ldi	r19, 0x04	; 4
     968:	88 0f       	add	r24, r24
     96a:	99 1f       	adc	r25, r25
     96c:	3a 95       	dec	r19
     96e:	e1 f7       	brne	.-8      	; 0x968 <_ZN12OrangutanLCD8sendDataEh+0x2e>
     970:	2f 77       	andi	r18, 0x7F	; 127
     972:	28 2b       	or	r18, r24
     974:	2b b9       	out	0x0b, r18	; 11

	// At this point the four data lines are set, so the Enable pin 
	// is strobed to let the LCD latch them.

	// Bring E high
	LCD_E_PORT |= 1 << LCD_E;
     976:	5c 9a       	sbi	0x0b, 4	; 11
	
	// Wait => 450ns (1us is excessive)
	delayMicroseconds(1);
     978:	0e 94 62 04 	call	0x8c4	; 0x8c4 <delayMicroseconds.clone.0>

	// Bring E low
	LCD_E_PORT &= ~(1 << LCD_E);
     97c:	5c 98       	cbi	0x0b, 4	; 11

	delayMicroseconds(1);
     97e:	0e 94 62 04 	call	0x8c4	; 0x8c4 <delayMicroseconds.clone.0>
	// Dropping out of the routine will take at least 10ns, the time
	// given by the datasheet for the LCD controller to read the
	// nibble on the falling edge of E

	// Our nibble has now been sent to the LCD.
}
     982:	08 95       	ret

00000984 <_ZN12OrangutanLCD4sendEhhh>:


// Send either data or a command
void OrangutanLCD::send(unsigned char data, unsigned char rs, unsigned char numSends)
{	
     984:	a2 e0       	ldi	r26, 0x02	; 2
     986:	b0 e0       	ldi	r27, 0x00	; 0
     988:	e8 ec       	ldi	r30, 0xC8	; 200
     98a:	f4 e0       	ldi	r31, 0x04	; 4
     98c:	0c 94 c6 09 	jmp	0x138c	; 0x138c <__prologue_saves__+0x16>
     990:	e8 2e       	mov	r14, r24
	init();  // initialize the LCD if we haven't already
     992:	4a 83       	std	Y+2, r20	; 0x02
     994:	69 83       	std	Y+1, r22	; 0x01
     996:	0e 94 6b 05 	call	0xad6	; 0xad6 <_ZN12OrangutanLCD4initEv>

	// Wait until the busy flag clears
	busyWait();
     99a:	0e 94 6d 04 	call	0x8da	; 0x8da <_ZN12OrangutanLCD8busyWaitEv>
	unsigned char temp_ddrc, temp_portc;
	temp_ddrc = DDRC;
	temp_portc = PORTC;
#else
	unsigned char temp_ddrb, temp_portb, temp_ddrd, temp_portd;
	temp_ddrb = DDRB;
     99e:	14 b1       	in	r17, 0x04	; 4
	temp_portb = PORTB;
     9a0:	d5 b0       	in	r13, 0x05	; 5
	temp_ddrd = DDRD;
     9a2:	fa b0       	in	r15, 0x0a	; 10
	temp_portd = PORTD;
     9a4:	0b b1       	in	r16, 0x0b	; 11
#endif

	// Clear RW and set or clear RS based on the rs argument
	LCD_RW_PORT &= ~(1 << LCD_RW);
     9a6:	28 98       	cbi	0x05, 0	; 5
	if (rs)
     9a8:	69 81       	ldd	r22, Y+1	; 0x01
     9aa:	4a 81       	ldd	r20, Y+2	; 0x02
     9ac:	66 23       	and	r22, r22
     9ae:	11 f0       	breq	.+4      	; 0x9b4 <_ZN12OrangutanLCD4sendEhhh+0x30>
		LCD_RS_PORT |= 1 << LCD_RS;
     9b0:	5a 9a       	sbi	0x0b, 2	; 11
     9b2:	01 c0       	rjmp	.+2      	; 0x9b6 <_ZN12OrangutanLCD4sendEhhh+0x32>
	else
		LCD_RS_PORT &= ~(1 << LCD_RS);
     9b4:	5a 98       	cbi	0x0b, 2	; 11
#else

  #ifdef _ORANGUTAN_SVP
	DDRC |= LCD_PORTC_MASK;
  #else
	DDRB |= LCD_PORTB_MASK;
     9b6:	84 b1       	in	r24, 0x04	; 4
     9b8:	82 63       	ori	r24, 0x32	; 50
     9ba:	84 b9       	out	0x04, r24	; 4
	DDRD |= LCD_PORTD_MASK;
     9bc:	57 9a       	sbi	0x0a, 7	; 10
  #endif  // ifdef _ORANGUTAN_SVP

	if (numSends != 1)
     9be:	41 30       	cpi	r20, 0x01	; 1
     9c0:	29 f0       	breq	.+10     	; 0x9cc <_ZN12OrangutanLCD4sendEhhh+0x48>
		sendData(data >> 4);	// send high nibble via 4-bit interface
     9c2:	8e 2d       	mov	r24, r14
     9c4:	82 95       	swap	r24
     9c6:	8f 70       	andi	r24, 0x0F	; 15
     9c8:	0e 94 9d 04 	call	0x93a	; 0x93a <_ZN12OrangutanLCD8sendDataEh>
	sendData(data & 0x0F);	// send low nibble via 4-bit interface
     9cc:	8e 2d       	mov	r24, r14
     9ce:	8f 70       	andi	r24, 0x0F	; 15
     9d0:	0e 94 9d 04 	call	0x93a	; 0x93a <_ZN12OrangutanLCD8sendDataEh>
	// Restore our DDR and port information
#if defined(_ORANGUTAN_SVP) || defined(_ORANGUTAN_X2)
	DDRC = temp_ddrc;
	PORTC = temp_portc;
#else
	DDRD = temp_ddrd;
     9d4:	fa b8       	out	0x0a, r15	; 10
	PORTD = temp_portd;
     9d6:	0b b9       	out	0x0b, r16	; 11
	DDRB = temp_ddrb;
     9d8:	14 b9       	out	0x04, r17	; 4
	PORTB = temp_portb;
     9da:	d5 b8       	out	0x05, r13	; 5
#endif
}
     9dc:	22 96       	adiw	r28, 0x02	; 2
     9de:	e7 e0       	ldi	r30, 0x07	; 7
     9e0:	0c 94 e2 09 	jmp	0x13c4	; 0x13c4 <__epilogue_restores__+0x16>

000009e4 <_ZN12OrangutanLCD8send_cmdEh>:
	// sent via a single 8-bit transfer.
	static void send(unsigned char data, unsigned char rs, unsigned char numSends);
	
	static inline void send_cmd(unsigned char cmd)
	{
		send(cmd, 0, 2);
     9e4:	60 e0       	ldi	r22, 0x00	; 0
     9e6:	42 e0       	ldi	r20, 0x02	; 2
     9e8:	0e 94 c2 04 	call	0x984	; 0x984 <_ZN12OrangutanLCD4sendEhhh>
	}
     9ec:	08 95       	ret

000009ee <_ZN12OrangutanLCD9send_dataEh>:
		send(cmd, 0, 1);
	}

	static inline void send_data(unsigned char data)
	{
		send(data, 1, 2);
     9ee:	61 e0       	ldi	r22, 0x01	; 1
     9f0:	42 e0       	ldi	r20, 0x02	; 2
     9f2:	0e 94 c2 04 	call	0x984	; 0x984 <_ZN12OrangutanLCD4sendEhhh>
	}
     9f6:	08 95       	ret

000009f8 <_ZN12OrangutanLCD19loadCustomCharacterEPKch>:

#define LCD_CGRAM   6

// Loads a custom character
void OrangutanLCD::loadCustomCharacter(const char *picture_p, unsigned char number)
{
     9f8:	ef 92       	push	r14
     9fa:	ff 92       	push	r15
     9fc:	1f 93       	push	r17
     9fe:	df 93       	push	r29
     a00:	cf 93       	push	r28
     a02:	0f 92       	push	r0
     a04:	cd b7       	in	r28, 0x3d	; 61
     a06:	de b7       	in	r29, 0x3e	; 62
  unsigned char i;

  // Each character takes up 8 bytes of the character memory, so we
  // multiply by 8 to get the address.
  number *= 8;
     a08:	66 0f       	add	r22, r22
     a0a:	66 0f       	add	r22, r22
     a0c:	66 0f       	add	r22, r22
     a0e:	7c 01       	movw	r14, r24

  for(i=0; i<8; i++)
     a10:	10 e0       	ldi	r17, 0x00	; 0


#define LCD_CGRAM   6

// Loads a custom character
void OrangutanLCD::loadCustomCharacter(const char *picture_p, unsigned char number)
     a12:	81 2f       	mov	r24, r17
     a14:	86 0f       	add	r24, r22
  number *= 8;

  for(i=0; i<8; i++)
  {
    // set CG RAM address
    send_cmd((1<<LCD_CGRAM) | (number+i));
     a16:	80 64       	ori	r24, 0x40	; 64
     a18:	69 83       	std	Y+1, r22	; 0x01
     a1a:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <_ZN12OrangutanLCD8send_cmdEh>

    // write character data
    send_data(pgm_read_byte(picture_p+i));
     a1e:	f7 01       	movw	r30, r14
     a20:	84 91       	lpm	r24, Z+
     a22:	0e 94 f7 04 	call	0x9ee	; 0x9ee <_ZN12OrangutanLCD9send_dataEh>

  // Each character takes up 8 bytes of the character memory, so we
  // multiply by 8 to get the address.
  number *= 8;

  for(i=0; i<8; i++)
     a26:	1f 5f       	subi	r17, 0xFF	; 255
     a28:	08 94       	sec
     a2a:	e1 1c       	adc	r14, r1
     a2c:	f1 1c       	adc	r15, r1
     a2e:	69 81       	ldd	r22, Y+1	; 0x01
     a30:	18 30       	cpi	r17, 0x08	; 8
     a32:	79 f7       	brne	.-34     	; 0xa12 <_ZN12OrangutanLCD19loadCustomCharacterEPKch+0x1a>
    send_cmd((1<<LCD_CGRAM) | (number+i));

    // write character data
    send_data(pgm_read_byte(picture_p+i));
  }
}
     a34:	0f 90       	pop	r0
     a36:	cf 91       	pop	r28
     a38:	df 91       	pop	r29
     a3a:	1f 91       	pop	r17
     a3c:	ff 90       	pop	r15
     a3e:	ef 90       	pop	r14
     a40:	08 95       	ret

00000a42 <lcd_load_custom_character>:
	OrangutanLCD::scroll(direction, num, delay_time);
}

extern "C" void lcd_load_custom_character(const char *picture_p, unsigned char number)
{
	OrangutanLCD::loadCustomCharacter(picture_p, number);
     a42:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <_ZN12OrangutanLCD19loadCustomCharacterEPKch>
}
     a46:	08 95       	ret

00000a48 <print_character>:


// prints a single character at the current cursor location
void OrangutanLCD::print(char character)
{
	send_data(character);
     a48:	0e 94 f7 04 	call	0x9ee	; 0x9ee <_ZN12OrangutanLCD9send_dataEh>
}

extern "C" void print_character(char c)
{
	OrangutanLCD::print(c);
}
     a4c:	08 95       	ret

00000a4e <_ZN12OrangutanLCD13send_4bit_cmdEh>:
		send(cmd, 0, 2);
	}

	static inline void send_4bit_cmd(unsigned char cmd)
	{
		send(cmd, 0, 1);
     a4e:	60 e0       	ldi	r22, 0x00	; 0
     a50:	41 e0       	ldi	r20, 0x01	; 1
     a52:	0e 94 c2 04 	call	0x984	; 0x984 <_ZN12OrangutanLCD4sendEhhh>
	}
     a56:	08 95       	ret

00000a58 <_ZN12OrangutanLCD5init2Ev>:
	LCD_BF_DDR &= ~LCD_BF_MASK;		// make pull-up pin an input
	LCD_BF_PORT |= LCD_BF_MASK;		// enable pull-up on BF pin
	lcdTimeout = 30000;		// 20ms

#else
	lcdTimeout = 10000;		// 3ms
     a58:	80 e1       	ldi	r24, 0x10	; 16
     a5a:	97 e2       	ldi	r25, 0x27	; 39
     a5c:	a0 e0       	ldi	r26, 0x00	; 0
     a5e:	b0 e0       	ldi	r27, 0x00	; 0
     a60:	80 93 55 01 	sts	0x0155, r24
     a64:	90 93 56 01 	sts	0x0156, r25
     a68:	a0 93 57 01 	sts	0x0157, r26
     a6c:	b0 93 58 01 	sts	0x0158, r27
#endif
	
	// Set up the DDR for the LCD control lines
	LCD_RS_DDR |= 1 << LCD_RS;
     a70:	52 9a       	sbi	0x0a, 2	; 10
	LCD_RW_DDR |= 1 << LCD_RW;
     a72:	20 9a       	sbi	0x04, 0	; 4
	LCD_E_DDR |= 1 << LCD_E;
     a74:	54 9a       	sbi	0x0a, 4	; 10
		    : "0" ( microseconds )
		    );  
}

// These are alternative aliases:
static inline void delay(unsigned int milliseconds) { delay_ms(milliseconds); }
     a76:	8e e1       	ldi	r24, 0x1E	; 30
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	0e 94 b1 08 	call	0x1162	; 0x1162 <delay_ms>
	delay(2);	// wait >100us
	send_cmd(0x38);	// 8-bit, 2 line, 5x8 dots char (busy flag is now valid)

#else	// Orangutan SVP, LV, SV, and 3pi robot

	send_4bit_cmd(0x3);	// function set
     a7e:	83 e0       	ldi	r24, 0x03	; 3
     a80:	0e 94 27 05 	call	0xa4e	; 0xa4e <_ZN12OrangutanLCD13send_4bit_cmdEh>
     a84:	86 e0       	ldi	r24, 0x06	; 6
     a86:	90 e0       	ldi	r25, 0x00	; 0
     a88:	0e 94 b1 08 	call	0x1162	; 0x1162 <delay_ms>
	delay(6);	// wait >4.1ms
	send_4bit_cmd(0x3);	// function set
     a8c:	83 e0       	ldi	r24, 0x03	; 3
     a8e:	0e 94 27 05 	call	0xa4e	; 0xa4e <_ZN12OrangutanLCD13send_4bit_cmdEh>
     a92:	82 e0       	ldi	r24, 0x02	; 2
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	0e 94 b1 08 	call	0x1162	; 0x1162 <delay_ms>
	delay(2);	// wait >100us
	send_4bit_cmd(0x3);	// function set
     a9a:	83 e0       	ldi	r24, 0x03	; 3
     a9c:	0e 94 27 05 	call	0xa4e	; 0xa4e <_ZN12OrangutanLCD13send_4bit_cmdEh>
     aa0:	82 e0       	ldi	r24, 0x02	; 2
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	0e 94 b1 08 	call	0x1162	; 0x1162 <delay_ms>
	delay(2);	// wait >100us
	send_4bit_cmd(0x2);	// 4-bit interface
     aa8:	82 e0       	ldi	r24, 0x02	; 2
     aaa:	0e 94 27 05 	call	0xa4e	; 0xa4e <_ZN12OrangutanLCD13send_4bit_cmdEh>
     aae:	82 e0       	ldi	r24, 0x02	; 2
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	0e 94 b1 08 	call	0x1162	; 0x1162 <delay_ms>
	delay(2);
	send_cmd(0x28);	// 4-bit, 2 line, 5x8 dots char (busy flag is now valid)
     ab6:	88 e2       	ldi	r24, 0x28	; 40
     ab8:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <_ZN12OrangutanLCD8send_cmdEh>

#endif

	send_cmd(0x08);	// display off, cursor off, blinking off
     abc:	88 e0       	ldi	r24, 0x08	; 8
     abe:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <_ZN12OrangutanLCD8send_cmdEh>
	send_cmd(0x01);	// clear display
     ac2:	81 e0       	ldi	r24, 0x01	; 1
     ac4:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <_ZN12OrangutanLCD8send_cmdEh>
	send_cmd(0x06);	// set entry mode: cursor shifts right, no scrolling
     ac8:	86 e0       	ldi	r24, 0x06	; 6
     aca:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <_ZN12OrangutanLCD8send_cmdEh>
	send_cmd(0x0C);	// display on, cursor off, blinking off
     ace:	8c e0       	ldi	r24, 0x0C	; 12
     ad0:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <_ZN12OrangutanLCD8send_cmdEh>
}
     ad4:	08 95       	ret

00000ad6 <_ZN12OrangutanLCD4initEv>:
  
	static inline void init()
	{
		static unsigned char initialized = 0;

		if (!initialized)
     ad6:	80 91 59 01 	lds	r24, 0x0159
     ada:	88 23       	and	r24, r24
     adc:	29 f4       	brne	.+10     	; 0xae8 <_ZN12OrangutanLCD4initEv+0x12>
		{
			initialized = 1;
     ade:	81 e0       	ldi	r24, 0x01	; 1
     ae0:	80 93 59 01 	sts	0x0159, r24
			init2();
     ae4:	0e 94 2c 05 	call	0xa58	; 0xa58 <_ZN12OrangutanLCD5init2Ev>
     ae8:	08 95       	ret

00000aea <_ZN12OrangutanLCD5clearEv>:


// clears the LCD screen and returns the cursor to position (0, 0)
void OrangutanLCD::clear()
{
	send_cmd(LCD_CLEAR);
     aea:	81 e0       	ldi	r24, 0x01	; 1
     aec:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <_ZN12OrangutanLCD8send_cmdEh>

	if (printf_chars == 0)		// if we haven't used printf(), return now
     af0:	80 91 51 01 	lds	r24, 0x0151
     af4:	90 91 52 01 	lds	r25, 0x0152
     af8:	00 97       	sbiw	r24, 0x00	; 0
     afa:	11 f1       	breq	.+68     	; 0xb40 <_ZN12OrangutanLCD5clearEv+0x56>
     afc:	a0 e0       	ldi	r26, 0x00	; 0

	unsigned char i;

	// clear out the LCD
	for(i = 0; i < SAVED_CHARS; i++)
		printf_chars[i] = ' ';
     afe:	b0 e2       	ldi	r27, 0x20	; 32
     b00:	08 c0       	rjmp	.+16     	; 0xb12 <_ZN12OrangutanLCD5clearEv+0x28>
     b02:	e0 91 51 01 	lds	r30, 0x0151
     b06:	f0 91 52 01 	lds	r31, 0x0152
     b0a:	e2 0f       	add	r30, r18
     b0c:	f3 1f       	adc	r31, r19
     b0e:	b0 83       	st	Z, r27
		return;

	unsigned char i;

	// clear out the LCD
	for(i = 0; i < SAVED_CHARS; i++)
     b10:	af 5f       	subi	r26, 0xFF	; 255
     b12:	2a 2f       	mov	r18, r26
     b14:	30 e0       	ldi	r19, 0x00	; 0
     b16:	80 91 40 01 	lds	r24, 0x0140
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	01 97       	sbiw	r24, 0x01	; 1
     b1e:	60 91 41 01 	lds	r22, 0x0141
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	86 9f       	mul	r24, r22
     b26:	a0 01       	movw	r20, r0
     b28:	87 9f       	mul	r24, r23
     b2a:	50 0d       	add	r21, r0
     b2c:	96 9f       	mul	r25, r22
     b2e:	50 0d       	add	r21, r0
     b30:	11 24       	eor	r1, r1
     b32:	24 17       	cp	r18, r20
     b34:	35 07       	cpc	r19, r21
     b36:	2c f3       	brlt	.-54     	; 0xb02 <_ZN12OrangutanLCD5clearEv+0x18>
		printf_chars[i] = ' ';

	col = 0;
     b38:	10 92 54 01 	sts	0x0154, r1
	row = 0;
     b3c:	10 92 53 01 	sts	0x0153, r1
     b40:	08 95       	ret

00000b42 <clear>:
	OrangutanLCD::initPrintf(width, height);
}

extern "C" void clear()
{
	OrangutanLCD::clear();
     b42:	0e 94 75 05 	call	0xaea	; 0xaea <_ZN12OrangutanLCD5clearEv>
}
     b46:	08 95       	ret

00000b48 <_ZN12OrangutanLCD5printEc>:


// prints a single character at the current cursor location
void OrangutanLCD::print(char character)
{
	send_data(character);
     b48:	0e 94 f7 04 	call	0x9ee	; 0x9ee <_ZN12OrangutanLCD9send_dataEh>
}
     b4c:	08 95       	ret

00000b4e <_ZN12OrangutanLCD5printEPKc>:

// sends a string to the LCD.  The string is printed from 
// wherever the cursor is and will not span lines.  (This lets you 
// concatenate print statements.)
void OrangutanLCD::print(const char *str)
{
     b4e:	cf 93       	push	r28
     b50:	df 93       	push	r29
     b52:	c8 2f       	mov	r28, r24
     b54:	d9 2f       	mov	r29, r25
	while (*str != 0)
     b56:	02 c0       	rjmp	.+4      	; 0xb5c <_ZN12OrangutanLCD5printEPKc+0xe>
		send_data(*str++);
     b58:	0e 94 f7 04 	call	0x9ee	; 0x9ee <_ZN12OrangutanLCD9send_dataEh>
// sends a string to the LCD.  The string is printed from 
// wherever the cursor is and will not span lines.  (This lets you 
// concatenate print statements.)
void OrangutanLCD::print(const char *str)
{
	while (*str != 0)
     b5c:	89 91       	ld	r24, Y+
     b5e:	88 23       	and	r24, r24
     b60:	d9 f7       	brne	.-10     	; 0xb58 <_ZN12OrangutanLCD5printEPKc+0xa>
		send_data(*str++);
}
     b62:	df 91       	pop	r29
     b64:	cf 91       	pop	r28
     b66:	08 95       	ret

00000b68 <print>:
	OrangutanLCD::clear();
}

extern "C" void print(const char *str)
{
	OrangutanLCD::print(str);
     b68:	0e 94 a7 05 	call	0xb4e	; 0xb4e <_ZN12OrangutanLCD5printEPKc>
}
     b6c:	08 95       	ret

00000b6e <_ZN12OrangutanLCD21printFromProgramSpaceEPKc>:

// sends a string to the LCD.  The string is printed from 
// wherever the cursor is and will not span lines.  (This lets you 
// concatenate print statements.)
void OrangutanLCD::printFromProgramSpace(const char *str)
{
     b6e:	cf 93       	push	r28
     b70:	df 93       	push	r29
     b72:	ec 01       	movw	r28, r24
	char c;
	while ((c = pgm_read_byte(str)) != 0)
     b74:	03 c0       	rjmp	.+6      	; 0xb7c <_ZN12OrangutanLCD21printFromProgramSpaceEPKc+0xe>
	{
		send_data(c);
     b76:	0e 94 f7 04 	call	0x9ee	; 0x9ee <_ZN12OrangutanLCD9send_dataEh>
		str ++;
     b7a:	21 96       	adiw	r28, 0x01	; 1
// wherever the cursor is and will not span lines.  (This lets you 
// concatenate print statements.)
void OrangutanLCD::printFromProgramSpace(const char *str)
{
	char c;
	while ((c = pgm_read_byte(str)) != 0)
     b7c:	fe 01       	movw	r30, r28
     b7e:	84 91       	lpm	r24, Z+
     b80:	88 23       	and	r24, r24
     b82:	c9 f7       	brne	.-14     	; 0xb76 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc+0x8>
	{
		send_data(c);
		str ++;
	}
}
     b84:	df 91       	pop	r29
     b86:	cf 91       	pop	r28
     b88:	08 95       	ret

00000b8a <print_from_program_space>:
	OrangutanLCD::print(str);
}

extern "C" void print_from_program_space(const char *str)
{
	OrangutanLCD::printFromProgramSpace(str);
     b8a:	0e 94 b7 05 	call	0xb6e	; 0xb6e <_ZN12OrangutanLCD21printFromProgramSpaceEPKc>
}
     b8e:	08 95       	ret

00000b90 <_ZN12OrangutanLCD7printInEPKc>:

// other LCD libraries have this incorrectly named method, so it is here to
// provide some semblance of compatibility
void OrangutanLCD::printIn(const char *str)
{
	print(str);
     b90:	0e 94 a7 05 	call	0xb4e	; 0xb4e <_ZN12OrangutanLCD5printEPKc>
}
     b94:	08 95       	ret

00000b96 <_ZN12OrangutanLCD5printEm>:

// prints an unsigned long.  This prints from wherever the cursor is and will
// not span lines.  (This lets you concatenate print statements.)  This
// will only print as many characters as there are digits in the number.
void OrangutanLCD::print(unsigned long value)
{
     b96:	aa e0       	ldi	r26, 0x0A	; 10
     b98:	b0 e0       	ldi	r27, 0x00	; 0
     b9a:	e1 ed       	ldi	r30, 0xD1	; 209
     b9c:	f5 e0       	ldi	r31, 0x05	; 5
     b9e:	0c 94 c3 09 	jmp	0x1386	; 0x1386 <__prologue_saves__+0x10>
     ba2:	9b 01       	movw	r18, r22
     ba4:	ac 01       	movw	r20, r24
	unsigned char str[10];
	unsigned char i = 10;
     ba6:	1a e0       	ldi	r17, 0x0A	; 10
	unsigned char digit;

	do
	{
		digit = value;
		value /= 10;
     ba8:	ea e0       	ldi	r30, 0x0A	; 10
     baa:	ce 2e       	mov	r12, r30
     bac:	d1 2c       	mov	r13, r1
     bae:	e1 2c       	mov	r14, r1
     bb0:	f1 2c       	mov	r15, r1
		digit -= value * 10;
		str[--i] = '0' + (unsigned char)digit;
     bb2:	5e 01       	movw	r10, r28
     bb4:	08 94       	sec
     bb6:	a1 1c       	adc	r10, r1
     bb8:	b1 1c       	adc	r11, r1
    // print_long on the Orangutan SVP, but I don't know why.  -David
	unsigned char digit;

	do
	{
		digit = value;
     bba:	02 2f       	mov	r16, r18
		value /= 10;
     bbc:	ca 01       	movw	r24, r20
     bbe:	b9 01       	movw	r22, r18
     bc0:	a7 01       	movw	r20, r14
     bc2:	96 01       	movw	r18, r12
     bc4:	0e 94 7e 09 	call	0x12fc	; 0x12fc <__udivmodsi4>
		digit -= value * 10;
		str[--i] = '0' + (unsigned char)digit;
     bc8:	11 50       	subi	r17, 0x01	; 1
     bca:	f5 01       	movw	r30, r10
     bcc:	e1 0f       	add	r30, r17
     bce:	f1 1d       	adc	r31, r1

	do
	{
		digit = value;
		value /= 10;
		digit -= value * 10;
     bd0:	00 5d       	subi	r16, 0xD0	; 208
     bd2:	92 2f       	mov	r25, r18
     bd4:	99 0f       	add	r25, r25
     bd6:	89 2f       	mov	r24, r25
     bd8:	88 0f       	add	r24, r24
     bda:	88 0f       	add	r24, r24
     bdc:	89 0f       	add	r24, r25
		str[--i] = '0' + (unsigned char)digit;
     bde:	08 1b       	sub	r16, r24
     be0:	00 83       	st	Z, r16

    // Changed digit from a long to char 2009-11-20.  This fixed a bug with
    // print_long on the Orangutan SVP, but I don't know why.  -David
	unsigned char digit;

	do
     be2:	21 15       	cp	r18, r1
     be4:	31 05       	cpc	r19, r1
     be6:	41 05       	cpc	r20, r1
     be8:	51 05       	cpc	r21, r1
     bea:	39 f7       	brne	.-50     	; 0xbba <_ZN12OrangutanLCD5printEm+0x24>
     bec:	08 c0       	rjmp	.+16     	; 0xbfe <_ZN12OrangutanLCD5printEm+0x68>
		str[--i] = '0' + (unsigned char)digit;
	}
	while (value != 0);

	for(; i < 10; i++)
		send_data(str[i]);
     bee:	f6 01       	movw	r30, r12
     bf0:	e1 0f       	add	r30, r17
     bf2:	f1 1d       	adc	r31, r1
     bf4:	80 81       	ld	r24, Z
     bf6:	0e 94 f7 04 	call	0x9ee	; 0x9ee <_ZN12OrangutanLCD9send_dataEh>
		digit -= value * 10;
		str[--i] = '0' + (unsigned char)digit;
	}
	while (value != 0);

	for(; i < 10; i++)
     bfa:	1f 5f       	subi	r17, 0xFF	; 255
     bfc:	04 c0       	rjmp	.+8      	; 0xc06 <_ZN12OrangutanLCD5printEm+0x70>
		send_data(str[i]);
     bfe:	6e 01       	movw	r12, r28
     c00:	08 94       	sec
     c02:	c1 1c       	adc	r12, r1
     c04:	d1 1c       	adc	r13, r1
		digit -= value * 10;
		str[--i] = '0' + (unsigned char)digit;
	}
	while (value != 0);

	for(; i < 10; i++)
     c06:	1a 30       	cpi	r17, 0x0A	; 10
     c08:	90 f3       	brcs	.-28     	; 0xbee <_ZN12OrangutanLCD5printEm+0x58>
		send_data(str[i]);
}
     c0a:	2a 96       	adiw	r28, 0x0a	; 10
     c0c:	ea e0       	ldi	r30, 0x0A	; 10
     c0e:	0c 94 df 09 	jmp	0x13be	; 0x13be <__epilogue_restores__+0x10>

00000c12 <_ZN12OrangutanLCD5printEl>:
// prints a signed long.  This prints from wherever the cursor is and will not
// span lines.  (This lets you concatenate print statements.)  This function
// will only print as many characters as there are digits in the number (plus
// a minus sign if the number is negative).
void OrangutanLCD::print(long value)
{
     c12:	ef 92       	push	r14
     c14:	ff 92       	push	r15
     c16:	0f 93       	push	r16
     c18:	1f 93       	push	r17
     c1a:	7b 01       	movw	r14, r22
     c1c:	8c 01       	movw	r16, r24
	if (value < 0)
     c1e:	97 ff       	sbrs	r25, 7
     c20:	0b c0       	rjmp	.+22     	; 0xc38 <_ZN12OrangutanLCD5printEl+0x26>
	{
		value = -value;
     c22:	10 95       	com	r17
     c24:	00 95       	com	r16
     c26:	f0 94       	com	r15
     c28:	e0 94       	com	r14
     c2a:	e1 1c       	adc	r14, r1
     c2c:	f1 1c       	adc	r15, r1
     c2e:	01 1d       	adc	r16, r1
     c30:	11 1d       	adc	r17, r1
		send_data('-');		// print the minus sign
     c32:	8d e2       	ldi	r24, 0x2D	; 45
     c34:	0e 94 f7 04 	call	0x9ee	; 0x9ee <_ZN12OrangutanLCD9send_dataEh>
	}
	print((unsigned long)value);
     c38:	c8 01       	movw	r24, r16
     c3a:	b7 01       	movw	r22, r14
     c3c:	0e 94 cb 05 	call	0xb96	; 0xb96 <_ZN12OrangutanLCD5printEm>
}
     c40:	1f 91       	pop	r17
     c42:	0f 91       	pop	r16
     c44:	ff 90       	pop	r15
     c46:	ef 90       	pop	r14
     c48:	08 95       	ret

00000c4a <print_long>:
	OrangutanLCD::print(c);
}

extern "C" void print_long(long value)
{
	OrangutanLCD::print(value);
     c4a:	0e 94 09 06 	call	0xc12	; 0xc12 <_ZN12OrangutanLCD5printEl>
}
     c4e:	08 95       	ret

00000c50 <print_unsigned_long>:

extern "C" void print_unsigned_long(unsigned long value)
{
	OrangutanLCD::print(value);
     c50:	0e 94 cb 05 	call	0xb96	; 0xb96 <_ZN12OrangutanLCD5printEm>
}
     c54:	08 95       	ret

00000c56 <_ZN12OrangutanLCD14printHexNibbleEh>:


// display a hex nibble (half of a hex byte) at your current cursor location
void OrangutanLCD::printHexNibble(unsigned char nibble)
{
	if (nibble < 10)
     c56:	8a 30       	cpi	r24, 0x0A	; 10
     c58:	10 f4       	brcc	.+4      	; 0xc5e <_ZN12OrangutanLCD14printHexNibbleEh+0x8>
		send_data('0' + nibble);
     c5a:	80 5d       	subi	r24, 0xD0	; 208
     c5c:	01 c0       	rjmp	.+2      	; 0xc60 <_ZN12OrangutanLCD14printHexNibbleEh+0xa>
	else
		send_data('A' + (nibble - 10));
     c5e:	89 5c       	subi	r24, 0xC9	; 201
     c60:	0e 94 f7 04 	call	0x9ee	; 0x9ee <_ZN12OrangutanLCD9send_dataEh>
     c64:	08 95       	ret

00000c66 <_ZN12OrangutanLCD8printHexEh>:
	printHex((unsigned char)word);
}

// display a single-byte value in hex (00 - FF) at the current cursor location
void OrangutanLCD::printHex(unsigned char byte)
{
     c66:	cf 93       	push	r28
     c68:	c8 2f       	mov	r28, r24
	printHexNibble(byte >> 4);	 // display high byte high nibble
     c6a:	82 95       	swap	r24
     c6c:	8f 70       	andi	r24, 0x0F	; 15
     c6e:	0e 94 2b 06 	call	0xc56	; 0xc56 <_ZN12OrangutanLCD14printHexNibbleEh>
	printHexNibble(byte & 0x0F); // display high byte low nibble
     c72:	8c 2f       	mov	r24, r28
     c74:	8f 70       	andi	r24, 0x0F	; 15
     c76:	0e 94 2b 06 	call	0xc56	; 0xc56 <_ZN12OrangutanLCD14printHexNibbleEh>
}
     c7a:	cf 91       	pop	r28
     c7c:	08 95       	ret

00000c7e <_ZN12OrangutanLCD8printHexEj>:
		send_data('A' + (nibble - 10));
}

// display a two-byte value in hex (0000 - FFFF) at the current cursor location
void OrangutanLCD::printHex(unsigned int word)
{
     c7e:	cf 93       	push	r28
     c80:	c8 2f       	mov	r28, r24
	printHex((unsigned char)(word >> 8));
     c82:	89 2f       	mov	r24, r25
     c84:	0e 94 33 06 	call	0xc66	; 0xc66 <_ZN12OrangutanLCD8printHexEh>
	printHex((unsigned char)word);
     c88:	8c 2f       	mov	r24, r28
     c8a:	0e 94 33 06 	call	0xc66	; 0xc66 <_ZN12OrangutanLCD8printHexEh>
}
     c8e:	cf 91       	pop	r28
     c90:	08 95       	ret

00000c92 <print_hex>:
	OrangutanLCD::print(value);
}

extern "C" void print_hex(unsigned int value)
{
	OrangutanLCD::printHex(value);
     c92:	0e 94 3f 06 	call	0xc7e	; 0xc7e <_ZN12OrangutanLCD8printHexEj>
}
     c96:	08 95       	ret

00000c98 <print_hex_byte>:

extern "C" void print_hex_byte(unsigned char value)
{
	OrangutanLCD::printHex(value);
     c98:	0e 94 33 06 	call	0xc66	; 0xc66 <_ZN12OrangutanLCD8printHexEh>
}
     c9c:	08 95       	ret

00000c9e <_ZN12OrangutanLCD11printBinaryEh>:
}


// display a byte in binary starting at your current cursor location
void OrangutanLCD::printBinary(unsigned char byte)
{
     c9e:	1f 93       	push	r17
     ca0:	cf 93       	push	r28
     ca2:	df 93       	push	r29
     ca4:	18 2f       	mov	r17, r24
     ca6:	d8 e0       	ldi	r29, 0x08	; 8
	unsigned char i, bitmask;

	bitmask = 1 << 7;
     ca8:	c0 e8       	ldi	r28, 0x80	; 128
	for (i = 0; i < 8; i++)
	{
		if (byte & bitmask)
     caa:	8c 2f       	mov	r24, r28
     cac:	81 23       	and	r24, r17
     cae:	11 f0       	breq	.+4      	; 0xcb4 <_ZN12OrangutanLCD11printBinaryEh+0x16>
			send_data('1');
     cb0:	81 e3       	ldi	r24, 0x31	; 49
     cb2:	01 c0       	rjmp	.+2      	; 0xcb6 <_ZN12OrangutanLCD11printBinaryEh+0x18>
		else
			send_data('0');
     cb4:	80 e3       	ldi	r24, 0x30	; 48
     cb6:	0e 94 f7 04 	call	0x9ee	; 0x9ee <_ZN12OrangutanLCD9send_dataEh>
     cba:	d1 50       	subi	r29, 0x01	; 1
void OrangutanLCD::printBinary(unsigned char byte)
{
	unsigned char i, bitmask;

	bitmask = 1 << 7;
	for (i = 0; i < 8; i++)
     cbc:	11 f0       	breq	.+4      	; 0xcc2 <_ZN12OrangutanLCD11printBinaryEh+0x24>
	{
		if (byte & bitmask)
			send_data('1');
		else
			send_data('0');
		bitmask >>= 1;
     cbe:	c6 95       	lsr	r28
     cc0:	f4 cf       	rjmp	.-24     	; 0xcaa <_ZN12OrangutanLCD11printBinaryEh+0xc>
	}
}
     cc2:	df 91       	pop	r29
     cc4:	cf 91       	pop	r28
     cc6:	1f 91       	pop	r17
     cc8:	08 95       	ret

00000cca <print_binary>:
	OrangutanLCD::printHex(value);
}

extern "C" void print_binary(unsigned char value)
{
	OrangutanLCD::printBinary(value);
     cca:	0e 94 4f 06 	call	0xc9e	; 0xc9e <_ZN12OrangutanLCD11printBinaryEh>
}
     cce:	08 95       	ret

00000cd0 <_ZN12OrangutanLCD6gotoXYEhh>:

// moves the cursor to the specified (x, y) position
// x is a zero-based column indicator (0 <= x <= 7)
// y is a zero-based row indicator (0 <= y <= LCD rows-1)
void OrangutanLCD::gotoXY(unsigned char x, unsigned char y)
{
     cd0:	a5 e0       	ldi	r26, 0x05	; 5
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	ee e6       	ldi	r30, 0x6E	; 110
     cd6:	f6 e0       	ldi	r31, 0x06	; 6
     cd8:	0c 94 ca 09 	jmp	0x1394	; 0x1394 <__prologue_saves__+0x1e>
     cdc:	18 2f       	mov	r17, r24
	// The actual memory locations are 0x00, and 0x40, but since
	// D7 needs to be high in order to set a new memory location, we can go
	// ahead and make the seventh bit of our memory location bytes to 1,
	// which makes the numbers 0x80 and 0xC0:

	unsigned char line_mem[] = {0x80, 0xC0, 0x94, 0xD4};
     cde:	80 e8       	ldi	r24, 0x80	; 128
     ce0:	89 83       	std	Y+1, r24	; 0x01
     ce2:	80 ec       	ldi	r24, 0xC0	; 192
     ce4:	8a 83       	std	Y+2, r24	; 0x02
     ce6:	84 e9       	ldi	r24, 0x94	; 148
     ce8:	8b 83       	std	Y+3, r24	; 0x03
     cea:	84 ed       	ldi	r24, 0xD4	; 212
     cec:	8c 83       	std	Y+4, r24	; 0x04

	// Grab the location in the LCD's memory of the start of line y,
	// and add X to it to get the right character location.
	send_cmd(line_mem[y] + x);
     cee:	fe 01       	movw	r30, r28
     cf0:	e6 0f       	add	r30, r22
     cf2:	f1 1d       	adc	r31, r1
     cf4:	81 81       	ldd	r24, Z+1	; 0x01
     cf6:	81 0f       	add	r24, r17
     cf8:	6d 83       	std	Y+5, r22	; 0x05
     cfa:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <_ZN12OrangutanLCD8send_cmdEh>

	// Save it for use with printf.
	col = x;
     cfe:	10 93 54 01 	sts	0x0154, r17
	row = y;
     d02:	6d 81       	ldd	r22, Y+5	; 0x05
     d04:	60 93 53 01 	sts	0x0153, r22
}
     d08:	25 96       	adiw	r28, 0x05	; 5
     d0a:	e3 e0       	ldi	r30, 0x03	; 3
     d0c:	0c 94 e6 09 	jmp	0x13cc	; 0x13cc <__epilogue_restores__+0x1e>

00000d10 <lcd_goto_xy>:
	return 0;
}

extern "C" void lcd_goto_xy(unsigned char col, unsigned char row)
{
	OrangutanLCD::gotoXY(col,row);
     d10:	0e 94 68 06 	call	0xcd0	; 0xcd0 <_ZN12OrangutanLCD6gotoXYEhh>
}
     d14:	08 95       	ret

00000d16 <lcd_putchar>:
unsigned char numLCDCols = LCD_WIDTH;
#define SAVED_CHARS		(numLCDCols*(numLCDRows-1))

// This function is called by printf.
extern "C" int lcd_putchar(char c, FILE *f)
{
     d16:	a0 e0       	ldi	r26, 0x00	; 0
     d18:	b0 e0       	ldi	r27, 0x00	; 0
     d1a:	e1 e9       	ldi	r30, 0x91	; 145
     d1c:	f6 e0       	ldi	r31, 0x06	; 6
     d1e:	0c 94 c5 09 	jmp	0x138a	; 0x138a <__prologue_saves__+0x14>
     d22:	d8 2e       	mov	r13, r24
	unsigned char nextline=0; /* should we go to next line after output? */
	unsigned char repos=0; /* should we relocate */
	unsigned char i;

	if (printf_chars == 0)
     d24:	80 91 51 01 	lds	r24, 0x0151
     d28:	90 91 52 01 	lds	r25, 0x0152
     d2c:	00 97       	sbiw	r24, 0x00	; 0
     d2e:	09 f4       	brne	.+2      	; 0xd32 <lcd_putchar+0x1c>
     d30:	fa c0       	rjmp	.+500    	; 0xf26 <lcd_putchar+0x210>
	{
		return c;
	}

	/* control characters */
	if (c == '\n')
     d32:	8d 2d       	mov	r24, r13
     d34:	8a 30       	cpi	r24, 0x0A	; 10
     d36:	09 f4       	brne	.+2      	; 0xd3a <lcd_putchar+0x24>
     d38:	43 c0       	rjmp	.+134    	; 0xdc0 <lcd_putchar+0xaa>
	{
		nextline = 1;
	}
	else if (c == 8) { // ^H
     d3a:	88 30       	cpi	r24, 0x08	; 8
     d3c:	c9 f4       	brne	.+50     	; 0xd70 <lcd_putchar+0x5a>
		col--;
     d3e:	80 91 54 01 	lds	r24, 0x0154
     d42:	81 50       	subi	r24, 0x01	; 1
     d44:	80 93 54 01 	sts	0x0154, r24
		if (col == (unsigned char)-1) { row--; col = numLCDCols-1; }
     d48:	8f 3f       	cpi	r24, 0xFF	; 255
     d4a:	51 f4       	brne	.+20     	; 0xd60 <lcd_putchar+0x4a>
     d4c:	80 91 53 01 	lds	r24, 0x0153
     d50:	81 50       	subi	r24, 0x01	; 1
     d52:	80 93 53 01 	sts	0x0153, r24
     d56:	80 91 41 01 	lds	r24, 0x0141
     d5a:	81 50       	subi	r24, 0x01	; 1
     d5c:	80 93 54 01 	sts	0x0154, r24
		if (row == (unsigned char)-1) { row = 0; col = 0; }
     d60:	80 91 53 01 	lds	r24, 0x0153
     d64:	8f 3f       	cpi	r24, 0xFF	; 255
     d66:	09 f0       	breq	.+2      	; 0xd6a <lcd_putchar+0x54>
     d68:	d8 c0       	rjmp	.+432    	; 0xf1a <lcd_putchar+0x204>
     d6a:	10 92 53 01 	sts	0x0153, r1
     d6e:	d3 c0       	rjmp	.+422    	; 0xf16 <lcd_putchar+0x200>


// prints a single character at the current cursor location
void OrangutanLCD::print(char character)
{
	send_data(character);
     d70:	8d 2d       	mov	r24, r13
     d72:	0e 94 f7 04 	call	0x9ee	; 0x9ee <_ZN12OrangutanLCD9send_dataEh>
		repos = 1;
	}
	else
	{
		OrangutanLCD::print(c); /* write the character */
		if (row != 0) printf_chars[(row-1)*numLCDCols + col]=c; /* remember the character */
     d76:	80 91 53 01 	lds	r24, 0x0153
     d7a:	88 23       	and	r24, r24
     d7c:	b9 f0       	breq	.+46     	; 0xdac <lcd_putchar+0x96>
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	01 97       	sbiw	r24, 0x01	; 1
     d82:	40 91 41 01 	lds	r20, 0x0141
     d86:	50 e0       	ldi	r21, 0x00	; 0
     d88:	84 9f       	mul	r24, r20
     d8a:	90 01       	movw	r18, r0
     d8c:	85 9f       	mul	r24, r21
     d8e:	30 0d       	add	r19, r0
     d90:	94 9f       	mul	r25, r20
     d92:	30 0d       	add	r19, r0
     d94:	11 24       	eor	r1, r1
     d96:	80 91 54 01 	lds	r24, 0x0154
     d9a:	e0 91 51 01 	lds	r30, 0x0151
     d9e:	f0 91 52 01 	lds	r31, 0x0152
     da2:	e2 0f       	add	r30, r18
     da4:	f3 1f       	adc	r31, r19
     da6:	e8 0f       	add	r30, r24
     da8:	f1 1d       	adc	r31, r1
     daa:	d0 82       	st	Z, r13
		col++;
     dac:	80 91 54 01 	lds	r24, 0x0154
     db0:	8f 5f       	subi	r24, 0xFF	; 255
     db2:	80 93 54 01 	sts	0x0154, r24

		if (col == numLCDCols) nextline = 1;
     db6:	90 91 41 01 	lds	r25, 0x0141
     dba:	89 17       	cp	r24, r25
     dbc:	09 f0       	breq	.+2      	; 0xdc0 <lcd_putchar+0xaa>
     dbe:	b3 c0       	rjmp	.+358    	; 0xf26 <lcd_putchar+0x210>
	}

	if (nextline)
	{
		if (row == numLCDRows - 1)
     dc0:	40 91 53 01 	lds	r20, 0x0153
     dc4:	24 2f       	mov	r18, r20
     dc6:	30 e0       	ldi	r19, 0x00	; 0
     dc8:	80 91 40 01 	lds	r24, 0x0140
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	01 97       	sbiw	r24, 0x01	; 1
     dd0:	28 17       	cp	r18, r24
     dd2:	39 07       	cpc	r19, r25
     dd4:	09 f0       	breq	.+2      	; 0xdd8 <lcd_putchar+0xc2>
     dd6:	9c c0       	rjmp	.+312    	; 0xf10 <lcd_putchar+0x1fa>
     dd8:	c0 e0       	ldi	r28, 0x00	; 0
     dda:	d0 e0       	ldi	r29, 0x00	; 0
     ddc:	41 c0       	rjmp	.+130    	; 0xe60 <lcd_putchar+0x14a>
            // it is never possible for the user to use the lower
            // right corner of his LCD.
			char j;
			for (j = 0; j < numLCDRows-2; j++)  	// draw top LCD_HEIGHT-2 rows
			{
				OrangutanLCD::gotoXY(0, j);
     dde:	80 e0       	ldi	r24, 0x00	; 0
     de0:	6c 2f       	mov	r22, r28
     de2:	0e 94 68 06 	call	0xcd0	; 0xcd0 <_ZN12OrangutanLCD6gotoXYEhh>
				for (i = 0; i < numLCDCols; i++)
     de6:	cc 24       	eor	r12, r12
     de8:	8e 01       	movw	r16, r28
     dea:	0f 5f       	subi	r16, 0xFF	; 255
     dec:	1f 4f       	sbci	r17, 0xFF	; 255
     dee:	33 c0       	rjmp	.+102    	; 0xe56 <lcd_putchar+0x140>
				{
					OrangutanLCD::print(printf_chars[j*numLCDCols + i]);
     df0:	ec 2c       	mov	r14, r12
     df2:	ff 24       	eor	r15, r15
     df4:	30 e0       	ldi	r19, 0x00	; 0
     df6:	c2 9f       	mul	r28, r18
     df8:	c0 01       	movw	r24, r0
     dfa:	c3 9f       	mul	r28, r19
     dfc:	90 0d       	add	r25, r0
     dfe:	d2 9f       	mul	r29, r18
     e00:	90 0d       	add	r25, r0
     e02:	11 24       	eor	r1, r1
     e04:	e0 91 51 01 	lds	r30, 0x0151
     e08:	f0 91 52 01 	lds	r31, 0x0152
     e0c:	ee 0d       	add	r30, r14
     e0e:	ff 1d       	adc	r31, r15
     e10:	e8 0f       	add	r30, r24
     e12:	f9 1f       	adc	r31, r25


// prints a single character at the current cursor location
void OrangutanLCD::print(char character)
{
	send_data(character);
     e14:	80 81       	ld	r24, Z
     e16:	0e 94 f7 04 	call	0x9ee	; 0x9ee <_ZN12OrangutanLCD9send_dataEh>
			{
				OrangutanLCD::gotoXY(0, j);
				for (i = 0; i < numLCDCols; i++)
				{
					OrangutanLCD::print(printf_chars[j*numLCDCols + i]);
					printf_chars[j*numLCDCols + i] = printf_chars[(j+1)*numLCDCols + i];
     e1a:	80 91 51 01 	lds	r24, 0x0151
     e1e:	90 91 52 01 	lds	r25, 0x0152
     e22:	20 91 41 01 	lds	r18, 0x0141
     e26:	30 e0       	ldi	r19, 0x00	; 0
     e28:	c2 9f       	mul	r28, r18
     e2a:	f0 01       	movw	r30, r0
     e2c:	c3 9f       	mul	r28, r19
     e2e:	f0 0d       	add	r31, r0
     e30:	d2 9f       	mul	r29, r18
     e32:	f0 0d       	add	r31, r0
     e34:	11 24       	eor	r1, r1
     e36:	8e 0d       	add	r24, r14
     e38:	9f 1d       	adc	r25, r15
     e3a:	e8 0f       	add	r30, r24
     e3c:	f9 1f       	adc	r31, r25
     e3e:	02 9f       	mul	r16, r18
     e40:	d0 01       	movw	r26, r0
     e42:	03 9f       	mul	r16, r19
     e44:	b0 0d       	add	r27, r0
     e46:	12 9f       	mul	r17, r18
     e48:	b0 0d       	add	r27, r0
     e4a:	11 24       	eor	r1, r1
     e4c:	a8 0f       	add	r26, r24
     e4e:	b9 1f       	adc	r27, r25
     e50:	8c 91       	ld	r24, X
     e52:	80 83       	st	Z, r24
            // right corner of his LCD.
			char j;
			for (j = 0; j < numLCDRows-2; j++)  	// draw top LCD_HEIGHT-2 rows
			{
				OrangutanLCD::gotoXY(0, j);
				for (i = 0; i < numLCDCols; i++)
     e54:	c3 94       	inc	r12
     e56:	20 91 41 01 	lds	r18, 0x0141
     e5a:	c2 16       	cp	r12, r18
     e5c:	48 f2       	brcs	.-110    	; 0xdf0 <lcd_putchar+0xda>
     e5e:	e8 01       	movw	r28, r16
			/******* scroll! *******/
            // Note: because of the way we implement scrolling,
            // it is never possible for the user to use the lower
            // right corner of his LCD.
			char j;
			for (j = 0; j < numLCDRows-2; j++)  	// draw top LCD_HEIGHT-2 rows
     e60:	60 91 40 01 	lds	r22, 0x0140
     e64:	86 2f       	mov	r24, r22
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	02 97       	sbiw	r24, 0x02	; 2
     e6a:	c8 17       	cp	r28, r24
     e6c:	d9 07       	cpc	r29, r25
     e6e:	0c f4       	brge	.+2      	; 0xe72 <lcd_putchar+0x15c>
     e70:	b6 cf       	rjmp	.-148    	; 0xdde <lcd_putchar+0xc8>
				{
					OrangutanLCD::print(printf_chars[j*numLCDCols + i]);
					printf_chars[j*numLCDCols + i] = printf_chars[(j+1)*numLCDCols + i];
				}
			}
			if (numLCDRows >= 2)
     e72:	62 30       	cpi	r22, 0x02	; 2
     e74:	e0 f1       	brcs	.+120    	; 0xeee <lcd_putchar+0x1d8>
			{
				OrangutanLCD::gotoXY(0, numLCDRows-2);	// draw row above bottom row
     e76:	62 50       	subi	r22, 0x02	; 2
     e78:	80 e0       	ldi	r24, 0x00	; 0
     e7a:	0e 94 68 06 	call	0xcd0	; 0xcd0 <_ZN12OrangutanLCD6gotoXYEhh>
				for (i = 0; i < numLCDCols; i++)
     e7e:	00 e0       	ldi	r16, 0x00	; 0
				{
					OrangutanLCD::print(printf_chars[(numLCDRows-2)*numLCDCols + i]);
					printf_chars[(numLCDRows-2)*numLCDCols + i] = ' ';	// clear saved bottom row
     e80:	10 e2       	ldi	r17, 0x20	; 32
				}
			}
			if (numLCDRows >= 2)
			{
				OrangutanLCD::gotoXY(0, numLCDRows-2);	// draw row above bottom row
				for (i = 0; i < numLCDCols; i++)
     e82:	31 c0       	rjmp	.+98     	; 0xee6 <lcd_putchar+0x1d0>
				{
					OrangutanLCD::print(printf_chars[(numLCDRows-2)*numLCDCols + i]);
     e84:	c0 2f       	mov	r28, r16
     e86:	d0 e0       	ldi	r29, 0x00	; 0
     e88:	80 91 40 01 	lds	r24, 0x0140
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	02 97       	sbiw	r24, 0x02	; 2
     e90:	50 e0       	ldi	r21, 0x00	; 0
     e92:	84 9f       	mul	r24, r20
     e94:	90 01       	movw	r18, r0
     e96:	85 9f       	mul	r24, r21
     e98:	30 0d       	add	r19, r0
     e9a:	94 9f       	mul	r25, r20
     e9c:	30 0d       	add	r19, r0
     e9e:	11 24       	eor	r1, r1
     ea0:	e0 91 51 01 	lds	r30, 0x0151
     ea4:	f0 91 52 01 	lds	r31, 0x0152
     ea8:	ec 0f       	add	r30, r28
     eaa:	fd 1f       	adc	r31, r29
     eac:	e2 0f       	add	r30, r18
     eae:	f3 1f       	adc	r31, r19


// prints a single character at the current cursor location
void OrangutanLCD::print(char character)
{
	send_data(character);
     eb0:	80 81       	ld	r24, Z
     eb2:	0e 94 f7 04 	call	0x9ee	; 0x9ee <_ZN12OrangutanLCD9send_dataEh>
			{
				OrangutanLCD::gotoXY(0, numLCDRows-2);	// draw row above bottom row
				for (i = 0; i < numLCDCols; i++)
				{
					OrangutanLCD::print(printf_chars[(numLCDRows-2)*numLCDCols + i]);
					printf_chars[(numLCDRows-2)*numLCDCols + i] = ' ';	// clear saved bottom row
     eb6:	80 91 40 01 	lds	r24, 0x0140
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	02 97       	sbiw	r24, 0x02	; 2
     ebe:	40 91 41 01 	lds	r20, 0x0141
     ec2:	50 e0       	ldi	r21, 0x00	; 0
     ec4:	84 9f       	mul	r24, r20
     ec6:	90 01       	movw	r18, r0
     ec8:	85 9f       	mul	r24, r21
     eca:	30 0d       	add	r19, r0
     ecc:	94 9f       	mul	r25, r20
     ece:	30 0d       	add	r19, r0
     ed0:	11 24       	eor	r1, r1
     ed2:	e0 91 51 01 	lds	r30, 0x0151
     ed6:	f0 91 52 01 	lds	r31, 0x0152
     eda:	ec 0f       	add	r30, r28
     edc:	fd 1f       	adc	r31, r29
     ede:	e2 0f       	add	r30, r18
     ee0:	f3 1f       	adc	r31, r19
     ee2:	10 83       	st	Z, r17
				}
			}
			if (numLCDRows >= 2)
			{
				OrangutanLCD::gotoXY(0, numLCDRows-2);	// draw row above bottom row
				for (i = 0; i < numLCDCols; i++)
     ee4:	0f 5f       	subi	r16, 0xFF	; 255
     ee6:	40 91 41 01 	lds	r20, 0x0141
     eea:	04 17       	cp	r16, r20
     eec:	58 f2       	brcs	.-106    	; 0xe84 <lcd_putchar+0x16e>
				{
					OrangutanLCD::print(printf_chars[(numLCDRows-2)*numLCDCols + i]);
					printf_chars[(numLCDRows-2)*numLCDCols + i] = ' ';	// clear saved bottom row
				}
			}
			OrangutanLCD::gotoXY(0, numLCDRows-1);		// erase bottom row
     eee:	60 91 40 01 	lds	r22, 0x0140
     ef2:	61 50       	subi	r22, 0x01	; 1
     ef4:	80 e0       	ldi	r24, 0x00	; 0
     ef6:	0e 94 68 06 	call	0xcd0	; 0xcd0 <_ZN12OrangutanLCD6gotoXYEhh>
			for (i = 0; i < numLCDCols; i++)
     efa:	c0 e0       	ldi	r28, 0x00	; 0
     efc:	04 c0       	rjmp	.+8      	; 0xf06 <lcd_putchar+0x1f0>


// prints a single character at the current cursor location
void OrangutanLCD::print(char character)
{
	send_data(character);
     efe:	80 e2       	ldi	r24, 0x20	; 32
     f00:	0e 94 f7 04 	call	0x9ee	; 0x9ee <_ZN12OrangutanLCD9send_dataEh>
					OrangutanLCD::print(printf_chars[(numLCDRows-2)*numLCDCols + i]);
					printf_chars[(numLCDRows-2)*numLCDCols + i] = ' ';	// clear saved bottom row
				}
			}
			OrangutanLCD::gotoXY(0, numLCDRows-1);		// erase bottom row
			for (i = 0; i < numLCDCols; i++)
     f04:	cf 5f       	subi	r28, 0xFF	; 255
     f06:	80 91 41 01 	lds	r24, 0x0141
     f0a:	c8 17       	cp	r28, r24
     f0c:	c0 f3       	brcs	.-16     	; 0xefe <lcd_putchar+0x1e8>
     f0e:	03 c0       	rjmp	.+6      	; 0xf16 <lcd_putchar+0x200>
			{
				OrangutanLCD::print(' ');
			}
		}
		else
			row++;
     f10:	4f 5f       	subi	r20, 0xFF	; 255
     f12:	40 93 53 01 	sts	0x0153, r20
		col = 0;
     f16:	10 92 54 01 	sts	0x0154, r1
		repos = 1;
	}

	if (repos)
	{
		OrangutanLCD::gotoXY(col, row);
     f1a:	80 91 54 01 	lds	r24, 0x0154
     f1e:	60 91 53 01 	lds	r22, 0x0153
     f22:	0e 94 68 06 	call	0xcd0	; 0xcd0 <_ZN12OrangutanLCD6gotoXYEhh>
	}

	return c;
     f26:	2d 2d       	mov	r18, r13
     f28:	33 27       	eor	r19, r19
     f2a:	27 fd       	sbrc	r18, 7
     f2c:	30 95       	com	r19
}
     f2e:	c9 01       	movw	r24, r18
     f30:	cd b7       	in	r28, 0x3d	; 61
     f32:	de b7       	in	r29, 0x3e	; 62
     f34:	e8 e0       	ldi	r30, 0x08	; 8
     f36:	0c 94 e1 09 	jmp	0x13c2	; 0x13c2 <__epilogue_restores__+0x14>

00000f3a <_ZN12OrangutanLCD10showCursorEh>:

// Shows the cursor as either a BLINKING or SOLID block
// cursorType should be either CURSOR_BLINKING or CURSOR_SOLID
void OrangutanLCD::showCursor(unsigned char cursorType)
{
	if (cursorType == CURSOR_BLINKING)
     f3a:	81 30       	cpi	r24, 0x01	; 1
     f3c:	11 f4       	brne	.+4      	; 0xf42 <_ZN12OrangutanLCD10showCursorEh+0x8>
		send_cmd(LCD_SHOW_BLINK);
     f3e:	8f e0       	ldi	r24, 0x0F	; 15
     f40:	01 c0       	rjmp	.+2      	; 0xf44 <_ZN12OrangutanLCD10showCursorEh+0xa>
	else
		send_cmd(LCD_SHOW_SOLID);
     f42:	8e e0       	ldi	r24, 0x0E	; 14
     f44:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <_ZN12OrangutanLCD8send_cmdEh>
     f48:	08 95       	ret

00000f4a <lcd_show_cursor>:
	OrangutanLCD::printBinary(value);
}

extern "C" void lcd_show_cursor(unsigned char cursorType)
{
	OrangutanLCD::showCursor(cursorType);
     f4a:	0e 94 9d 07 	call	0xf3a	; 0xf3a <_ZN12OrangutanLCD10showCursorEh>
}
     f4e:	08 95       	ret

00000f50 <_ZN12OrangutanLCD10hideCursorEv>:


// Hides the cursor
void OrangutanLCD::hideCursor()
{
	send_cmd(LCD_HIDE);
     f50:	8c e0       	ldi	r24, 0x0C	; 12
     f52:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <_ZN12OrangutanLCD8send_cmdEh>
}
     f56:	08 95       	ret

00000f58 <lcd_hide_cursor>:
	OrangutanLCD::showCursor(cursorType);
}

extern "C" void lcd_hide_cursor()
{
	OrangutanLCD::hideCursor();
     f58:	0e 94 a8 07 	call	0xf50	; 0xf50 <_ZN12OrangutanLCD10hideCursorEv>
}
     f5c:	08 95       	ret

00000f5e <_ZN12OrangutanLCD10moveCursorEhh>:

// shifts the cursor LEFT or RIGHT the given number of positions.
// direction should be either LCD_LEFT or LCD_RIGHT
void OrangutanLCD::moveCursor(unsigned char direction, 
							   unsigned char num)
{
     f5e:	cf 93       	push	r28
     f60:	df 93       	push	r29
     f62:	c8 2f       	mov	r28, r24
     f64:	d6 2f       	mov	r29, r22
	while(num-- > 0)
     f66:	08 c0       	rjmp	.+16     	; 0xf78 <_ZN12OrangutanLCD10moveCursorEhh+0x1a>
	{
		if (direction == LCD_LEFT)
     f68:	cc 23       	and	r28, r28
     f6a:	11 f4       	brne	.+4      	; 0xf70 <_ZN12OrangutanLCD10moveCursorEhh+0x12>
			send_cmd(LCD_CURSOR_L);
     f6c:	80 e1       	ldi	r24, 0x10	; 16
     f6e:	01 c0       	rjmp	.+2      	; 0xf72 <_ZN12OrangutanLCD10moveCursorEhh+0x14>
		else
			send_cmd(LCD_CURSOR_R);
     f70:	84 e1       	ldi	r24, 0x14	; 20
     f72:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <_ZN12OrangutanLCD8send_cmdEh>
     f76:	d1 50       	subi	r29, 0x01	; 1
// shifts the cursor LEFT or RIGHT the given number of positions.
// direction should be either LCD_LEFT or LCD_RIGHT
void OrangutanLCD::moveCursor(unsigned char direction, 
							   unsigned char num)
{
	while(num-- > 0)
     f78:	dd 23       	and	r29, r29
     f7a:	b1 f7       	brne	.-20     	; 0xf68 <_ZN12OrangutanLCD10moveCursorEhh+0xa>
		if (direction == LCD_LEFT)
			send_cmd(LCD_CURSOR_L);
		else
			send_cmd(LCD_CURSOR_R);
	}
}
     f7c:	df 91       	pop	r29
     f7e:	cf 91       	pop	r28
     f80:	08 95       	ret

00000f82 <lcd_move_cursor>:
	OrangutanLCD::hideCursor();
}

extern "C" void lcd_move_cursor(unsigned char direction, unsigned char num)
{
	OrangutanLCD::moveCursor(direction, num);
     f82:	0e 94 af 07 	call	0xf5e	; 0xf5e <_ZN12OrangutanLCD10moveCursorEhh>
}
     f86:	08 95       	ret

00000f88 <_ZN12OrangutanLCD6scrollEhhj>:
// positions, delaying for delay_time milliseconds between each shift.
// This is what you'd use for a scrolling display.
// direction should be either LCD_LEFT or LCD_RIGHT
void OrangutanLCD::scroll(unsigned char direction, unsigned char num, 
						   unsigned int delay_time)
{
     f88:	0f 93       	push	r16
     f8a:	1f 93       	push	r17
     f8c:	cf 93       	push	r28
     f8e:	df 93       	push	r29
     f90:	18 2f       	mov	r17, r24
     f92:	06 2f       	mov	r16, r22
     f94:	ea 01       	movw	r28, r20
	while(num--)
     f96:	0b c0       	rjmp	.+22     	; 0xfae <_ZN12OrangutanLCD6scrollEhhj+0x26>
	{
		if (direction == LCD_LEFT)
     f98:	11 23       	and	r17, r17
     f9a:	11 f4       	brne	.+4      	; 0xfa0 <_ZN12OrangutanLCD6scrollEhhj+0x18>
			send_cmd(LCD_SHIFT_L);
     f9c:	88 e1       	ldi	r24, 0x18	; 24
     f9e:	01 c0       	rjmp	.+2      	; 0xfa2 <_ZN12OrangutanLCD6scrollEhhj+0x1a>
		else
			send_cmd(LCD_SHIFT_R);
     fa0:	8c e1       	ldi	r24, 0x1C	; 28
     fa2:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <_ZN12OrangutanLCD8send_cmdEh>
     fa6:	ce 01       	movw	r24, r28
     fa8:	0e 94 b1 08 	call	0x1162	; 0x1162 <delay_ms>
     fac:	01 50       	subi	r16, 0x01	; 1
// This is what you'd use for a scrolling display.
// direction should be either LCD_LEFT or LCD_RIGHT
void OrangutanLCD::scroll(unsigned char direction, unsigned char num, 
						   unsigned int delay_time)
{
	while(num--)
     fae:	00 23       	and	r16, r16
     fb0:	99 f7       	brne	.-26     	; 0xf98 <_ZN12OrangutanLCD6scrollEhhj+0x10>
			send_cmd(LCD_SHIFT_L);
		else
			send_cmd(LCD_SHIFT_R);
		delay(delay_time);
	}
}
     fb2:	df 91       	pop	r29
     fb4:	cf 91       	pop	r28
     fb6:	1f 91       	pop	r17
     fb8:	0f 91       	pop	r16
     fba:	08 95       	ret

00000fbc <lcd_scroll>:
}

extern "C" void lcd_scroll(unsigned char direction, unsigned char num, 
					   unsigned int delay_time)
{
	OrangutanLCD::scroll(direction, num, delay_time);
     fbc:	0e 94 c4 07 	call	0xf88	; 0xf88 <_ZN12OrangutanLCD6scrollEhhj>
}
     fc0:	08 95       	ret

00000fc2 <_ZN12OrangutanLCD10initPrintfEv>:

// Initializes the LCD library for printf support.  After this,
// printf will start sending characters to the LCD.
void OrangutanLCD::initPrintf()
{
	if (printf_chars != 0)
     fc2:	80 91 51 01 	lds	r24, 0x0151
     fc6:	90 91 52 01 	lds	r25, 0x0152
     fca:	00 97       	sbiw	r24, 0x00	; 0
     fcc:	11 f0       	breq	.+4      	; 0xfd2 <_ZN12OrangutanLCD10initPrintfEv+0x10>
		free(printf_chars);
     fce:	0e 94 8c 0a 	call	0x1518	; 0x1518 <free>
		
	printf_chars = (char*)malloc(sizeof(char)*SAVED_CHARS);
     fd2:	20 91 40 01 	lds	r18, 0x0140
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	21 50       	subi	r18, 0x01	; 1
     fda:	30 40       	sbci	r19, 0x00	; 0
     fdc:	80 91 41 01 	lds	r24, 0x0141
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	ac 01       	movw	r20, r24
     fe4:	24 9f       	mul	r18, r20
     fe6:	c0 01       	movw	r24, r0
     fe8:	25 9f       	mul	r18, r21
     fea:	90 0d       	add	r25, r0
     fec:	34 9f       	mul	r19, r20
     fee:	90 0d       	add	r25, r0
     ff0:	11 24       	eor	r1, r1
     ff2:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <malloc>
     ff6:	90 93 52 01 	sts	0x0152, r25
     ffa:	80 93 51 01 	sts	0x0151, r24
	if (printf_chars == 0)
     ffe:	00 97       	sbiw	r24, 0x00	; 0
    1000:	21 f1       	breq	.+72     	; 0x104a <_ZN12OrangutanLCD10initPrintfEv+0x88>
    1002:	a0 e0       	ldi	r26, 0x00	; 0
		return;
	unsigned char i;
	for (i = 0; i < SAVED_CHARS; i++)
		printf_chars[i] = ' ';
    1004:	b0 e2       	ldi	r27, 0x20	; 32
    1006:	08 c0       	rjmp	.+16     	; 0x1018 <_ZN12OrangutanLCD10initPrintfEv+0x56>
    1008:	e0 91 51 01 	lds	r30, 0x0151
    100c:	f0 91 52 01 	lds	r31, 0x0152
    1010:	e2 0f       	add	r30, r18
    1012:	f3 1f       	adc	r31, r19
    1014:	b0 83       	st	Z, r27
		
	printf_chars = (char*)malloc(sizeof(char)*SAVED_CHARS);
	if (printf_chars == 0)
		return;
	unsigned char i;
	for (i = 0; i < SAVED_CHARS; i++)
    1016:	af 5f       	subi	r26, 0xFF	; 255
    1018:	2a 2f       	mov	r18, r26
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	80 91 40 01 	lds	r24, 0x0140
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	01 97       	sbiw	r24, 0x01	; 1
    1024:	60 91 41 01 	lds	r22, 0x0141
    1028:	70 e0       	ldi	r23, 0x00	; 0
    102a:	86 9f       	mul	r24, r22
    102c:	a0 01       	movw	r20, r0
    102e:	87 9f       	mul	r24, r23
    1030:	50 0d       	add	r21, r0
    1032:	96 9f       	mul	r25, r22
    1034:	50 0d       	add	r21, r0
    1036:	11 24       	eor	r1, r1
    1038:	24 17       	cp	r18, r20
    103a:	35 07       	cpc	r19, r21
    103c:	2c f3       	brlt	.-54     	; 0x1008 <_ZN12OrangutanLCD10initPrintfEv+0x46>
		printf_chars[i] = ' ';
	fdevopen(lcd_putchar, void_getchar);
    103e:	8b e8       	ldi	r24, 0x8B	; 139
    1040:	96 e0       	ldi	r25, 0x06	; 6
    1042:	6f e5       	ldi	r22, 0x5F	; 95
    1044:	74 e0       	ldi	r23, 0x04	; 4
    1046:	0e 94 25 0b 	call	0x164a	; 0x164a <fdevopen>
    104a:	08 95       	ret

0000104c <lcd_init_printf>:
	OrangutanLCD::gotoXY(col,row);
}

extern "C" void lcd_init_printf()
{
	OrangutanLCD::initPrintf();
    104c:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <_ZN12OrangutanLCD10initPrintfEv>
}
    1050:	08 95       	ret

00001052 <lcd_init_printf_with_dimensions>:
	fdevopen(lcd_putchar, void_getchar);
}

void OrangutanLCD::initPrintf(unsigned char lcdWidth, unsigned char lcdHeight)
{
	numLCDCols = lcdWidth;
    1052:	80 93 41 01 	sts	0x0141, r24
	numLCDRows = lcdHeight;
    1056:	60 93 40 01 	sts	0x0140, r22
	initPrintf();
    105a:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <_ZN12OrangutanLCD10initPrintfEv>
}

extern "C" void lcd_init_printf_with_dimensions(unsigned char width, unsigned char height)
{
	OrangutanLCD::initPrintf(width, height);
}
    105e:	08 95       	ret

00001060 <_ZN12OrangutanLCD10initPrintfEhh>:
	fdevopen(lcd_putchar, void_getchar);
}

void OrangutanLCD::initPrintf(unsigned char lcdWidth, unsigned char lcdHeight)
{
	numLCDCols = lcdWidth;
    1060:	80 93 41 01 	sts	0x0141, r24
	numLCDRows = lcdHeight;
    1064:	60 93 40 01 	sts	0x0140, r22
	initPrintf();
    1068:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <_ZN12OrangutanLCD10initPrintfEv>
}
    106c:	08 95       	ret

0000106e <_ZN13OrangutanTime17delayMicrosecondsEj>:
						  "   pop  r22"     "\n\t"   
						  "   sbiw %0, 1"   "\n\t"
						  "   brne 1b"
						  : "=w" ( microseconds )  
						  : "0" ( microseconds )
						  );  
    106e:	6f 93       	push	r22
    1070:	64 e0       	ldi	r22, 0x04	; 4
    1072:	6a 95       	dec	r22
    1074:	f1 f7       	brne	.-4      	; 0x1072 <_ZN13OrangutanTime17delayMicrosecondsEj+0x4>
    1076:	6f 91       	pop	r22
    1078:	01 97       	sbiw	r24, 0x01	; 1
    107a:	c9 f7       	brne	.-14     	; 0x106e <_ZN13OrangutanTime17delayMicrosecondsEj>
	}
    107c:	08 95       	ret

0000107e <__vector_9>:
		"pop r25"					"\n\t"	// restore the registers we used in this ISR
		"pop r24"					"\n\t"
		"pop r2"					"\n\t"

		"reti"						"\n\t"	// return
		);
    107e:	2f 92       	push	r2
    1080:	8f 93       	push	r24
    1082:	9f 93       	push	r25
    1084:	2f b6       	in	r2, 0x3f	; 63
    1086:	80 91 5b 01 	lds	r24, 0x015B
    108a:	90 91 5c 01 	lds	r25, 0x015C
    108e:	01 96       	adiw	r24, 0x01	; 1
    1090:	80 93 5b 01 	sts	0x015B, r24
    1094:	90 93 5c 01 	sts	0x015C, r25
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	80 91 5d 01 	lds	r24, 0x015D
    109e:	89 1f       	adc	r24, r25
    10a0:	80 93 5d 01 	sts	0x015D, r24
    10a4:	90 91 63 01 	lds	r25, 0x0163
    10a8:	9c 5f       	subi	r25, 0xFC	; 252
    10aa:	90 93 63 01 	sts	0x0163, r25
    10ae:	80 91 62 01 	lds	r24, 0x0162
    10b2:	80 51       	subi	r24, 0x10	; 16
    10b4:	97 42       	sbci	r25, 0x27	; 39
    10b6:	c0 f0       	brcs	.+48     	; 0x10e8 <end>
    10b8:	90 93 63 01 	sts	0x0163, r25
    10bc:	80 93 62 01 	sts	0x0162, r24
    10c0:	80 91 5e 01 	lds	r24, 0x015E
    10c4:	90 91 5f 01 	lds	r25, 0x015F
    10c8:	01 96       	adiw	r24, 0x01	; 1
    10ca:	80 93 5e 01 	sts	0x015E, r24
    10ce:	90 93 5f 01 	sts	0x015F, r25
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	80 91 60 01 	lds	r24, 0x0160
    10d8:	89 1f       	adc	r24, r25
    10da:	80 93 60 01 	sts	0x0160, r24
    10de:	80 91 61 01 	lds	r24, 0x0161
    10e2:	89 1f       	adc	r24, r25
    10e4:	80 93 61 01 	sts	0x0161, r24

000010e8 <end>:
    10e8:	2f be       	out	0x3f, r2	; 63
    10ea:	9f 91       	pop	r25
    10ec:	8f 91       	pop	r24
    10ee:	2f 90       	pop	r2
    10f0:	18 95       	reti

000010f2 <ticks_to_microseconds>:
// inline assembly code.

extern "C" {
	unsigned long get_ticks() { return OrangutanTime::ticks(); }
	unsigned long ticks_to_microseconds(unsigned long numTicks)
	{
    10f2:	0f 93       	push	r16
    10f4:	1f 93       	push	r17
// unsigned long ticks = OrangutanTime::ticks();
// ... (do something)
// unsigned long elapsedMicroseconds = OrangutanTime::ticksToMicroseconds(OrangutanTime::ticks() - ticks);
unsigned long OrangutanTime::ticksToMicroseconds(unsigned long numTicks)
{
	return (numTicks * 2 + 2) / 5;
    10f6:	6f 5f       	subi	r22, 0xFF	; 255
    10f8:	7f 4f       	sbci	r23, 0xFF	; 255
    10fa:	8f 4f       	sbci	r24, 0xFF	; 255
    10fc:	9f 4f       	sbci	r25, 0xFF	; 255
    10fe:	66 0f       	add	r22, r22
    1100:	77 1f       	adc	r23, r23
    1102:	88 1f       	adc	r24, r24
    1104:	99 1f       	adc	r25, r25
    1106:	25 e0       	ldi	r18, 0x05	; 5
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	40 e0       	ldi	r20, 0x00	; 0
    110c:	50 e0       	ldi	r21, 0x00	; 0
    110e:	0e 94 7e 09 	call	0x12fc	; 0x12fc <__udivmodsi4>
extern "C" {
	unsigned long get_ticks() { return OrangutanTime::ticks(); }
	unsigned long ticks_to_microseconds(unsigned long numTicks)
	{
		return OrangutanTime::ticksToMicroseconds(numTicks);
	}
    1112:	b9 01       	movw	r22, r18
    1114:	ca 01       	movw	r24, r20
    1116:	1f 91       	pop	r17
    1118:	0f 91       	pop	r16
    111a:	08 95       	ret

0000111c <_ZN13OrangutanTime19ticksToMicrosecondsEm>:
// elapsed over a period.  For example:
// unsigned long ticks = OrangutanTime::ticks();
// ... (do something)
// unsigned long elapsedMicroseconds = OrangutanTime::ticksToMicroseconds(OrangutanTime::ticks() - ticks);
unsigned long OrangutanTime::ticksToMicroseconds(unsigned long numTicks)
{
    111c:	0f 93       	push	r16
    111e:	1f 93       	push	r17
	return (numTicks * 2 + 2) / 5;
    1120:	6f 5f       	subi	r22, 0xFF	; 255
    1122:	7f 4f       	sbci	r23, 0xFF	; 255
    1124:	8f 4f       	sbci	r24, 0xFF	; 255
    1126:	9f 4f       	sbci	r25, 0xFF	; 255
    1128:	66 0f       	add	r22, r22
    112a:	77 1f       	adc	r23, r23
    112c:	88 1f       	adc	r24, r24
    112e:	99 1f       	adc	r25, r25
    1130:	25 e0       	ldi	r18, 0x05	; 5
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	40 e0       	ldi	r20, 0x00	; 0
    1136:	50 e0       	ldi	r21, 0x00	; 0
    1138:	0e 94 7e 09 	call	0x12fc	; 0x12fc <__udivmodsi4>
}
    113c:	b9 01       	movw	r22, r18
    113e:	ca 01       	movw	r24, r20
    1140:	1f 91       	pop	r17
    1142:	0f 91       	pop	r16
    1144:	08 95       	ret

00001146 <_ZN13OrangutanTime17delayMillisecondsEj>:
	TIMSK2 |= 1 << TOIE2;	// enable timer2 overflow interrupt
	return value;
}

void OrangutanTime::delayMilliseconds(unsigned int milliseconds)
{
    1146:	cf 93       	push	r28
    1148:	df 93       	push	r29
    114a:	ec 01       	movw	r28, r24
	while (milliseconds--)
    114c:	05 c0       	rjmp	.+10     	; 0x1158 <_ZN13OrangutanTime17delayMillisecondsEj+0x12>
	  delayMicroseconds(1000);
    114e:	88 ee       	ldi	r24, 0xE8	; 232
    1150:	93 e0       	ldi	r25, 0x03	; 3
    1152:	0e 94 37 08 	call	0x106e	; 0x106e <_ZN13OrangutanTime17delayMicrosecondsEj>
    1156:	21 97       	sbiw	r28, 0x01	; 1
	return value;
}

void OrangutanTime::delayMilliseconds(unsigned int milliseconds)
{
	while (milliseconds--)
    1158:	20 97       	sbiw	r28, 0x00	; 0
    115a:	c9 f7       	brne	.-14     	; 0x114e <_ZN13OrangutanTime17delayMillisecondsEj+0x8>
	  delayMicroseconds(1000);
}
    115c:	df 91       	pop	r29
    115e:	cf 91       	pop	r28
    1160:	08 95       	ret

00001162 <delay_ms>:
	unsigned long ticks_to_microseconds(unsigned long numTicks)
	{
		return OrangutanTime::ticksToMicroseconds(numTicks);
	}
	unsigned long get_ms() { return OrangutanTime::ms(); }
	void delay_ms(unsigned int milliseconds) { OrangutanTime::delayMilliseconds(milliseconds); }
    1162:	0e 94 a3 08 	call	0x1146	; 0x1146 <_ZN13OrangutanTime17delayMillisecondsEj>
    1166:	08 95       	ret

00001168 <_ZN13OrangutanTime5init2Ev>:
	  delayMicroseconds(1000);
}

void OrangutanTime::init2()
{
	TIMSK2 &= ~(1 << TOIE2);	// disable timer2 overflow interrupt
    1168:	e0 e7       	ldi	r30, 0x70	; 112
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	80 81       	ld	r24, Z
    116e:	8e 7f       	andi	r24, 0xFE	; 254
    1170:	80 83       	st	Z, r24
		TCCR2A |= 0x01;
		TCCR2B &= 0xF0;
		TCCR2B |= 0x01;		// timer2 ticks at 20 MHz (prescaler = 1)
*/

	TCCR2A |= 0x03;		// fast PWM, TOP = 0xFF
    1172:	a0 eb       	ldi	r26, 0xB0	; 176
    1174:	b0 e0       	ldi	r27, 0x00	; 0
    1176:	8c 91       	ld	r24, X
    1178:	83 60       	ori	r24, 0x03	; 3
    117a:	8c 93       	st	X, r24
	TCCR2B &= 0xF0;
    117c:	a1 eb       	ldi	r26, 0xB1	; 177
    117e:	b0 e0       	ldi	r27, 0x00	; 0
    1180:	8c 91       	ld	r24, X
    1182:	80 7f       	andi	r24, 0xF0	; 240
    1184:	8c 93       	st	X, r24
	TCCR2B |= 0x02;		// timer 2 ticks at 2.5 MHz (prescaler = 8)
    1186:	8c 91       	ld	r24, X
    1188:	82 60       	ori	r24, 0x02	; 2
    118a:	8c 93       	st	X, r24

	TIFR2 |= 1 << TOV2;	// clear timer2 overflow flag
    118c:	b8 9a       	sbi	0x17, 0	; 23
	TIMSK2 |= 1 << TOIE2;	// enable timer2 overflow interrupt
    118e:	80 81       	ld	r24, Z
    1190:	81 60       	ori	r24, 0x01	; 1
    1192:	80 83       	st	Z, r24
	sei();				// enable global interrupts
    1194:	78 94       	sei
}
    1196:	08 95       	ret

00001198 <_ZN13OrangutanTime4initEv>:

	static inline void init()
	{
		static unsigned char initialized = 0;

		if (!initialized)
    1198:	80 91 64 01 	lds	r24, 0x0164
    119c:	88 23       	and	r24, r24
    119e:	29 f4       	brne	.+10     	; 0x11aa <_ZN13OrangutanTime4initEv+0x12>
		{
			initialized = 1;
    11a0:	81 e0       	ldi	r24, 0x01	; 1
    11a2:	80 93 64 01 	sts	0x0164, r24
			init2();
    11a6:	0e 94 b4 08 	call	0x1168	; 0x1168 <_ZN13OrangutanTime5init2Ev>
    11aa:	08 95       	ret

000011ac <_ZN13OrangutanTime2msEv>:
// differential time computations would give an incorrect result across an overflow.  Our
// method for tracking elapsed milliseconds gives a correct result when performing a time
// differential across an overflow.
unsigned long OrangutanTime::ms()
{
	init();
    11ac:	0e 94 cc 08 	call	0x1198	; 0x1198 <_ZN13OrangutanTime4initEv>
	unsigned long value;
	TIMSK2 &= ~(1 << TOIE2);	// disable timer2 overflow interrupt
    11b0:	e0 e7       	ldi	r30, 0x70	; 112
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	80 81       	ld	r24, Z
    11b6:	8e 7f       	andi	r24, 0xFE	; 254
    11b8:	80 83       	st	Z, r24
	value = msCounter;
    11ba:	20 91 5e 01 	lds	r18, 0x015E
    11be:	30 91 5f 01 	lds	r19, 0x015F
    11c2:	40 91 60 01 	lds	r20, 0x0160
    11c6:	50 91 61 01 	lds	r21, 0x0161
	TIMSK2 |= 1 << TOIE2;	// enable timer2 overflow interrupt
    11ca:	80 81       	ld	r24, Z
    11cc:	81 60       	ori	r24, 0x01	; 1
    11ce:	80 83       	st	Z, r24
	return value;
}
    11d0:	b9 01       	movw	r22, r18
    11d2:	ca 01       	movw	r24, r20
    11d4:	08 95       	ret

000011d6 <get_ms>:
	unsigned long get_ticks() { return OrangutanTime::ticks(); }
	unsigned long ticks_to_microseconds(unsigned long numTicks)
	{
		return OrangutanTime::ticksToMicroseconds(numTicks);
	}
	unsigned long get_ms() { return OrangutanTime::ms(); }
    11d6:	0e 94 d6 08 	call	0x11ac	; 0x11ac <_ZN13OrangutanTime2msEv>
    11da:	08 95       	ret

000011dc <_ZN13OrangutanTime5ticksEv>:

// number of ticks (in units of 0.4 us) that have elapsed since OrangutanTime was
// initialized.
unsigned long OrangutanTime::ticks()
{
	init();
    11dc:	0e 94 cc 08 	call	0x1198	; 0x1198 <_ZN13OrangutanTime4initEv>
	TIMSK2 &= ~(1 << TOIE2);	// disable timer2 overflow interrupt
    11e0:	80 91 70 00 	lds	r24, 0x0070
    11e4:	8e 7f       	andi	r24, 0xFE	; 254
    11e6:	80 93 70 00 	sts	0x0070, r24
	unsigned long numTicks = TCNT2 | tickCount;	// TCNT2 is lowest byte of tickCount
    11ea:	20 91 b2 00 	lds	r18, 0x00B2
    11ee:	80 91 5a 01 	lds	r24, 0x015A
    11f2:	90 91 5b 01 	lds	r25, 0x015B
    11f6:	a0 91 5c 01 	lds	r26, 0x015C
    11fa:	b0 91 5d 01 	lds	r27, 0x015D
	if (TIFR2 & (1 << TOV2))	// if TCNT2 has overflowed since we disabled t2 ovf interrupt
    11fe:	b8 99       	sbic	0x17, 0	; 23
    1200:	04 c0       	rjmp	.+8      	; 0x120a <_ZN13OrangutanTime5ticksEv+0x2e>
// initialized.
unsigned long OrangutanTime::ticks()
{
	init();
	TIMSK2 &= ~(1 << TOIE2);	// disable timer2 overflow interrupt
	unsigned long numTicks = TCNT2 | tickCount;	// TCNT2 is lowest byte of tickCount
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	40 e0       	ldi	r20, 0x00	; 0
    1206:	50 e0       	ldi	r21, 0x00	; 0
    1208:	11 c0       	rjmp	.+34     	; 0x122c <_ZN13OrangutanTime5ticksEv+0x50>
	{
		// NOTE: it is important to perform this computation again.  If we use a value of TCNT2 read
		// before we checked for the overflow, it might be something like 255 while it becomes 0 after
		// the overflow.  Using an old value could produce a result that is bigger than it should be.
		// For example, the following line should *NOT* be: numTicks += 256;
		numTicks = TCNT2 | (tickCount + 256);		// compute ticks again and add 256 for the overflow
    120a:	80 91 b2 00 	lds	r24, 0x00B2
    120e:	20 91 5a 01 	lds	r18, 0x015A
    1212:	30 91 5b 01 	lds	r19, 0x015B
    1216:	40 91 5c 01 	lds	r20, 0x015C
    121a:	50 91 5d 01 	lds	r21, 0x015D
    121e:	20 50       	subi	r18, 0x00	; 0
    1220:	3f 4f       	sbci	r19, 0xFF	; 255
    1222:	4f 4f       	sbci	r20, 0xFF	; 255
    1224:	5f 4f       	sbci	r21, 0xFF	; 255
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	a0 e0       	ldi	r26, 0x00	; 0
    122a:	b0 e0       	ldi	r27, 0x00	; 0
    122c:	28 2b       	or	r18, r24
    122e:	39 2b       	or	r19, r25
    1230:	4a 2b       	or	r20, r26
    1232:	5b 2b       	or	r21, r27
	}
	TIMSK2 |= 1 << TOIE2;	// enable timer2 overflow interrupt
    1234:	80 91 70 00 	lds	r24, 0x0070
    1238:	81 60       	ori	r24, 0x01	; 1
    123a:	80 93 70 00 	sts	0x0070, r24
	return numTicks;
}
    123e:	b9 01       	movw	r22, r18
    1240:	ca 01       	movw	r24, r20
    1242:	08 95       	ret

00001244 <get_ticks>:
// There are some inline ones defined to alias to these in the C
// header files.  Also, delay_us() is only in the header, since it's
// inline assembly code.

extern "C" {
	unsigned long get_ticks() { return OrangutanTime::ticks(); }
    1244:	0e 94 ee 08 	call	0x11dc	; 0x11dc <_ZN13OrangutanTime5ticksEv>
    1248:	08 95       	ret

0000124a <_ZN13OrangutanTime5resetEv>:
}

// resets millisecond counter, but does not reset tick counter
void OrangutanTime::reset()
{
	init();
    124a:	0e 94 cc 08 	call	0x1198	; 0x1198 <_ZN13OrangutanTime4initEv>
	TIMSK2 &= ~(1 << TOIE2);	// disable timer2 overflow interrupt
    124e:	e0 e7       	ldi	r30, 0x70	; 112
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	80 81       	ld	r24, Z
    1254:	8e 7f       	andi	r24, 0xFE	; 254
    1256:	80 83       	st	Z, r24
	msCounter = 0;
    1258:	10 92 5e 01 	sts	0x015E, r1
    125c:	10 92 5f 01 	sts	0x015F, r1
    1260:	10 92 60 01 	sts	0x0160, r1
    1264:	10 92 61 01 	sts	0x0161, r1
	us_over_10 = 0;
    1268:	10 92 63 01 	sts	0x0163, r1
    126c:	10 92 62 01 	sts	0x0162, r1
	TIMSK2 |= 1 << TOIE2;	// enable timer2 overflow interrupt
    1270:	80 81       	ld	r24, Z
    1272:	81 60       	ori	r24, 0x01	; 1
    1274:	80 83       	st	Z, r24
}
    1276:	08 95       	ret

00001278 <time_reset>:
	{
		return OrangutanTime::ticksToMicroseconds(numTicks);
	}
	unsigned long get_ms() { return OrangutanTime::ms(); }
	void delay_ms(unsigned int milliseconds) { OrangutanTime::delayMilliseconds(milliseconds); }
	void time_reset() { OrangutanTime::reset(); }
    1278:	0e 94 25 09 	call	0x124a	; 0x124a <_ZN13OrangutanTime5resetEv>
    127c:	08 95       	ret

0000127e <__mulsi3>:
    127e:	62 9f       	mul	r22, r18
    1280:	d0 01       	movw	r26, r0
    1282:	73 9f       	mul	r23, r19
    1284:	f0 01       	movw	r30, r0
    1286:	82 9f       	mul	r24, r18
    1288:	e0 0d       	add	r30, r0
    128a:	f1 1d       	adc	r31, r1
    128c:	64 9f       	mul	r22, r20
    128e:	e0 0d       	add	r30, r0
    1290:	f1 1d       	adc	r31, r1
    1292:	92 9f       	mul	r25, r18
    1294:	f0 0d       	add	r31, r0
    1296:	83 9f       	mul	r24, r19
    1298:	f0 0d       	add	r31, r0
    129a:	74 9f       	mul	r23, r20
    129c:	f0 0d       	add	r31, r0
    129e:	65 9f       	mul	r22, r21
    12a0:	f0 0d       	add	r31, r0
    12a2:	99 27       	eor	r25, r25
    12a4:	72 9f       	mul	r23, r18
    12a6:	b0 0d       	add	r27, r0
    12a8:	e1 1d       	adc	r30, r1
    12aa:	f9 1f       	adc	r31, r25
    12ac:	63 9f       	mul	r22, r19
    12ae:	b0 0d       	add	r27, r0
    12b0:	e1 1d       	adc	r30, r1
    12b2:	f9 1f       	adc	r31, r25
    12b4:	bd 01       	movw	r22, r26
    12b6:	cf 01       	movw	r24, r30
    12b8:	11 24       	eor	r1, r1
    12ba:	08 95       	ret

000012bc <__udivmodqi4>:
    12bc:	99 1b       	sub	r25, r25
    12be:	79 e0       	ldi	r23, 0x09	; 9
    12c0:	04 c0       	rjmp	.+8      	; 0x12ca <__udivmodqi4_ep>

000012c2 <__udivmodqi4_loop>:
    12c2:	99 1f       	adc	r25, r25
    12c4:	96 17       	cp	r25, r22
    12c6:	08 f0       	brcs	.+2      	; 0x12ca <__udivmodqi4_ep>
    12c8:	96 1b       	sub	r25, r22

000012ca <__udivmodqi4_ep>:
    12ca:	88 1f       	adc	r24, r24
    12cc:	7a 95       	dec	r23
    12ce:	c9 f7       	brne	.-14     	; 0x12c2 <__udivmodqi4_loop>
    12d0:	80 95       	com	r24
    12d2:	08 95       	ret

000012d4 <__udivmodhi4>:
    12d4:	aa 1b       	sub	r26, r26
    12d6:	bb 1b       	sub	r27, r27
    12d8:	51 e1       	ldi	r21, 0x11	; 17
    12da:	07 c0       	rjmp	.+14     	; 0x12ea <__udivmodhi4_ep>

000012dc <__udivmodhi4_loop>:
    12dc:	aa 1f       	adc	r26, r26
    12de:	bb 1f       	adc	r27, r27
    12e0:	a6 17       	cp	r26, r22
    12e2:	b7 07       	cpc	r27, r23
    12e4:	10 f0       	brcs	.+4      	; 0x12ea <__udivmodhi4_ep>
    12e6:	a6 1b       	sub	r26, r22
    12e8:	b7 0b       	sbc	r27, r23

000012ea <__udivmodhi4_ep>:
    12ea:	88 1f       	adc	r24, r24
    12ec:	99 1f       	adc	r25, r25
    12ee:	5a 95       	dec	r21
    12f0:	a9 f7       	brne	.-22     	; 0x12dc <__udivmodhi4_loop>
    12f2:	80 95       	com	r24
    12f4:	90 95       	com	r25
    12f6:	bc 01       	movw	r22, r24
    12f8:	cd 01       	movw	r24, r26
    12fa:	08 95       	ret

000012fc <__udivmodsi4>:
    12fc:	a1 e2       	ldi	r26, 0x21	; 33
    12fe:	1a 2e       	mov	r1, r26
    1300:	aa 1b       	sub	r26, r26
    1302:	bb 1b       	sub	r27, r27
    1304:	fd 01       	movw	r30, r26
    1306:	0d c0       	rjmp	.+26     	; 0x1322 <__udivmodsi4_ep>

00001308 <__udivmodsi4_loop>:
    1308:	aa 1f       	adc	r26, r26
    130a:	bb 1f       	adc	r27, r27
    130c:	ee 1f       	adc	r30, r30
    130e:	ff 1f       	adc	r31, r31
    1310:	a2 17       	cp	r26, r18
    1312:	b3 07       	cpc	r27, r19
    1314:	e4 07       	cpc	r30, r20
    1316:	f5 07       	cpc	r31, r21
    1318:	20 f0       	brcs	.+8      	; 0x1322 <__udivmodsi4_ep>
    131a:	a2 1b       	sub	r26, r18
    131c:	b3 0b       	sbc	r27, r19
    131e:	e4 0b       	sbc	r30, r20
    1320:	f5 0b       	sbc	r31, r21

00001322 <__udivmodsi4_ep>:
    1322:	66 1f       	adc	r22, r22
    1324:	77 1f       	adc	r23, r23
    1326:	88 1f       	adc	r24, r24
    1328:	99 1f       	adc	r25, r25
    132a:	1a 94       	dec	r1
    132c:	69 f7       	brne	.-38     	; 0x1308 <__udivmodsi4_loop>
    132e:	60 95       	com	r22
    1330:	70 95       	com	r23
    1332:	80 95       	com	r24
    1334:	90 95       	com	r25
    1336:	9b 01       	movw	r18, r22
    1338:	ac 01       	movw	r20, r24
    133a:	bd 01       	movw	r22, r26
    133c:	cf 01       	movw	r24, r30
    133e:	08 95       	ret

00001340 <__divmodsi4>:
    1340:	97 fb       	bst	r25, 7
    1342:	09 2e       	mov	r0, r25
    1344:	05 26       	eor	r0, r21
    1346:	0e d0       	rcall	.+28     	; 0x1364 <__divmodsi4_neg1>
    1348:	57 fd       	sbrc	r21, 7
    134a:	04 d0       	rcall	.+8      	; 0x1354 <__divmodsi4_neg2>
    134c:	d7 df       	rcall	.-82     	; 0x12fc <__udivmodsi4>
    134e:	0a d0       	rcall	.+20     	; 0x1364 <__divmodsi4_neg1>
    1350:	00 1c       	adc	r0, r0
    1352:	38 f4       	brcc	.+14     	; 0x1362 <__divmodsi4_exit>

00001354 <__divmodsi4_neg2>:
    1354:	50 95       	com	r21
    1356:	40 95       	com	r20
    1358:	30 95       	com	r19
    135a:	21 95       	neg	r18
    135c:	3f 4f       	sbci	r19, 0xFF	; 255
    135e:	4f 4f       	sbci	r20, 0xFF	; 255
    1360:	5f 4f       	sbci	r21, 0xFF	; 255

00001362 <__divmodsi4_exit>:
    1362:	08 95       	ret

00001364 <__divmodsi4_neg1>:
    1364:	f6 f7       	brtc	.-4      	; 0x1362 <__divmodsi4_exit>
    1366:	90 95       	com	r25
    1368:	80 95       	com	r24
    136a:	70 95       	com	r23
    136c:	61 95       	neg	r22
    136e:	7f 4f       	sbci	r23, 0xFF	; 255
    1370:	8f 4f       	sbci	r24, 0xFF	; 255
    1372:	9f 4f       	sbci	r25, 0xFF	; 255
    1374:	08 95       	ret

00001376 <__prologue_saves__>:
    1376:	2f 92       	push	r2
    1378:	3f 92       	push	r3
    137a:	4f 92       	push	r4
    137c:	5f 92       	push	r5
    137e:	6f 92       	push	r6
    1380:	7f 92       	push	r7
    1382:	8f 92       	push	r8
    1384:	9f 92       	push	r9
    1386:	af 92       	push	r10
    1388:	bf 92       	push	r11
    138a:	cf 92       	push	r12
    138c:	df 92       	push	r13
    138e:	ef 92       	push	r14
    1390:	ff 92       	push	r15
    1392:	0f 93       	push	r16
    1394:	1f 93       	push	r17
    1396:	cf 93       	push	r28
    1398:	df 93       	push	r29
    139a:	cd b7       	in	r28, 0x3d	; 61
    139c:	de b7       	in	r29, 0x3e	; 62
    139e:	ca 1b       	sub	r28, r26
    13a0:	db 0b       	sbc	r29, r27
    13a2:	0f b6       	in	r0, 0x3f	; 63
    13a4:	f8 94       	cli
    13a6:	de bf       	out	0x3e, r29	; 62
    13a8:	0f be       	out	0x3f, r0	; 63
    13aa:	cd bf       	out	0x3d, r28	; 61
    13ac:	09 94       	ijmp

000013ae <__epilogue_restores__>:
    13ae:	2a 88       	ldd	r2, Y+18	; 0x12
    13b0:	39 88       	ldd	r3, Y+17	; 0x11
    13b2:	48 88       	ldd	r4, Y+16	; 0x10
    13b4:	5f 84       	ldd	r5, Y+15	; 0x0f
    13b6:	6e 84       	ldd	r6, Y+14	; 0x0e
    13b8:	7d 84       	ldd	r7, Y+13	; 0x0d
    13ba:	8c 84       	ldd	r8, Y+12	; 0x0c
    13bc:	9b 84       	ldd	r9, Y+11	; 0x0b
    13be:	aa 84       	ldd	r10, Y+10	; 0x0a
    13c0:	b9 84       	ldd	r11, Y+9	; 0x09
    13c2:	c8 84       	ldd	r12, Y+8	; 0x08
    13c4:	df 80       	ldd	r13, Y+7	; 0x07
    13c6:	ee 80       	ldd	r14, Y+6	; 0x06
    13c8:	fd 80       	ldd	r15, Y+5	; 0x05
    13ca:	0c 81       	ldd	r16, Y+4	; 0x04
    13cc:	1b 81       	ldd	r17, Y+3	; 0x03
    13ce:	aa 81       	ldd	r26, Y+2	; 0x02
    13d0:	b9 81       	ldd	r27, Y+1	; 0x01
    13d2:	ce 0f       	add	r28, r30
    13d4:	d1 1d       	adc	r29, r1
    13d6:	0f b6       	in	r0, 0x3f	; 63
    13d8:	f8 94       	cli
    13da:	de bf       	out	0x3e, r29	; 62
    13dc:	0f be       	out	0x3f, r0	; 63
    13de:	cd bf       	out	0x3d, r28	; 61
    13e0:	ed 01       	movw	r28, r26
    13e2:	08 95       	ret

000013e4 <malloc>:
    13e4:	cf 93       	push	r28
    13e6:	df 93       	push	r29
    13e8:	82 30       	cpi	r24, 0x02	; 2
    13ea:	91 05       	cpc	r25, r1
    13ec:	10 f4       	brcc	.+4      	; 0x13f2 <malloc+0xe>
    13ee:	82 e0       	ldi	r24, 0x02	; 2
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	e0 91 67 01 	lds	r30, 0x0167
    13f6:	f0 91 68 01 	lds	r31, 0x0168
    13fa:	40 e0       	ldi	r20, 0x00	; 0
    13fc:	50 e0       	ldi	r21, 0x00	; 0
    13fe:	20 e0       	ldi	r18, 0x00	; 0
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	26 c0       	rjmp	.+76     	; 0x1450 <malloc+0x6c>
    1404:	60 81       	ld	r22, Z
    1406:	71 81       	ldd	r23, Z+1	; 0x01
    1408:	68 17       	cp	r22, r24
    140a:	79 07       	cpc	r23, r25
    140c:	e0 f0       	brcs	.+56     	; 0x1446 <malloc+0x62>
    140e:	68 17       	cp	r22, r24
    1410:	79 07       	cpc	r23, r25
    1412:	81 f4       	brne	.+32     	; 0x1434 <malloc+0x50>
    1414:	82 81       	ldd	r24, Z+2	; 0x02
    1416:	93 81       	ldd	r25, Z+3	; 0x03
    1418:	21 15       	cp	r18, r1
    141a:	31 05       	cpc	r19, r1
    141c:	31 f0       	breq	.+12     	; 0x142a <malloc+0x46>
    141e:	d9 01       	movw	r26, r18
    1420:	13 96       	adiw	r26, 0x03	; 3
    1422:	9c 93       	st	X, r25
    1424:	8e 93       	st	-X, r24
    1426:	12 97       	sbiw	r26, 0x02	; 2
    1428:	2b c0       	rjmp	.+86     	; 0x1480 <malloc+0x9c>
    142a:	90 93 68 01 	sts	0x0168, r25
    142e:	80 93 67 01 	sts	0x0167, r24
    1432:	26 c0       	rjmp	.+76     	; 0x1480 <malloc+0x9c>
    1434:	41 15       	cp	r20, r1
    1436:	51 05       	cpc	r21, r1
    1438:	19 f0       	breq	.+6      	; 0x1440 <malloc+0x5c>
    143a:	64 17       	cp	r22, r20
    143c:	75 07       	cpc	r23, r21
    143e:	18 f4       	brcc	.+6      	; 0x1446 <malloc+0x62>
    1440:	ab 01       	movw	r20, r22
    1442:	e9 01       	movw	r28, r18
    1444:	df 01       	movw	r26, r30
    1446:	9f 01       	movw	r18, r30
    1448:	72 81       	ldd	r23, Z+2	; 0x02
    144a:	63 81       	ldd	r22, Z+3	; 0x03
    144c:	e7 2f       	mov	r30, r23
    144e:	f6 2f       	mov	r31, r22
    1450:	30 97       	sbiw	r30, 0x00	; 0
    1452:	c1 f6       	brne	.-80     	; 0x1404 <malloc+0x20>
    1454:	41 15       	cp	r20, r1
    1456:	51 05       	cpc	r21, r1
    1458:	01 f1       	breq	.+64     	; 0x149a <malloc+0xb6>
    145a:	48 1b       	sub	r20, r24
    145c:	59 0b       	sbc	r21, r25
    145e:	44 30       	cpi	r20, 0x04	; 4
    1460:	51 05       	cpc	r21, r1
    1462:	80 f4       	brcc	.+32     	; 0x1484 <malloc+0xa0>
    1464:	12 96       	adiw	r26, 0x02	; 2
    1466:	8d 91       	ld	r24, X+
    1468:	9c 91       	ld	r25, X
    146a:	13 97       	sbiw	r26, 0x03	; 3
    146c:	20 97       	sbiw	r28, 0x00	; 0
    146e:	19 f0       	breq	.+6      	; 0x1476 <malloc+0x92>
    1470:	9b 83       	std	Y+3, r25	; 0x03
    1472:	8a 83       	std	Y+2, r24	; 0x02
    1474:	04 c0       	rjmp	.+8      	; 0x147e <malloc+0x9a>
    1476:	90 93 68 01 	sts	0x0168, r25
    147a:	80 93 67 01 	sts	0x0167, r24
    147e:	fd 01       	movw	r30, r26
    1480:	32 96       	adiw	r30, 0x02	; 2
    1482:	46 c0       	rjmp	.+140    	; 0x1510 <malloc+0x12c>
    1484:	fd 01       	movw	r30, r26
    1486:	e4 0f       	add	r30, r20
    1488:	f5 1f       	adc	r31, r21
    148a:	81 93       	st	Z+, r24
    148c:	91 93       	st	Z+, r25
    148e:	42 50       	subi	r20, 0x02	; 2
    1490:	50 40       	sbci	r21, 0x00	; 0
    1492:	11 96       	adiw	r26, 0x01	; 1
    1494:	5c 93       	st	X, r21
    1496:	4e 93       	st	-X, r20
    1498:	3b c0       	rjmp	.+118    	; 0x1510 <malloc+0x12c>
    149a:	20 91 65 01 	lds	r18, 0x0165
    149e:	30 91 66 01 	lds	r19, 0x0166
    14a2:	21 15       	cp	r18, r1
    14a4:	31 05       	cpc	r19, r1
    14a6:	41 f4       	brne	.+16     	; 0x14b8 <malloc+0xd4>
    14a8:	20 91 44 01 	lds	r18, 0x0144
    14ac:	30 91 45 01 	lds	r19, 0x0145
    14b0:	30 93 66 01 	sts	0x0166, r19
    14b4:	20 93 65 01 	sts	0x0165, r18
    14b8:	20 91 46 01 	lds	r18, 0x0146
    14bc:	30 91 47 01 	lds	r19, 0x0147
    14c0:	21 15       	cp	r18, r1
    14c2:	31 05       	cpc	r19, r1
    14c4:	41 f4       	brne	.+16     	; 0x14d6 <malloc+0xf2>
    14c6:	2d b7       	in	r18, 0x3d	; 61
    14c8:	3e b7       	in	r19, 0x3e	; 62
    14ca:	40 91 42 01 	lds	r20, 0x0142
    14ce:	50 91 43 01 	lds	r21, 0x0143
    14d2:	24 1b       	sub	r18, r20
    14d4:	35 0b       	sbc	r19, r21
    14d6:	e0 91 65 01 	lds	r30, 0x0165
    14da:	f0 91 66 01 	lds	r31, 0x0166
    14de:	e2 17       	cp	r30, r18
    14e0:	f3 07       	cpc	r31, r19
    14e2:	a0 f4       	brcc	.+40     	; 0x150c <malloc+0x128>
    14e4:	2e 1b       	sub	r18, r30
    14e6:	3f 0b       	sbc	r19, r31
    14e8:	28 17       	cp	r18, r24
    14ea:	39 07       	cpc	r19, r25
    14ec:	78 f0       	brcs	.+30     	; 0x150c <malloc+0x128>
    14ee:	ac 01       	movw	r20, r24
    14f0:	4e 5f       	subi	r20, 0xFE	; 254
    14f2:	5f 4f       	sbci	r21, 0xFF	; 255
    14f4:	24 17       	cp	r18, r20
    14f6:	35 07       	cpc	r19, r21
    14f8:	48 f0       	brcs	.+18     	; 0x150c <malloc+0x128>
    14fa:	4e 0f       	add	r20, r30
    14fc:	5f 1f       	adc	r21, r31
    14fe:	50 93 66 01 	sts	0x0166, r21
    1502:	40 93 65 01 	sts	0x0165, r20
    1506:	81 93       	st	Z+, r24
    1508:	91 93       	st	Z+, r25
    150a:	02 c0       	rjmp	.+4      	; 0x1510 <malloc+0x12c>
    150c:	e0 e0       	ldi	r30, 0x00	; 0
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	cf 01       	movw	r24, r30
    1512:	df 91       	pop	r29
    1514:	cf 91       	pop	r28
    1516:	08 95       	ret

00001518 <free>:
    1518:	cf 93       	push	r28
    151a:	df 93       	push	r29
    151c:	00 97       	sbiw	r24, 0x00	; 0
    151e:	09 f4       	brne	.+2      	; 0x1522 <free+0xa>
    1520:	91 c0       	rjmp	.+290    	; 0x1644 <free+0x12c>
    1522:	fc 01       	movw	r30, r24
    1524:	32 97       	sbiw	r30, 0x02	; 2
    1526:	13 82       	std	Z+3, r1	; 0x03
    1528:	12 82       	std	Z+2, r1	; 0x02
    152a:	60 91 67 01 	lds	r22, 0x0167
    152e:	70 91 68 01 	lds	r23, 0x0168
    1532:	61 15       	cp	r22, r1
    1534:	71 05       	cpc	r23, r1
    1536:	81 f4       	brne	.+32     	; 0x1558 <free+0x40>
    1538:	20 81       	ld	r18, Z
    153a:	31 81       	ldd	r19, Z+1	; 0x01
    153c:	28 0f       	add	r18, r24
    153e:	39 1f       	adc	r19, r25
    1540:	80 91 65 01 	lds	r24, 0x0165
    1544:	90 91 66 01 	lds	r25, 0x0166
    1548:	82 17       	cp	r24, r18
    154a:	93 07       	cpc	r25, r19
    154c:	99 f5       	brne	.+102    	; 0x15b4 <free+0x9c>
    154e:	f0 93 66 01 	sts	0x0166, r31
    1552:	e0 93 65 01 	sts	0x0165, r30
    1556:	76 c0       	rjmp	.+236    	; 0x1644 <free+0x12c>
    1558:	db 01       	movw	r26, r22
    155a:	80 e0       	ldi	r24, 0x00	; 0
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	02 c0       	rjmp	.+4      	; 0x1564 <free+0x4c>
    1560:	cd 01       	movw	r24, r26
    1562:	d9 01       	movw	r26, r18
    1564:	ae 17       	cp	r26, r30
    1566:	bf 07       	cpc	r27, r31
    1568:	48 f4       	brcc	.+18     	; 0x157c <free+0x64>
    156a:	12 96       	adiw	r26, 0x02	; 2
    156c:	2d 91       	ld	r18, X+
    156e:	3c 91       	ld	r19, X
    1570:	13 97       	sbiw	r26, 0x03	; 3
    1572:	21 15       	cp	r18, r1
    1574:	31 05       	cpc	r19, r1
    1576:	a1 f7       	brne	.-24     	; 0x1560 <free+0x48>
    1578:	cd 01       	movw	r24, r26
    157a:	21 c0       	rjmp	.+66     	; 0x15be <free+0xa6>
    157c:	b3 83       	std	Z+3, r27	; 0x03
    157e:	a2 83       	std	Z+2, r26	; 0x02
    1580:	ef 01       	movw	r28, r30
    1582:	49 91       	ld	r20, Y+
    1584:	59 91       	ld	r21, Y+
    1586:	9e 01       	movw	r18, r28
    1588:	24 0f       	add	r18, r20
    158a:	35 1f       	adc	r19, r21
    158c:	a2 17       	cp	r26, r18
    158e:	b3 07       	cpc	r27, r19
    1590:	79 f4       	brne	.+30     	; 0x15b0 <free+0x98>
    1592:	2d 91       	ld	r18, X+
    1594:	3c 91       	ld	r19, X
    1596:	11 97       	sbiw	r26, 0x01	; 1
    1598:	24 0f       	add	r18, r20
    159a:	35 1f       	adc	r19, r21
    159c:	2e 5f       	subi	r18, 0xFE	; 254
    159e:	3f 4f       	sbci	r19, 0xFF	; 255
    15a0:	31 83       	std	Z+1, r19	; 0x01
    15a2:	20 83       	st	Z, r18
    15a4:	12 96       	adiw	r26, 0x02	; 2
    15a6:	2d 91       	ld	r18, X+
    15a8:	3c 91       	ld	r19, X
    15aa:	13 97       	sbiw	r26, 0x03	; 3
    15ac:	33 83       	std	Z+3, r19	; 0x03
    15ae:	22 83       	std	Z+2, r18	; 0x02
    15b0:	00 97       	sbiw	r24, 0x00	; 0
    15b2:	29 f4       	brne	.+10     	; 0x15be <free+0xa6>
    15b4:	f0 93 68 01 	sts	0x0168, r31
    15b8:	e0 93 67 01 	sts	0x0167, r30
    15bc:	43 c0       	rjmp	.+134    	; 0x1644 <free+0x12c>
    15be:	dc 01       	movw	r26, r24
    15c0:	13 96       	adiw	r26, 0x03	; 3
    15c2:	fc 93       	st	X, r31
    15c4:	ee 93       	st	-X, r30
    15c6:	12 97       	sbiw	r26, 0x02	; 2
    15c8:	4d 91       	ld	r20, X+
    15ca:	5d 91       	ld	r21, X+
    15cc:	a4 0f       	add	r26, r20
    15ce:	b5 1f       	adc	r27, r21
    15d0:	ea 17       	cp	r30, r26
    15d2:	fb 07       	cpc	r31, r27
    15d4:	69 f4       	brne	.+26     	; 0x15f0 <free+0xd8>
    15d6:	20 81       	ld	r18, Z
    15d8:	31 81       	ldd	r19, Z+1	; 0x01
    15da:	24 0f       	add	r18, r20
    15dc:	35 1f       	adc	r19, r21
    15de:	2e 5f       	subi	r18, 0xFE	; 254
    15e0:	3f 4f       	sbci	r19, 0xFF	; 255
    15e2:	ec 01       	movw	r28, r24
    15e4:	39 83       	std	Y+1, r19	; 0x01
    15e6:	28 83       	st	Y, r18
    15e8:	22 81       	ldd	r18, Z+2	; 0x02
    15ea:	33 81       	ldd	r19, Z+3	; 0x03
    15ec:	3b 83       	std	Y+3, r19	; 0x03
    15ee:	2a 83       	std	Y+2, r18	; 0x02
    15f0:	e0 e0       	ldi	r30, 0x00	; 0
    15f2:	f0 e0       	ldi	r31, 0x00	; 0
    15f4:	02 c0       	rjmp	.+4      	; 0x15fa <free+0xe2>
    15f6:	fb 01       	movw	r30, r22
    15f8:	bc 01       	movw	r22, r24
    15fa:	db 01       	movw	r26, r22
    15fc:	12 96       	adiw	r26, 0x02	; 2
    15fe:	8d 91       	ld	r24, X+
    1600:	9c 91       	ld	r25, X
    1602:	13 97       	sbiw	r26, 0x03	; 3
    1604:	00 97       	sbiw	r24, 0x00	; 0
    1606:	b9 f7       	brne	.-18     	; 0x15f6 <free+0xde>
    1608:	9b 01       	movw	r18, r22
    160a:	2e 5f       	subi	r18, 0xFE	; 254
    160c:	3f 4f       	sbci	r19, 0xFF	; 255
    160e:	8d 91       	ld	r24, X+
    1610:	9c 91       	ld	r25, X
    1612:	11 97       	sbiw	r26, 0x01	; 1
    1614:	82 0f       	add	r24, r18
    1616:	93 1f       	adc	r25, r19
    1618:	40 91 65 01 	lds	r20, 0x0165
    161c:	50 91 66 01 	lds	r21, 0x0166
    1620:	48 17       	cp	r20, r24
    1622:	59 07       	cpc	r21, r25
    1624:	79 f4       	brne	.+30     	; 0x1644 <free+0x12c>
    1626:	30 97       	sbiw	r30, 0x00	; 0
    1628:	29 f4       	brne	.+10     	; 0x1634 <free+0x11c>
    162a:	10 92 68 01 	sts	0x0168, r1
    162e:	10 92 67 01 	sts	0x0167, r1
    1632:	02 c0       	rjmp	.+4      	; 0x1638 <free+0x120>
    1634:	13 82       	std	Z+3, r1	; 0x03
    1636:	12 82       	std	Z+2, r1	; 0x02
    1638:	22 50       	subi	r18, 0x02	; 2
    163a:	30 40       	sbci	r19, 0x00	; 0
    163c:	30 93 66 01 	sts	0x0166, r19
    1640:	20 93 65 01 	sts	0x0165, r18
    1644:	df 91       	pop	r29
    1646:	cf 91       	pop	r28
    1648:	08 95       	ret

0000164a <fdevopen>:
    164a:	0f 93       	push	r16
    164c:	1f 93       	push	r17
    164e:	cf 93       	push	r28
    1650:	df 93       	push	r29
    1652:	8c 01       	movw	r16, r24
    1654:	eb 01       	movw	r28, r22
    1656:	00 97       	sbiw	r24, 0x00	; 0
    1658:	11 f4       	brne	.+4      	; 0x165e <fdevopen+0x14>
    165a:	20 97       	sbiw	r28, 0x00	; 0
    165c:	c9 f1       	breq	.+114    	; 0x16d0 <fdevopen+0x86>
    165e:	81 e0       	ldi	r24, 0x01	; 1
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	6e e0       	ldi	r22, 0x0E	; 14
    1664:	70 e0       	ldi	r23, 0x00	; 0
    1666:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <calloc>
    166a:	fc 01       	movw	r30, r24
    166c:	9c 01       	movw	r18, r24
    166e:	00 97       	sbiw	r24, 0x00	; 0
    1670:	89 f1       	breq	.+98     	; 0x16d4 <fdevopen+0x8a>
    1672:	80 e8       	ldi	r24, 0x80	; 128
    1674:	83 83       	std	Z+3, r24	; 0x03
    1676:	20 97       	sbiw	r28, 0x00	; 0
    1678:	71 f0       	breq	.+28     	; 0x1696 <fdevopen+0x4c>
    167a:	d3 87       	std	Z+11, r29	; 0x0b
    167c:	c2 87       	std	Z+10, r28	; 0x0a
    167e:	81 e8       	ldi	r24, 0x81	; 129
    1680:	83 83       	std	Z+3, r24	; 0x03
    1682:	80 91 69 01 	lds	r24, 0x0169
    1686:	90 91 6a 01 	lds	r25, 0x016A
    168a:	00 97       	sbiw	r24, 0x00	; 0
    168c:	21 f4       	brne	.+8      	; 0x1696 <fdevopen+0x4c>
    168e:	f0 93 6a 01 	sts	0x016A, r31
    1692:	e0 93 69 01 	sts	0x0169, r30
    1696:	01 15       	cp	r16, r1
    1698:	11 05       	cpc	r17, r1
    169a:	e1 f0       	breq	.+56     	; 0x16d4 <fdevopen+0x8a>
    169c:	11 87       	std	Z+9, r17	; 0x09
    169e:	00 87       	std	Z+8, r16	; 0x08
    16a0:	83 81       	ldd	r24, Z+3	; 0x03
    16a2:	82 60       	ori	r24, 0x02	; 2
    16a4:	83 83       	std	Z+3, r24	; 0x03
    16a6:	80 91 6b 01 	lds	r24, 0x016B
    16aa:	90 91 6c 01 	lds	r25, 0x016C
    16ae:	00 97       	sbiw	r24, 0x00	; 0
    16b0:	89 f4       	brne	.+34     	; 0x16d4 <fdevopen+0x8a>
    16b2:	f0 93 6c 01 	sts	0x016C, r31
    16b6:	e0 93 6b 01 	sts	0x016B, r30
    16ba:	80 91 6d 01 	lds	r24, 0x016D
    16be:	90 91 6e 01 	lds	r25, 0x016E
    16c2:	00 97       	sbiw	r24, 0x00	; 0
    16c4:	39 f4       	brne	.+14     	; 0x16d4 <fdevopen+0x8a>
    16c6:	f0 93 6e 01 	sts	0x016E, r31
    16ca:	e0 93 6d 01 	sts	0x016D, r30
    16ce:	02 c0       	rjmp	.+4      	; 0x16d4 <fdevopen+0x8a>
    16d0:	20 e0       	ldi	r18, 0x00	; 0
    16d2:	30 e0       	ldi	r19, 0x00	; 0
    16d4:	c9 01       	movw	r24, r18
    16d6:	df 91       	pop	r29
    16d8:	cf 91       	pop	r28
    16da:	1f 91       	pop	r17
    16dc:	0f 91       	pop	r16
    16de:	08 95       	ret

000016e0 <calloc>:
    16e0:	0f 93       	push	r16
    16e2:	1f 93       	push	r17
    16e4:	cf 93       	push	r28
    16e6:	df 93       	push	r29
    16e8:	68 9f       	mul	r22, r24
    16ea:	80 01       	movw	r16, r0
    16ec:	69 9f       	mul	r22, r25
    16ee:	10 0d       	add	r17, r0
    16f0:	78 9f       	mul	r23, r24
    16f2:	10 0d       	add	r17, r0
    16f4:	11 24       	eor	r1, r1
    16f6:	c8 01       	movw	r24, r16
    16f8:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <malloc>
    16fc:	c8 2f       	mov	r28, r24
    16fe:	d9 2f       	mov	r29, r25
    1700:	20 97       	sbiw	r28, 0x00	; 0
    1702:	31 f0       	breq	.+12     	; 0x1710 <calloc+0x30>
    1704:	8c 2f       	mov	r24, r28
    1706:	60 e0       	ldi	r22, 0x00	; 0
    1708:	70 e0       	ldi	r23, 0x00	; 0
    170a:	a8 01       	movw	r20, r16
    170c:	0e 94 8e 0b 	call	0x171c	; 0x171c <memset>
    1710:	ce 01       	movw	r24, r28
    1712:	df 91       	pop	r29
    1714:	cf 91       	pop	r28
    1716:	1f 91       	pop	r17
    1718:	0f 91       	pop	r16
    171a:	08 95       	ret

0000171c <memset>:
    171c:	dc 01       	movw	r26, r24
    171e:	01 c0       	rjmp	.+2      	; 0x1722 <memset+0x6>
    1720:	6d 93       	st	X+, r22
    1722:	41 50       	subi	r20, 0x01	; 1
    1724:	50 40       	sbci	r21, 0x00	; 0
    1726:	e0 f7       	brcc	.-8      	; 0x1720 <memset+0x4>
    1728:	08 95       	ret

0000172a <_exit>:
    172a:	f8 94       	cli

0000172c <__stop_program>:
    172c:	ff cf       	rjmp	.-2      	; 0x172c <__stop_program>
