
Arst.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000048  00800100  000019ca  00001a5e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000019ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000027  00800148  00800148  00001aa6  2**0
                  ALLOC
  3 .stab         000010c8  00000000  00000000  00001aa8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000013d4  00000000  00000000  00002b70  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000358  00000000  00000000  00003f44  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000993  00000000  00000000  0000429c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002119  00000000  00000000  00004c2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000b2e  00000000  00000000  00006d48  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000204c  00000000  00000000  00007876  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000005f0  00000000  00000000  000098c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000f3f  00000000  00000000  00009eb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001632  00000000  00000000  0000adf3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000152  00000000  00000000  0000c425  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000002f8  00000000  00000000  0000c577  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 8d 09 	jmp	0x131a	; 0x131a <__vector_9>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 e5 04 	jmp	0x9ca	; 0x9ca <__vector_13>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ea ec       	ldi	r30, 0xCA	; 202
      7c:	f9 e1       	ldi	r31, 0x19	; 25
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a8 34       	cpi	r26, 0x48	; 72
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	a8 e4       	ldi	r26, 0x48	; 72
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	af 36       	cpi	r26, 0x6F	; 111
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 f6 01 	call	0x3ec	; 0x3ec <main>
      9e:	0c 94 e3 0c 	jmp	0x19c6	; 0x19c6 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <get_io_registers>:

// gets a structure with pointers to the three digital I/O registers associated
// with the specified pin (DDR, PORT, and PIN) along with a bitmask with a
// 1 in the position of the specified pin and 0s everywhere else.
static inline void get_io_registers(struct IOStruct* io, unsigned char pin)
{
      a6:	df 93       	push	r29
      a8:	cf 93       	push	r28
      aa:	00 d0       	rcall	.+0      	; 0xac <get_io_registers+0x6>
      ac:	0f 92       	push	r0
      ae:	cd b7       	in	r28, 0x3d	; 61
      b0:	de b7       	in	r29, 0x3e	; 62
      b2:	9a 83       	std	Y+2, r25	; 0x02
      b4:	89 83       	std	Y+1, r24	; 0x01
      b6:	6b 83       	std	Y+3, r22	; 0x03
	io->pinRegister = 0;
      b8:	89 81       	ldd	r24, Y+1	; 0x01
      ba:	9a 81       	ldd	r25, Y+2	; 0x02
      bc:	fc 01       	movw	r30, r24
      be:	11 82       	std	Z+1, r1	; 0x01
      c0:	10 82       	st	Z, r1
	io->portRegister = 0;
      c2:	89 81       	ldd	r24, Y+1	; 0x01
      c4:	9a 81       	ldd	r25, Y+2	; 0x02
      c6:	fc 01       	movw	r30, r24
      c8:	13 82       	std	Z+3, r1	; 0x03
      ca:	12 82       	std	Z+2, r1	; 0x02
	io->ddrRegister = 0;
      cc:	89 81       	ldd	r24, Y+1	; 0x01
      ce:	9a 81       	ldd	r25, Y+2	; 0x02
      d0:	fc 01       	movw	r30, r24
      d2:	15 82       	std	Z+5, r1	; 0x05
      d4:	14 82       	std	Z+4, r1	; 0x04
	io->bitmask = 0;
      d6:	89 81       	ldd	r24, Y+1	; 0x01
      d8:	9a 81       	ldd	r25, Y+2	; 0x02
      da:	fc 01       	movw	r30, r24
      dc:	16 82       	std	Z+6, r1	; 0x06

	if (pin < 8)			// pin 0 = PD0, ..., 7 = PD7
      de:	8b 81       	ldd	r24, Y+3	; 0x03
      e0:	88 30       	cpi	r24, 0x08	; 8
      e2:	28 f5       	brcc	.+74     	; 0x12e <get_io_registers+0x88>
	{
		io->pinRegister = (unsigned char*)&PIND;
      e4:	89 81       	ldd	r24, Y+1	; 0x01
      e6:	9a 81       	ldd	r25, Y+2	; 0x02
      e8:	29 e2       	ldi	r18, 0x29	; 41
      ea:	30 e0       	ldi	r19, 0x00	; 0
      ec:	fc 01       	movw	r30, r24
      ee:	31 83       	std	Z+1, r19	; 0x01
      f0:	20 83       	st	Z, r18
		io->portRegister = (unsigned char*)&PORTD;
      f2:	89 81       	ldd	r24, Y+1	; 0x01
      f4:	9a 81       	ldd	r25, Y+2	; 0x02
      f6:	2b e2       	ldi	r18, 0x2B	; 43
      f8:	30 e0       	ldi	r19, 0x00	; 0
      fa:	fc 01       	movw	r30, r24
      fc:	33 83       	std	Z+3, r19	; 0x03
      fe:	22 83       	std	Z+2, r18	; 0x02
		io->ddrRegister = (unsigned char*)&DDRD;
     100:	89 81       	ldd	r24, Y+1	; 0x01
     102:	9a 81       	ldd	r25, Y+2	; 0x02
     104:	2a e2       	ldi	r18, 0x2A	; 42
     106:	30 e0       	ldi	r19, 0x00	; 0
     108:	fc 01       	movw	r30, r24
     10a:	35 83       	std	Z+5, r19	; 0x05
     10c:	24 83       	std	Z+4, r18	; 0x04
		io->bitmask = 1 << pin;
     10e:	8b 81       	ldd	r24, Y+3	; 0x03
     110:	28 2f       	mov	r18, r24
     112:	30 e0       	ldi	r19, 0x00	; 0
     114:	81 e0       	ldi	r24, 0x01	; 1
     116:	90 e0       	ldi	r25, 0x00	; 0
     118:	02 c0       	rjmp	.+4      	; 0x11e <get_io_registers+0x78>
     11a:	88 0f       	add	r24, r24
     11c:	99 1f       	adc	r25, r25
     11e:	2a 95       	dec	r18
     120:	e2 f7       	brpl	.-8      	; 0x11a <get_io_registers+0x74>
     122:	28 2f       	mov	r18, r24
     124:	89 81       	ldd	r24, Y+1	; 0x01
     126:	9a 81       	ldd	r25, Y+2	; 0x02
     128:	fc 01       	movw	r30, r24
     12a:	26 83       	std	Z+6, r18	; 0x06
     12c:	55 c0       	rjmp	.+170    	; 0x1d8 <get_io_registers+0x132>
		io->bitmask = 1 << (31 - pin);
	}

#else

	else if (pin < 14)		// pin 8 = PB0, ..., 13 = PB5 (PB6 and PB7 reserved for external clock)
     12e:	8b 81       	ldd	r24, Y+3	; 0x03
     130:	8e 30       	cpi	r24, 0x0E	; 14
     132:	40 f5       	brcc	.+80     	; 0x184 <get_io_registers+0xde>
	{
		io->pinRegister = (unsigned char*)&PINB;
     134:	89 81       	ldd	r24, Y+1	; 0x01
     136:	9a 81       	ldd	r25, Y+2	; 0x02
     138:	23 e2       	ldi	r18, 0x23	; 35
     13a:	30 e0       	ldi	r19, 0x00	; 0
     13c:	fc 01       	movw	r30, r24
     13e:	31 83       	std	Z+1, r19	; 0x01
     140:	20 83       	st	Z, r18
		io->portRegister = (unsigned char*)&PORTB;
     142:	89 81       	ldd	r24, Y+1	; 0x01
     144:	9a 81       	ldd	r25, Y+2	; 0x02
     146:	25 e2       	ldi	r18, 0x25	; 37
     148:	30 e0       	ldi	r19, 0x00	; 0
     14a:	fc 01       	movw	r30, r24
     14c:	33 83       	std	Z+3, r19	; 0x03
     14e:	22 83       	std	Z+2, r18	; 0x02
		io->ddrRegister = (unsigned char*)&DDRB;
     150:	89 81       	ldd	r24, Y+1	; 0x01
     152:	9a 81       	ldd	r25, Y+2	; 0x02
     154:	24 e2       	ldi	r18, 0x24	; 36
     156:	30 e0       	ldi	r19, 0x00	; 0
     158:	fc 01       	movw	r30, r24
     15a:	35 83       	std	Z+5, r19	; 0x05
     15c:	24 83       	std	Z+4, r18	; 0x04
		io->bitmask = 1 << (pin - 8);
     15e:	8b 81       	ldd	r24, Y+3	; 0x03
     160:	88 2f       	mov	r24, r24
     162:	90 e0       	ldi	r25, 0x00	; 0
     164:	9c 01       	movw	r18, r24
     166:	28 50       	subi	r18, 0x08	; 8
     168:	30 40       	sbci	r19, 0x00	; 0
     16a:	81 e0       	ldi	r24, 0x01	; 1
     16c:	90 e0       	ldi	r25, 0x00	; 0
     16e:	02 c0       	rjmp	.+4      	; 0x174 <get_io_registers+0xce>
     170:	88 0f       	add	r24, r24
     172:	99 1f       	adc	r25, r25
     174:	2a 95       	dec	r18
     176:	e2 f7       	brpl	.-8      	; 0x170 <get_io_registers+0xca>
     178:	28 2f       	mov	r18, r24
     17a:	89 81       	ldd	r24, Y+1	; 0x01
     17c:	9a 81       	ldd	r25, Y+2	; 0x02
     17e:	fc 01       	movw	r30, r24
     180:	26 83       	std	Z+6, r18	; 0x06
     182:	2a c0       	rjmp	.+84     	; 0x1d8 <get_io_registers+0x132>
	}
	else if (pin < 21)		// pin 14 = PC0, ..., 19 = PC5 (PC6 is reset, PC7 doesn't exist)
     184:	8b 81       	ldd	r24, Y+3	; 0x03
     186:	85 31       	cpi	r24, 0x15	; 21
     188:	38 f5       	brcc	.+78     	; 0x1d8 <get_io_registers+0x132>
	{
		io->pinRegister = (unsigned char*)&PINC;
     18a:	89 81       	ldd	r24, Y+1	; 0x01
     18c:	9a 81       	ldd	r25, Y+2	; 0x02
     18e:	26 e2       	ldi	r18, 0x26	; 38
     190:	30 e0       	ldi	r19, 0x00	; 0
     192:	fc 01       	movw	r30, r24
     194:	31 83       	std	Z+1, r19	; 0x01
     196:	20 83       	st	Z, r18
		io->portRegister = (unsigned char*)&PORTC;
     198:	89 81       	ldd	r24, Y+1	; 0x01
     19a:	9a 81       	ldd	r25, Y+2	; 0x02
     19c:	28 e2       	ldi	r18, 0x28	; 40
     19e:	30 e0       	ldi	r19, 0x00	; 0
     1a0:	fc 01       	movw	r30, r24
     1a2:	33 83       	std	Z+3, r19	; 0x03
     1a4:	22 83       	std	Z+2, r18	; 0x02
		io->ddrRegister = (unsigned char*)&DDRC;
     1a6:	89 81       	ldd	r24, Y+1	; 0x01
     1a8:	9a 81       	ldd	r25, Y+2	; 0x02
     1aa:	27 e2       	ldi	r18, 0x27	; 39
     1ac:	30 e0       	ldi	r19, 0x00	; 0
     1ae:	fc 01       	movw	r30, r24
     1b0:	35 83       	std	Z+5, r19	; 0x05
     1b2:	24 83       	std	Z+4, r18	; 0x04
		io->bitmask = 1 << (pin - 14);
     1b4:	8b 81       	ldd	r24, Y+3	; 0x03
     1b6:	88 2f       	mov	r24, r24
     1b8:	90 e0       	ldi	r25, 0x00	; 0
     1ba:	9c 01       	movw	r18, r24
     1bc:	2e 50       	subi	r18, 0x0E	; 14
     1be:	30 40       	sbci	r19, 0x00	; 0
     1c0:	81 e0       	ldi	r24, 0x01	; 1
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	02 c0       	rjmp	.+4      	; 0x1ca <get_io_registers+0x124>
     1c6:	88 0f       	add	r24, r24
     1c8:	99 1f       	adc	r25, r25
     1ca:	2a 95       	dec	r18
     1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <get_io_registers+0x120>
     1ce:	28 2f       	mov	r18, r24
     1d0:	89 81       	ldd	r24, Y+1	; 0x01
     1d2:	9a 81       	ldd	r25, Y+2	; 0x02
     1d4:	fc 01       	movw	r30, r24
     1d6:	26 83       	std	Z+6, r18	; 0x06
	}
#endif
}
     1d8:	0f 90       	pop	r0
     1da:	0f 90       	pop	r0
     1dc:	0f 90       	pop	r0
     1de:	cf 91       	pop	r28
     1e0:	df 91       	pop	r29
     1e2:	08 95       	ret

000001e4 <set_data_direction>:


// low-level method for setting the data direction (i.e. input or output) of an pin or set of pins
// described by an IOStruct pointer.
static inline void set_data_direction(struct IOStruct* ioPin, unsigned char val)
{
     1e4:	df 93       	push	r29
     1e6:	cf 93       	push	r28
     1e8:	00 d0       	rcall	.+0      	; 0x1ea <set_data_direction+0x6>
     1ea:	0f 92       	push	r0
     1ec:	cd b7       	in	r28, 0x3d	; 61
     1ee:	de b7       	in	r29, 0x3e	; 62
     1f0:	9a 83       	std	Y+2, r25	; 0x02
     1f2:	89 83       	std	Y+1, r24	; 0x01
     1f4:	6b 83       	std	Y+3, r22	; 0x03
	if (val)
     1f6:	8b 81       	ldd	r24, Y+3	; 0x03
     1f8:	88 23       	and	r24, r24
     1fa:	a1 f0       	breq	.+40     	; 0x224 <set_data_direction+0x40>
		*(ioPin->ddrRegister) |= ioPin->bitmask;
     1fc:	89 81       	ldd	r24, Y+1	; 0x01
     1fe:	9a 81       	ldd	r25, Y+2	; 0x02
     200:	fc 01       	movw	r30, r24
     202:	84 81       	ldd	r24, Z+4	; 0x04
     204:	95 81       	ldd	r25, Z+5	; 0x05
     206:	29 81       	ldd	r18, Y+1	; 0x01
     208:	3a 81       	ldd	r19, Y+2	; 0x02
     20a:	f9 01       	movw	r30, r18
     20c:	24 81       	ldd	r18, Z+4	; 0x04
     20e:	35 81       	ldd	r19, Z+5	; 0x05
     210:	f9 01       	movw	r30, r18
     212:	40 81       	ld	r20, Z
     214:	29 81       	ldd	r18, Y+1	; 0x01
     216:	3a 81       	ldd	r19, Y+2	; 0x02
     218:	f9 01       	movw	r30, r18
     21a:	26 81       	ldd	r18, Z+6	; 0x06
     21c:	24 2b       	or	r18, r20
     21e:	fc 01       	movw	r30, r24
     220:	20 83       	st	Z, r18
     222:	15 c0       	rjmp	.+42     	; 0x24e <set_data_direction+0x6a>
	else
		*(ioPin->ddrRegister) &= ~ioPin->bitmask;
     224:	89 81       	ldd	r24, Y+1	; 0x01
     226:	9a 81       	ldd	r25, Y+2	; 0x02
     228:	fc 01       	movw	r30, r24
     22a:	84 81       	ldd	r24, Z+4	; 0x04
     22c:	95 81       	ldd	r25, Z+5	; 0x05
     22e:	29 81       	ldd	r18, Y+1	; 0x01
     230:	3a 81       	ldd	r19, Y+2	; 0x02
     232:	f9 01       	movw	r30, r18
     234:	24 81       	ldd	r18, Z+4	; 0x04
     236:	35 81       	ldd	r19, Z+5	; 0x05
     238:	f9 01       	movw	r30, r18
     23a:	20 81       	ld	r18, Z
     23c:	42 2f       	mov	r20, r18
     23e:	29 81       	ldd	r18, Y+1	; 0x01
     240:	3a 81       	ldd	r19, Y+2	; 0x02
     242:	f9 01       	movw	r30, r18
     244:	26 81       	ldd	r18, Z+6	; 0x06
     246:	20 95       	com	r18
     248:	24 23       	and	r18, r20
     24a:	fc 01       	movw	r30, r24
     24c:	20 83       	st	Z, r18
}
     24e:	0f 90       	pop	r0
     250:	0f 90       	pop	r0
     252:	0f 90       	pop	r0
     254:	cf 91       	pop	r28
     256:	df 91       	pop	r29
     258:	08 95       	ret

0000025a <set_digital_output_value>:
// described by an IOStruct pointer.  If the pin is an input, this lets you choose between
// setting it as high-impedance (val = 0) or enabling the internal pull-up (val = 1).  If the pin is an
// output, this lets you choose between driving low (val = 0) and driving high (val = 1).
// NOTE: if val is 0xFF (255), this method will toggle the PORT register pin(s).
static inline void set_digital_output_value(struct IOStruct* ioPin, unsigned char val)
{
     25a:	df 93       	push	r29
     25c:	cf 93       	push	r28
     25e:	00 d0       	rcall	.+0      	; 0x260 <set_digital_output_value+0x6>
     260:	0f 92       	push	r0
     262:	cd b7       	in	r28, 0x3d	; 61
     264:	de b7       	in	r29, 0x3e	; 62
     266:	9a 83       	std	Y+2, r25	; 0x02
     268:	89 83       	std	Y+1, r24	; 0x01
     26a:	6b 83       	std	Y+3, r22	; 0x03
	if (val == 0xFF)
     26c:	8b 81       	ldd	r24, Y+3	; 0x03
     26e:	8f 3f       	cpi	r24, 0xFF	; 255
     270:	a1 f4       	brne	.+40     	; 0x29a <set_digital_output_value+0x40>
		*(ioPin->portRegister) ^= ioPin->bitmask;
     272:	89 81       	ldd	r24, Y+1	; 0x01
     274:	9a 81       	ldd	r25, Y+2	; 0x02
     276:	fc 01       	movw	r30, r24
     278:	82 81       	ldd	r24, Z+2	; 0x02
     27a:	93 81       	ldd	r25, Z+3	; 0x03
     27c:	29 81       	ldd	r18, Y+1	; 0x01
     27e:	3a 81       	ldd	r19, Y+2	; 0x02
     280:	f9 01       	movw	r30, r18
     282:	22 81       	ldd	r18, Z+2	; 0x02
     284:	33 81       	ldd	r19, Z+3	; 0x03
     286:	f9 01       	movw	r30, r18
     288:	40 81       	ld	r20, Z
     28a:	29 81       	ldd	r18, Y+1	; 0x01
     28c:	3a 81       	ldd	r19, Y+2	; 0x02
     28e:	f9 01       	movw	r30, r18
     290:	26 81       	ldd	r18, Z+6	; 0x06
     292:	24 27       	eor	r18, r20
     294:	fc 01       	movw	r30, r24
     296:	20 83       	st	Z, r18
     298:	2c c0       	rjmp	.+88     	; 0x2f2 <set_digital_output_value+0x98>
	else if (val)
     29a:	8b 81       	ldd	r24, Y+3	; 0x03
     29c:	88 23       	and	r24, r24
     29e:	a1 f0       	breq	.+40     	; 0x2c8 <set_digital_output_value+0x6e>
		*(ioPin->portRegister) |= ioPin->bitmask;
     2a0:	89 81       	ldd	r24, Y+1	; 0x01
     2a2:	9a 81       	ldd	r25, Y+2	; 0x02
     2a4:	fc 01       	movw	r30, r24
     2a6:	82 81       	ldd	r24, Z+2	; 0x02
     2a8:	93 81       	ldd	r25, Z+3	; 0x03
     2aa:	29 81       	ldd	r18, Y+1	; 0x01
     2ac:	3a 81       	ldd	r19, Y+2	; 0x02
     2ae:	f9 01       	movw	r30, r18
     2b0:	22 81       	ldd	r18, Z+2	; 0x02
     2b2:	33 81       	ldd	r19, Z+3	; 0x03
     2b4:	f9 01       	movw	r30, r18
     2b6:	40 81       	ld	r20, Z
     2b8:	29 81       	ldd	r18, Y+1	; 0x01
     2ba:	3a 81       	ldd	r19, Y+2	; 0x02
     2bc:	f9 01       	movw	r30, r18
     2be:	26 81       	ldd	r18, Z+6	; 0x06
     2c0:	24 2b       	or	r18, r20
     2c2:	fc 01       	movw	r30, r24
     2c4:	20 83       	st	Z, r18
     2c6:	15 c0       	rjmp	.+42     	; 0x2f2 <set_digital_output_value+0x98>
	else
		*(ioPin->portRegister) &= ~ioPin->bitmask;
     2c8:	89 81       	ldd	r24, Y+1	; 0x01
     2ca:	9a 81       	ldd	r25, Y+2	; 0x02
     2cc:	fc 01       	movw	r30, r24
     2ce:	82 81       	ldd	r24, Z+2	; 0x02
     2d0:	93 81       	ldd	r25, Z+3	; 0x03
     2d2:	29 81       	ldd	r18, Y+1	; 0x01
     2d4:	3a 81       	ldd	r19, Y+2	; 0x02
     2d6:	f9 01       	movw	r30, r18
     2d8:	22 81       	ldd	r18, Z+2	; 0x02
     2da:	33 81       	ldd	r19, Z+3	; 0x03
     2dc:	f9 01       	movw	r30, r18
     2de:	20 81       	ld	r18, Z
     2e0:	42 2f       	mov	r20, r18
     2e2:	29 81       	ldd	r18, Y+1	; 0x01
     2e4:	3a 81       	ldd	r19, Y+2	; 0x02
     2e6:	f9 01       	movw	r30, r18
     2e8:	26 81       	ldd	r18, Z+6	; 0x06
     2ea:	20 95       	com	r18
     2ec:	24 23       	and	r18, r20
     2ee:	fc 01       	movw	r30, r24
     2f0:	20 83       	st	Z, r18
}
     2f2:	0f 90       	pop	r0
     2f4:	0f 90       	pop	r0
     2f6:	0f 90       	pop	r0
     2f8:	cf 91       	pop	r28
     2fa:	df 91       	pop	r29
     2fc:	08 95       	ret

000002fe <set_digital_output>:
// high-level method for setting the specified pin as an output with the specified output state.
// An outputState value of 0 will cause the pin to drive low; a value of 1 will cause the pin to 
// drive high.  A value of 0xFF (255) will toggle the output state of the pin (i.e. high -> low and
// low -> high).
static inline void set_digital_output(unsigned char pin, unsigned char outputState)
{
     2fe:	df 93       	push	r29
     300:	cf 93       	push	r28
     302:	cd b7       	in	r28, 0x3d	; 61
     304:	de b7       	in	r29, 0x3e	; 62
     306:	29 97       	sbiw	r28, 0x09	; 9
     308:	0f b6       	in	r0, 0x3f	; 63
     30a:	f8 94       	cli
     30c:	de bf       	out	0x3e, r29	; 62
     30e:	0f be       	out	0x3f, r0	; 63
     310:	cd bf       	out	0x3d, r28	; 61
     312:	88 87       	std	Y+8, r24	; 0x08
     314:	69 87       	std	Y+9, r22	; 0x09
	struct IOStruct registers;
	get_io_registers(&registers, pin);
     316:	ce 01       	movw	r24, r28
     318:	01 96       	adiw	r24, 0x01	; 1
     31a:	68 85       	ldd	r22, Y+8	; 0x08
     31c:	0e 94 53 00 	call	0xa6	; 0xa6 <get_io_registers>
	set_digital_output_value(&registers, outputState);
     320:	ce 01       	movw	r24, r28
     322:	01 96       	adiw	r24, 0x01	; 1
     324:	69 85       	ldd	r22, Y+9	; 0x09
     326:	0e 94 2d 01 	call	0x25a	; 0x25a <set_digital_output_value>
	set_data_direction(&registers, 1);
     32a:	ce 01       	movw	r24, r28
     32c:	01 96       	adiw	r24, 0x01	; 1
     32e:	61 e0       	ldi	r22, 0x01	; 1
     330:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <set_data_direction>
}
     334:	29 96       	adiw	r28, 0x09	; 9
     336:	0f b6       	in	r0, 0x3f	; 63
     338:	f8 94       	cli
     33a:	de bf       	out	0x3e, r29	; 62
     33c:	0f be       	out	0x3f, r0	; 63
     33e:	cd bf       	out	0x3d, r28	; 61
     340:	cf 91       	pop	r28
     342:	df 91       	pop	r29
     344:	08 95       	ret

00000346 <red_led>:
// turns the target LED off if 'on' is zero, else this method
// turns the LED on.  Note that the Baby Orangutan B only has
// one LED (the red one), so green() will just drive I/O line PD7
// high or low, depending on the argument.
static inline void red_led(unsigned char on)
{
     346:	df 93       	push	r29
     348:	cf 93       	push	r28
     34a:	0f 92       	push	r0
     34c:	cd b7       	in	r28, 0x3d	; 61
     34e:	de b7       	in	r29, 0x3e	; 62
     350:	89 83       	std	Y+1, r24	; 0x01
	else if (on == LOW)
		set_digital_output(RED_LED, HIGH);
	else
		set_digital_output(RED_LED, LOW);
	#else					// else red LED turns on when driven high
	set_digital_output(RED_LED, on);
     352:	81 e0       	ldi	r24, 0x01	; 1
     354:	69 81       	ldd	r22, Y+1	; 0x01
     356:	0e 94 7f 01 	call	0x2fe	; 0x2fe <set_digital_output>
	#endif
}
     35a:	0f 90       	pop	r0
     35c:	cf 91       	pop	r28
     35e:	df 91       	pop	r29
     360:	08 95       	ret

00000362 <green_led>:
	
static inline void green_led(unsigned char on)
{
     362:	df 93       	push	r29
     364:	cf 93       	push	r28
     366:	0f 92       	push	r0
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	89 83       	std	Y+1, r24	; 0x01
	set_digital_output(GREEN_LED, on);
     36e:	87 e0       	ldi	r24, 0x07	; 7
     370:	69 81       	ldd	r22, Y+1	; 0x01
     372:	0e 94 7f 01 	call	0x2fe	; 0x2fe <set_digital_output>
}
     376:	0f 90       	pop	r0
     378:	cf 91       	pop	r28
     37a:	df 91       	pop	r29
     37c:	08 95       	ret

0000037e <_ZL33_pololu_atmel_studio_6_workaroundv>:

#ifndef _POLOLU_ATMEL_STUDIO_6_WORKAROUND
#define _POLOLU_ATMEL_STUDIO_6_WORKAROUND

static void __attribute__((used)) _pololu_atmel_studio_6_workaround(void)
{
     37e:	df 93       	push	r29
     380:	cf 93       	push	r28
     382:	cd b7       	in	r28, 0x3d	; 61
     384:	de b7       	in	r29, 0x3e	; 62
    static volatile unsigned char w = 1;
    w++;
     386:	80 91 1d 01 	lds	r24, 0x011D
     38a:	8f 5f       	subi	r24, 0xFF	; 255
     38c:	80 93 1d 01 	sts	0x011D, r24
}
     390:	cf 91       	pop	r28
     392:	df 91       	pop	r29
     394:	08 95       	ret

00000396 <_Z10debug_putsPKc>:

/* This port correponds to the "-R 0x22,-" command line option. */
#define special_input_port  (*((volatile char *)0x22))

/* Poll the specified string out the debug port. */
void debug_puts(const char *str) {
     396:	df 93       	push	r29
     398:	cf 93       	push	r28
     39a:	00 d0       	rcall	.+0      	; 0x39c <_Z10debug_putsPKc+0x6>
     39c:	00 d0       	rcall	.+0      	; 0x39e <_Z10debug_putsPKc+0x8>
     39e:	cd b7       	in	r28, 0x3d	; 61
     3a0:	de b7       	in	r29, 0x3e	; 62
     3a2:	9c 83       	std	Y+4, r25	; 0x04
     3a4:	8b 83       	std	Y+3, r24	; 0x03
	const char *c;

	for(c = str; *c; c++) {
     3a6:	8b 81       	ldd	r24, Y+3	; 0x03
     3a8:	9c 81       	ldd	r25, Y+4	; 0x04
     3aa:	9a 83       	std	Y+2, r25	; 0x02
     3ac:	89 83       	std	Y+1, r24	; 0x01
     3ae:	0d c0       	rjmp	.+26     	; 0x3ca <_Z10debug_putsPKc+0x34>
		special_output_port = *c;
     3b0:	80 e2       	ldi	r24, 0x20	; 32
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	29 81       	ldd	r18, Y+1	; 0x01
     3b6:	3a 81       	ldd	r19, Y+2	; 0x02
     3b8:	f9 01       	movw	r30, r18
     3ba:	20 81       	ld	r18, Z
     3bc:	fc 01       	movw	r30, r24
     3be:	20 83       	st	Z, r18

/* Poll the specified string out the debug port. */
void debug_puts(const char *str) {
	const char *c;

	for(c = str; *c; c++) {
     3c0:	89 81       	ldd	r24, Y+1	; 0x01
     3c2:	9a 81       	ldd	r25, Y+2	; 0x02
     3c4:	01 96       	adiw	r24, 0x01	; 1
     3c6:	9a 83       	std	Y+2, r25	; 0x02
     3c8:	89 83       	std	Y+1, r24	; 0x01
     3ca:	89 81       	ldd	r24, Y+1	; 0x01
     3cc:	9a 81       	ldd	r25, Y+2	; 0x02
     3ce:	fc 01       	movw	r30, r24
     3d0:	90 81       	ld	r25, Z
     3d2:	81 e0       	ldi	r24, 0x01	; 1
     3d4:	99 23       	and	r25, r25
     3d6:	09 f4       	brne	.+2      	; 0x3da <_Z10debug_putsPKc+0x44>
     3d8:	80 e0       	ldi	r24, 0x00	; 0
     3da:	88 23       	and	r24, r24
     3dc:	49 f7       	brne	.-46     	; 0x3b0 <_Z10debug_putsPKc+0x1a>
		special_output_port = *c;
	}
}
     3de:	0f 90       	pop	r0
     3e0:	0f 90       	pop	r0
     3e2:	0f 90       	pop	r0
     3e4:	0f 90       	pop	r0
     3e6:	cf 91       	pop	r28
     3e8:	df 91       	pop	r29
     3ea:	08 95       	ret

000003ec <main>:

int main ()
{
     3ec:	df 93       	push	r29
     3ee:	cf 93       	push	r28
     3f0:	cd b7       	in	r28, 0x3d	; 61
     3f2:	de b7       	in	r29, 0x3e	; 62
	print("Hello!");
     3f4:	80 e0       	ldi	r24, 0x00	; 0
     3f6:	91 e0       	ldi	r25, 0x01	; 1
     3f8:	0e 94 02 07 	call	0xe04	; 0xe04 <print>
	debug_puts("debug hello");
     3fc:	87 e0       	ldi	r24, 0x07	; 7
     3fe:	91 e0       	ldi	r25, 0x01	; 1
     400:	0e 94 cb 01 	call	0x396	; 0x396 <_Z10debug_putsPKc>

	play("L16 ceg>c");
     404:	83 e1       	ldi	r24, 0x13	; 19
     406:	91 e0       	ldi	r25, 0x01	; 1
     408:	0e 94 59 05 	call	0xab2	; 0xab2 <play>

	while(1)
	{
		red_led(0);
     40c:	80 e0       	ldi	r24, 0x00	; 0
     40e:	0e 94 a3 01 	call	0x346	; 0x346 <red_led>
		green_led(1);
     412:	81 e0       	ldi	r24, 0x01	; 1
     414:	0e 94 b1 01 	call	0x362	; 0x362 <green_led>

		delay_ms(100);
     418:	84 e6       	ldi	r24, 0x64	; 100
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	0e 94 ff 09 	call	0x13fe	; 0x13fe <delay_ms>

		red_led(1);
     420:	81 e0       	ldi	r24, 0x01	; 1
     422:	0e 94 a3 01 	call	0x346	; 0x346 <red_led>
		green_led(0);
     426:	80 e0       	ldi	r24, 0x00	; 0
     428:	0e 94 b1 01 	call	0x362	; 0x362 <green_led>

		delay_ms(100);
     42c:	84 e6       	ldi	r24, 0x64	; 100
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	0e 94 ff 09 	call	0x13fe	; 0x13fe <delay_ms>
	print("Hello!");
	debug_puts("debug hello");

	play("L16 ceg>c");

	while(1)
     434:	eb cf       	rjmp	.-42     	; 0x40c <main+0x20>

00000436 <_ZL16currentCharacterv>:
static char currentCharacter()
{
	char c = 0;
	do
	{
		if(use_program_space)
     436:	90 91 4d 01 	lds	r25, 0x014D
     43a:	e0 91 49 01 	lds	r30, 0x0149
     43e:	f0 91 4a 01 	lds	r31, 0x014A
     442:	99 23       	and	r25, r25
     444:	11 f0       	breq	.+4      	; 0x44a <_ZL16currentCharacterv+0x14>
			c = pgm_read_byte(buzzerSequence);
     446:	84 91       	lpm	r24, Z+
     448:	01 c0       	rjmp	.+2      	; 0x44c <_ZL16currentCharacterv+0x16>
		else
			c = *buzzerSequence;
     44a:	80 81       	ld	r24, Z

		if(c >= 'A' && c <= 'Z')
     44c:	28 2f       	mov	r18, r24
     44e:	21 54       	subi	r18, 0x41	; 65
     450:	2a 31       	cpi	r18, 0x1A	; 26
     452:	10 f4       	brcc	.+4      	; 0x458 <_ZL16currentCharacterv+0x22>
			c += 'a'-'A';
     454:	80 5e       	subi	r24, 0xE0	; 224
     456:	08 95       	ret
// Gets the current character, converting to lower-case and skipping
// spaces.  For any spaces, this automatically increments sequence!
static char currentCharacter()
{
	char c = 0;
	do
     458:	80 32       	cpi	r24, 0x20	; 32
     45a:	71 f4       	brne	.+28     	; 0x478 <_ZL16currentCharacterv+0x42>
     45c:	20 91 49 01 	lds	r18, 0x0149
     460:	30 91 4a 01 	lds	r19, 0x014A
     464:	a9 01       	movw	r20, r18
     466:	4f 5f       	subi	r20, 0xFF	; 255
     468:	5f 4f       	sbci	r21, 0xFF	; 255
     46a:	50 93 4a 01 	sts	0x014A, r21
     46e:	40 93 49 01 	sts	0x0149, r20
     472:	21 15       	cp	r18, r1
     474:	31 05       	cpc	r19, r1
     476:	09 f7       	brne	.-62     	; 0x43a <_ZL16currentCharacterv+0x4>
		if(c >= 'A' && c <= 'Z')
			c += 'a'-'A';
	} while(c == ' ' && (buzzerSequence ++));

	return c;
}
     478:	08 95       	ret

0000047a <_ZL9getNumberv>:

// Returns the numerical argument specified at buzzerSequence[0] and
// increments sequence to point to the character immediately after the
// argument.
static unsigned int getNumber()
{
     47a:	cf 93       	push	r28
     47c:	df 93       	push	r29
	unsigned int arg = 0;

	// read all digits, one at a time
	char c = currentCharacter();
     47e:	0e 94 1b 02 	call	0x436	; 0x436 <_ZL16currentCharacterv>
// Returns the numerical argument specified at buzzerSequence[0] and
// increments sequence to point to the character immediately after the
// argument.
static unsigned int getNumber()
{
	unsigned int arg = 0;
     482:	c0 e0       	ldi	r28, 0x00	; 0
     484:	d0 e0       	ldi	r29, 0x00	; 0

	// read all digits, one at a time
	char c = currentCharacter();
	while(c >= '0' && c <= '9')
     486:	1b c0       	rjmp	.+54     	; 0x4be <_ZL9getNumberv+0x44>
	{
		arg *= 10;
     488:	9e 01       	movw	r18, r28
     48a:	22 0f       	add	r18, r18
     48c:	33 1f       	adc	r19, r19
     48e:	93 e0       	ldi	r25, 0x03	; 3
     490:	cc 0f       	add	r28, r28
     492:	dd 1f       	adc	r29, r29
     494:	9a 95       	dec	r25
     496:	e1 f7       	brne	.-8      	; 0x490 <_ZL9getNumberv+0x16>
     498:	c2 0f       	add	r28, r18
     49a:	d3 1f       	adc	r29, r19
		arg += c-'0';
     49c:	99 27       	eor	r25, r25
     49e:	87 fd       	sbrc	r24, 7
     4a0:	90 95       	com	r25
     4a2:	c8 0f       	add	r28, r24
     4a4:	d9 1f       	adc	r29, r25
     4a6:	e0 97       	sbiw	r28, 0x30	; 48
		buzzerSequence ++;
     4a8:	80 91 49 01 	lds	r24, 0x0149
     4ac:	90 91 4a 01 	lds	r25, 0x014A
     4b0:	01 96       	adiw	r24, 0x01	; 1
     4b2:	90 93 4a 01 	sts	0x014A, r25
     4b6:	80 93 49 01 	sts	0x0149, r24
		c = currentCharacter();
     4ba:	0e 94 1b 02 	call	0x436	; 0x436 <_ZL16currentCharacterv>
{
	unsigned int arg = 0;

	// read all digits, one at a time
	char c = currentCharacter();
	while(c >= '0' && c <= '9')
     4be:	98 2f       	mov	r25, r24
     4c0:	90 53       	subi	r25, 0x30	; 48
     4c2:	9a 30       	cpi	r25, 0x0A	; 10
     4c4:	08 f3       	brcs	.-62     	; 0x488 <_ZL9getNumberv+0xe>
		buzzerSequence ++;
		c = currentCharacter();
	}

	return arg;
}
     4c6:	ce 01       	movw	r24, r28
     4c8:	df 91       	pop	r29
     4ca:	cf 91       	pop	r28
     4cc:	08 95       	ret

000004ce <_ZN15OrangutanBuzzerC1Ev>:

// constructor

OrangutanBuzzer::OrangutanBuzzer()
{
}
     4ce:	08 95       	ret

000004d0 <_ZN15OrangutanBuzzer5init2Ev>:
}

// initializes timer1 for buzzer control
void OrangutanBuzzer::init2()
{
	DISABLE_TIMER1_INTERRUPT();	// disable all timer1 interrupts
     4d0:	10 92 6f 00 	sts	0x006F, r1
	TCCR1A = 0x03;	// bits 6 and 7 clear: normal port op., OC1A disconnected
					// bit 4 and 5 clear: normal port op., OC1B disconnected
					// bits 2 and 3: not used
					// bits 0 & 1 set: combine with bits 3 & 4 of TCCR1B...
#else
	TCCR1A = 0x23;	// bits 6 and 7 clear: normal port op., OC1A disconnected
     4d4:	83 e2       	ldi	r24, 0x23	; 35
     4d6:	80 93 80 00 	sts	0x0080, r24
					//                     set OC1B on comp match when downcounting
					// bits 2 and 3: not used
					// bits 0 & 1 set: combine with bits 3 & 4 of TCCR1B...
#endif

	TCCR1B = 0x11;	// bit 7 clear: input capture noise canceler disabled
     4da:	81 e1       	ldi	r24, 0x11	; 17
     4dc:	80 93 81 00 	sts	0x0081, r24
					// bit 3 clear and 4 set: combine with bits 0 & 1 of TCCR1A to
					// 		select waveform generation mode 11, phase-correct PWM,
					//		TOP = OCR1A, OCR1B set at TOP, TOV1 flag set at TOP
					// bit 0 set, 1-2 clear: timer clock = IO clk (prescaler 1)

	TCCR1C = 0x00;	// bit 7 clear: no force output compare for channel A
     4e0:	10 92 82 00 	sts	0x0082, r1
	//   on compare match, set at TOP; OC1B is disconnected.
	//   Note: if the PWM frequency and duty cycle are changed, the first
	//   cycle of the new frequency will be at the old duty cycle, since
	//   the duty cycle (OCR1A) is not updated until TOP.

	OCR1A = (F_CPU/2) / 1000;	// set TOP for freq = 1 kHz
     4e4:	80 e1       	ldi	r24, 0x10	; 16
     4e6:	97 e2       	ldi	r25, 0x27	; 39
     4e8:	90 93 89 00 	sts	0x0089, r25
     4ec:	80 93 88 00 	sts	0x0088, r24
	OCR1B = 0;					// set 0% duty cycle
     4f0:	10 92 8b 00 	sts	0x008B, r1
     4f4:	10 92 8a 00 	sts	0x008A, r1
	
#ifndef _ORANGUTAN_X2
	BUZZER_DDR |= BUZZER;		// buzzer pin set as an output
     4f8:	22 9a       	sbi	0x04, 2	; 4
#endif
	sei();
     4fa:	78 94       	sei
}
     4fc:	08 95       	ret

000004fe <_ZN15OrangutanBuzzer4initEv>:
extern unsigned char buzzerInitialized;

// this is called by playFrequency()
inline void OrangutanBuzzer::init()
{
	if (!buzzerInitialized)
     4fe:	80 91 48 01 	lds	r24, 0x0148
     502:	88 23       	and	r24, r24
     504:	29 f4       	brne	.+10     	; 0x510 <_ZN15OrangutanBuzzer4initEv+0x12>
	{
		buzzerInitialized = 1;
     506:	81 e0       	ldi	r24, 0x01	; 1
     508:	80 93 48 01 	sts	0x0148, r24
		init2();
     50c:	0e 94 68 02 	call	0x4d0	; 0x4d0 <_ZN15OrangutanBuzzer5init2Ev>
     510:	08 95       	ret

00000512 <_ZN15OrangutanBuzzer13playFrequencyEjjh>:
//   greater than 1 kHz.  For example, the max duration you can use for a
//   frequency of 10 kHz is 6553 ms.  If you use a duration longer than this,
//   you will cause an integer overflow that produces unexpected behavior.
void OrangutanBuzzer::playFrequency(unsigned int freq, unsigned int dur, 
				   					unsigned char volume)
{
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ef e8       	ldi	r30, 0x8F	; 143
     518:	f2 e0       	ldi	r31, 0x02	; 2
     51a:	0c 94 11 0b 	jmp	0x1622	; 0x1622 <__prologue_saves__+0x10>
     51e:	8c 01       	movw	r16, r24
     520:	5b 01       	movw	r10, r22
     522:	e4 2e       	mov	r14, r20
	init();		// initializes the buzzer if necessary
     524:	0e 94 7f 02 	call	0x4fe	; 0x4fe <_ZN15OrangutanBuzzer4initEv>
	buzzerFinished = 0;
     528:	10 92 1e 01 	sts	0x011E, r1
	unsigned int newTCCR1B;
	unsigned int timeout;
	unsigned char multiplier = 1;
	

	if (freq & DIV_BY_10)		// if frequency's DIV_BY_10 bit is set
     52c:	17 ff       	sbrs	r17, 7
     52e:	04 c0       	rjmp	.+8      	; 0x538 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x26>
	{							//  then the true frequency is freq/10
		multiplier = 10;		//  (gives higher resolution for small freqs)
		freq &= ~DIV_BY_10;		// clear DIV_BY_10 bit
     530:	1f 77       	andi	r17, 0x7F	; 127
	unsigned char multiplier = 1;
	

	if (freq & DIV_BY_10)		// if frequency's DIV_BY_10 bit is set
	{							//  then the true frequency is freq/10
		multiplier = 10;		//  (gives higher resolution for small freqs)
     532:	fa e0       	ldi	r31, 0x0A	; 10
     534:	ff 2e       	mov	r15, r31
     536:	02 c0       	rjmp	.+4      	; 0x53c <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x2a>
#else

	unsigned int newOCR1A;
	unsigned int newTCCR1B;
	unsigned int timeout;
	unsigned char multiplier = 1;
     538:	ff 24       	eor	r15, r15
     53a:	f3 94       	inc	r15
	{							//  then the true frequency is freq/10
		multiplier = 10;		//  (gives higher resolution for small freqs)
		freq &= ~DIV_BY_10;		// clear DIV_BY_10 bit
	}

	newTCCR1B = TCCR1B & 0xF8;	// clear clock select bits
     53c:	c0 90 81 00 	lds	r12, 0x0081
     540:	dd 24       	eor	r13, r13
     542:	28 ef       	ldi	r18, 0xF8	; 248
     544:	c2 22       	and	r12, r18
     546:	dd 24       	eor	r13, r13

	// calculate necessary clock source and counter top value to get freq
	if (freq > 200 * ((unsigned int)multiplier))	// clock prescaler = 1
     548:	88 ec       	ldi	r24, 0xC8	; 200
     54a:	6f 2d       	mov	r22, r15
     54c:	68 9f       	mul	r22, r24
     54e:	c0 01       	movw	r24, r0
     550:	11 24       	eor	r1, r1
     552:	80 17       	cp	r24, r16
     554:	91 07       	cpc	r25, r17
     556:	d8 f4       	brcc	.+54     	; 0x58e <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x7c>
     558:	e8 01       	movw	r28, r16
     55a:	77 e2       	ldi	r23, 0x27	; 39
     55c:	01 31       	cpi	r16, 0x11	; 17
     55e:	17 07       	cpc	r17, r23
     560:	10 f0       	brcs	.+4      	; 0x566 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x54>
     562:	c0 e1       	ldi	r28, 0x10	; 16
     564:	d7 e2       	ldi	r29, 0x27	; 39
	{
		if (freq > 10000)
			freq = 10000;			// max frequency allowed is 10kHz

		newOCR1A = (unsigned int)((10000000UL + (freq >> 1)) / freq);
     566:	be 01       	movw	r22, r28
     568:	76 95       	lsr	r23
     56a:	67 95       	ror	r22
     56c:	80 e0       	ldi	r24, 0x00	; 0
     56e:	90 e0       	ldi	r25, 0x00	; 0
     570:	60 58       	subi	r22, 0x80	; 128
     572:	79 46       	sbci	r23, 0x69	; 105
     574:	87 46       	sbci	r24, 0x67	; 103
     576:	9f 4f       	sbci	r25, 0xFF	; 255
     578:	9e 01       	movw	r18, r28
     57a:	40 e0       	ldi	r20, 0x00	; 0
     57c:	50 e0       	ldi	r21, 0x00	; 0
     57e:	0e 94 cc 0a 	call	0x1598	; 0x1598 <__udivmodsi4>
     582:	89 01       	movw	r16, r18

		// timer1 clock select:
		newTCCR1B |= TIMER1_CLK_1;	// select IO clk (prescaler = 1)
     584:	81 e0       	ldi	r24, 0x01	; 1
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	c8 2a       	or	r12, r24
     58a:	d9 2a       	or	r13, r25
     58c:	28 c0       	rjmp	.+80     	; 0x5de <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xcc>
     58e:	98 e2       	ldi	r25, 0x28	; 40
     590:	f9 9e       	mul	r15, r25
     592:	90 2d       	mov	r25, r0
     594:	11 24       	eor	r1, r1
     596:	80 e0       	ldi	r24, 0x00	; 0
     598:	c9 2f       	mov	r28, r25
     59a:	d8 2f       	mov	r29, r24
     59c:	c0 17       	cp	r28, r16
     59e:	d1 07       	cpc	r29, r17
     5a0:	08 f4       	brcc	.+2      	; 0x5a4 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x92>
     5a2:	e8 01       	movw	r28, r16
     5a4:	be 01       	movw	r22, r28
     5a6:	76 95       	lsr	r23
     5a8:	67 95       	ror	r22
     5aa:	9e 01       	movw	r18, r28
     5ac:	40 e0       	ldi	r20, 0x00	; 0
     5ae:	50 e0       	ldi	r21, 0x00	; 0
		unsigned char val = 40 * multiplier;
		if (freq < val)				// min frequency allowed is 40 Hz
			freq = val;

		// set top (frequency):
		if (multiplier == 10)
     5b0:	9f 2d       	mov	r25, r15
     5b2:	9a 30       	cpi	r25, 0x0A	; 10
     5b4:	39 f4       	brne	.+14     	; 0x5c4 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xb2>
			newOCR1A = (unsigned int)((12500000UL + (freq >> 1))/ freq);
     5b6:	80 e0       	ldi	r24, 0x00	; 0
     5b8:	90 e0       	ldi	r25, 0x00	; 0
     5ba:	60 5e       	subi	r22, 0xE0	; 224
     5bc:	73 44       	sbci	r23, 0x43	; 67
     5be:	81 44       	sbci	r24, 0x41	; 65
     5c0:	9f 4f       	sbci	r25, 0xFF	; 255
     5c2:	06 c0       	rjmp	.+12     	; 0x5d0 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xbe>
		else
			newOCR1A = (unsigned int)((1250000UL + (freq >> 1)) / freq);
     5c4:	80 e0       	ldi	r24, 0x00	; 0
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	60 53       	subi	r22, 0x30	; 48
     5ca:	7d 4e       	sbci	r23, 0xED	; 237
     5cc:	8c 4e       	sbci	r24, 0xEC	; 236
     5ce:	9f 4f       	sbci	r25, 0xFF	; 255
     5d0:	0e 94 cc 0a 	call	0x1598	; 0x1598 <__udivmodsi4>
     5d4:	89 01       	movw	r16, r18

		// timer1 clock select
		newTCCR1B |= TIMER1_CLK_8;	// select IO clk / 8
     5d6:	62 e0       	ldi	r22, 0x02	; 2
     5d8:	70 e0       	ldi	r23, 0x00	; 0
     5da:	c6 2a       	or	r12, r22
     5dc:	d7 2a       	or	r13, r23
	}


	// set timeout (duration):
	if (multiplier == 10)
     5de:	7f 2d       	mov	r23, r15
     5e0:	7a 30       	cpi	r23, 0x0A	; 10
     5e2:	39 f4       	brne	.+14     	; 0x5f2 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xe0>
		freq = (freq + 5) / 10;
     5e4:	ce 01       	movw	r24, r28
     5e6:	05 96       	adiw	r24, 0x05	; 5
     5e8:	6a e0       	ldi	r22, 0x0A	; 10
     5ea:	70 e0       	ldi	r23, 0x00	; 0
     5ec:	0e 94 b8 0a 	call	0x1570	; 0x1570 <__udivmodhi4>
     5f0:	eb 01       	movw	r28, r22

	if (freq == 1000)
     5f2:	83 e0       	ldi	r24, 0x03	; 3
     5f4:	c8 3e       	cpi	r28, 0xE8	; 232
     5f6:	d8 07       	cpc	r29, r24
     5f8:	79 f0       	breq	.+30     	; 0x618 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x106>
		timeout = dur;	// duration for silent notes is exact
	else
		timeout = (unsigned int)((long)dur * freq / 1000);
     5fa:	be 01       	movw	r22, r28
     5fc:	80 e0       	ldi	r24, 0x00	; 0
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	95 01       	movw	r18, r10
     602:	40 e0       	ldi	r20, 0x00	; 0
     604:	50 e0       	ldi	r21, 0x00	; 0
     606:	0e 94 8d 0a 	call	0x151a	; 0x151a <__mulsi3>
     60a:	28 ee       	ldi	r18, 0xE8	; 232
     60c:	33 e0       	ldi	r19, 0x03	; 3
     60e:	40 e0       	ldi	r20, 0x00	; 0
     610:	50 e0       	ldi	r21, 0x00	; 0
     612:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <__divmodsi4>
     616:	01 c0       	rjmp	.+2      	; 0x61a <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x108>
	// set timeout (duration):
	if (multiplier == 10)
		freq = (freq + 5) / 10;

	if (freq == 1000)
		timeout = dur;	// duration for silent notes is exact
     618:	95 01       	movw	r18, r10
		timeout = (unsigned int)((long)dur * freq / 1000);
	
	if (volume > 15)
		volume = 15;

	DISABLE_TIMER1_INTERRUPT();			// disable interrupts while writing 
     61a:	10 92 6f 00 	sts	0x006F, r1
										//  to 16-bit registers
	TCCR1B = newTCCR1B;					// select timer 1 clock prescaler
     61e:	c0 92 81 00 	sts	0x0081, r12
	OCR1A = newOCR1A;					// set timer 1 pwm frequency
     622:	10 93 89 00 	sts	0x0089, r17
     626:	00 93 88 00 	sts	0x0088, r16
	OCR1B = OCR1A >> (16 - volume);	// set duty cycle (volume)
     62a:	40 91 88 00 	lds	r20, 0x0088
     62e:	50 91 89 00 	lds	r21, 0x0089
     632:	6e 2d       	mov	r22, r14
     634:	60 31       	cpi	r22, 0x10	; 16
     636:	08 f0       	brcs	.+2      	; 0x63a <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x128>
     638:	6f e0       	ldi	r22, 0x0F	; 15
     63a:	80 e1       	ldi	r24, 0x10	; 16
     63c:	90 e0       	ldi	r25, 0x00	; 0
     63e:	86 1b       	sub	r24, r22
     640:	91 09       	sbc	r25, r1
     642:	ba 01       	movw	r22, r20
     644:	02 c0       	rjmp	.+4      	; 0x64a <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x138>
     646:	76 95       	lsr	r23
     648:	67 95       	ror	r22
     64a:	8a 95       	dec	r24
     64c:	e2 f7       	brpl	.-8      	; 0x646 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x134>
     64e:	70 93 8b 00 	sts	0x008B, r23
     652:	60 93 8a 00 	sts	0x008A, r22
	buzzerTimeout = timeout;			// set buzzer duration
     656:	30 93 50 01 	sts	0x0150, r19
     65a:	20 93 4f 01 	sts	0x014F, r18
	
#endif // _ORANGUTAN_X2

	TIFR1 |= 0xFF;						// clear any pending t1 overflow int.
     65e:	86 b3       	in	r24, 0x16	; 22
     660:	8f ef       	ldi	r24, 0xFF	; 255
     662:	86 bb       	out	0x16, r24	; 22
	ENABLE_TIMER1_INTERRUPT();			// this is the only place the t1
     664:	81 e0       	ldi	r24, 0x01	; 1
     666:	80 93 6f 00 	sts	0x006F, r24
										//  overflow is enabled unless using X2
										
}
     66a:	cd b7       	in	r28, 0x3d	; 61
     66c:	de b7       	in	r29, 0x3e	; 62
     66e:	ea e0       	ldi	r30, 0x0A	; 10
     670:	0c 94 2d 0b 	jmp	0x165a	; 0x165a <__epilogue_restores__+0x10>

00000674 <play_frequency>:


extern "C" void play_frequency(unsigned int freq, unsigned int dur, 
							   unsigned char volume)
{
	OrangutanBuzzer::playFrequency(freq, dur, volume);
     674:	0e 94 89 02 	call	0x512	; 0x512 <_ZN15OrangutanBuzzer13playFrequencyEjjh>
}
     678:	08 95       	ret

0000067a <_ZN15OrangutanBuzzer8playNoteEhjh>:
//  greater than 1 kHz.  For example, the max duration you can use for a
//  frequency of 10 kHz is 6553 ms.  If you use a duration longer than this,
//  you will cause an integer overflow that produces unexpected behavior.
void OrangutanBuzzer::playNote(unsigned char note, unsigned int dur,
							   unsigned char volume)
{
     67a:	9b 01       	movw	r18, r22
#else

	unsigned int freq = 0;
	unsigned char offset_note = note - 16;

	if (note == SILENT_NOTE || volume == 0)
     67c:	8f 3f       	cpi	r24, 0xFF	; 255
     67e:	11 f0       	breq	.+4      	; 0x684 <_ZN15OrangutanBuzzer8playNoteEhjh+0xa>
     680:	44 23       	and	r20, r20
     682:	29 f4       	brne	.+10     	; 0x68e <_ZN15OrangutanBuzzer8playNoteEhjh+0x14>
	{
		freq = 1000;	// silent notes => use 1kHz freq (for cycle counter)
		playFrequency(freq, dur, 0);
     684:	88 ee       	ldi	r24, 0xE8	; 232
     686:	93 e0       	ldi	r25, 0x03	; 3
     688:	b9 01       	movw	r22, r18
     68a:	40 e0       	ldi	r20, 0x00	; 0
     68c:	49 c0       	rjmp	.+146    	; 0x720 <_ZN15OrangutanBuzzer8playNoteEhjh+0xa6>
		return;
	}

	if (note <= 16)
     68e:	81 31       	cpi	r24, 0x11	; 17
     690:	30 f0       	brcs	.+12     	; 0x69e <_ZN15OrangutanBuzzer8playNoteEhjh+0x24>
	sei();
	
#else

	unsigned int freq = 0;
	unsigned char offset_note = note - 16;
     692:	58 2f       	mov	r21, r24
     694:	50 51       	subi	r21, 0x10	; 16
     696:	50 36       	cpi	r21, 0x60	; 96
     698:	18 f0       	brcs	.+6      	; 0x6a0 <_ZN15OrangutanBuzzer8playNoteEhjh+0x26>
     69a:	5f e5       	ldi	r21, 0x5F	; 95
     69c:	01 c0       	rjmp	.+2      	; 0x6a0 <_ZN15OrangutanBuzzer8playNoteEhjh+0x26>
		playFrequency(freq, dur, 0);
		return;
	}

	if (note <= 16)
		offset_note = 0;
     69e:	50 e0       	ldi	r21, 0x00	; 0
	else if (offset_note > 95)
		offset_note = 95;

	unsigned char exponent = offset_note / 12;
     6a0:	85 2f       	mov	r24, r21
     6a2:	6c e0       	ldi	r22, 0x0C	; 12
     6a4:	0e 94 ac 0a 	call	0x1558	; 0x1558 <__udivmodqi4>

	// frequency table for the lowest 12 allowed notes
	//   frequencies are specified in tenths of a Hertz for added resolution
	switch (offset_note - exponent * 12)	// equivalent to (offset_note % 12)
     6a8:	a8 2f       	mov	r26, r24
     6aa:	b0 e0       	ldi	r27, 0x00	; 0
     6ac:	e4 ef       	ldi	r30, 0xF4	; 244
     6ae:	ff ef       	ldi	r31, 0xFF	; 255
     6b0:	ae 9f       	mul	r26, r30
     6b2:	b0 01       	movw	r22, r0
     6b4:	af 9f       	mul	r26, r31
     6b6:	70 0d       	add	r23, r0
     6b8:	be 9f       	mul	r27, r30
     6ba:	70 0d       	add	r23, r0
     6bc:	11 24       	eor	r1, r1
     6be:	65 0f       	add	r22, r21
     6c0:	71 1d       	adc	r23, r1
     6c2:	6c 30       	cpi	r22, 0x0C	; 12
     6c4:	71 05       	cpc	r23, r1
     6c6:	40 f4       	brcc	.+16     	; 0x6d8 <_ZN15OrangutanBuzzer8playNoteEhjh+0x5e>
     6c8:	fb 01       	movw	r30, r22
     6ca:	ee 0f       	add	r30, r30
     6cc:	ff 1f       	adc	r31, r31
     6ce:	e8 5d       	subi	r30, 0xD8	; 216
     6d0:	fe 4f       	sbci	r31, 0xFE	; 254
     6d2:	60 81       	ld	r22, Z
     6d4:	71 81       	ldd	r23, Z+1	; 0x01
     6d6:	02 c0       	rjmp	.+4      	; 0x6dc <_ZN15OrangutanBuzzer8playNoteEhjh+0x62>
     6d8:	60 e0       	ldi	r22, 0x00	; 0
     6da:	70 e0       	ldi	r23, 0x00	; 0
		case 11:			// note D#2 = 77.8 Hz
			freq = 778;
			break;
	}

	if (exponent < 7)
     6dc:	87 30       	cpi	r24, 0x07	; 7
     6de:	81 f0       	breq	.+32     	; 0x700 <_ZN15OrangutanBuzzer8playNoteEhjh+0x86>
	{
		freq = freq << exponent;	// frequency *= 2 ^ exponent
     6e0:	08 2e       	mov	r0, r24
     6e2:	02 c0       	rjmp	.+4      	; 0x6e8 <_ZN15OrangutanBuzzer8playNoteEhjh+0x6e>
     6e4:	66 0f       	add	r22, r22
     6e6:	77 1f       	adc	r23, r23
     6e8:	0a 94       	dec	r0
     6ea:	e2 f7       	brpl	.-8      	; 0x6e4 <_ZN15OrangutanBuzzer8playNoteEhjh+0x6a>
		if (exponent > 1)			// if the frequency is greater than 160 Hz
     6ec:	82 30       	cpi	r24, 0x02	; 2
     6ee:	28 f0       	brcs	.+10     	; 0x6fa <_ZN15OrangutanBuzzer8playNoteEhjh+0x80>
			freq = (freq + 5) / 10;	//   we don't need the extra resolution
     6f0:	cb 01       	movw	r24, r22
     6f2:	05 96       	adiw	r24, 0x05	; 5
     6f4:	6a e0       	ldi	r22, 0x0A	; 10
     6f6:	70 e0       	ldi	r23, 0x00	; 0
     6f8:	0c c0       	rjmp	.+24     	; 0x712 <_ZN15OrangutanBuzzer8playNoteEhjh+0x98>
		else
			freq += DIV_BY_10;		// else keep the added digit of resolution
     6fa:	60 50       	subi	r22, 0x00	; 0
     6fc:	70 48       	sbci	r23, 0x80	; 128
     6fe:	0b c0       	rjmp	.+22     	; 0x716 <_ZN15OrangutanBuzzer8playNoteEhjh+0x9c>
	}
	else
		freq = (freq * 64 + 2) / 5;	// == freq * 2^7 / 10 without int overflow
     700:	cb 01       	movw	r24, r22
     702:	a6 e0       	ldi	r26, 0x06	; 6
     704:	88 0f       	add	r24, r24
     706:	99 1f       	adc	r25, r25
     708:	aa 95       	dec	r26
     70a:	e1 f7       	brne	.-8      	; 0x704 <_ZN15OrangutanBuzzer8playNoteEhjh+0x8a>
     70c:	02 96       	adiw	r24, 0x02	; 2
     70e:	65 e0       	ldi	r22, 0x05	; 5
     710:	70 e0       	ldi	r23, 0x00	; 0
     712:	0e 94 b8 0a 	call	0x1570	; 0x1570 <__udivmodhi4>

	if (volume > 15)
		volume = 15;
	playFrequency(freq, dur, volume);	// set buzzer this freq/duration
     716:	40 31       	cpi	r20, 0x10	; 16
     718:	08 f0       	brcs	.+2      	; 0x71c <_ZN15OrangutanBuzzer8playNoteEhjh+0xa2>
     71a:	4f e0       	ldi	r20, 0x0F	; 15
     71c:	cb 01       	movw	r24, r22
     71e:	b9 01       	movw	r22, r18
     720:	0e 94 89 02 	call	0x512	; 0x512 <_ZN15OrangutanBuzzer13playFrequencyEjjh>
     724:	08 95       	ret

00000726 <_ZL8nextNotev>:

	return arg;
}

static void nextNote()
{
     726:	a0 e0       	ldi	r26, 0x00	; 0
     728:	b0 e0       	ldi	r27, 0x00	; 0
     72a:	e9 e9       	ldi	r30, 0x99	; 153
     72c:	f3 e0       	ldi	r31, 0x03	; 3
     72e:	0c 94 0e 0b 	jmp	0x161c	; 0x161c <__prologue_saves__+0xa>
	unsigned char note = 0;
	unsigned char rest = 0;
	unsigned char tmp_octave = octave; // the octave for this note
     732:	b0 90 1f 01 	lds	r11, 0x011F
	unsigned int dot_add;

	char c; // temporary variable

	// if we are playing staccato, after every note we play a rest
	if(staccato && staccato_rest_duration)
     736:	80 91 4b 01 	lds	r24, 0x014B
     73a:	88 23       	and	r24, r24
     73c:	61 f0       	breq	.+24     	; 0x756 <_ZL8nextNotev+0x30>
     73e:	60 91 4c 01 	lds	r22, 0x014C
     742:	66 23       	and	r22, r22
     744:	41 f0       	breq	.+16     	; 0x756 <_ZL8nextNotev+0x30>
	{
		OrangutanBuzzer::playNote(SILENT_NOTE, staccato_rest_duration, 0);
     746:	8f ef       	ldi	r24, 0xFF	; 255
     748:	70 e0       	ldi	r23, 0x00	; 0
     74a:	40 e0       	ldi	r20, 0x00	; 0
     74c:	0e 94 3d 03 	call	0x67a	; 0x67a <_ZN15OrangutanBuzzer8playNoteEhjh>
		staccato_rest_duration = 0;
     750:	10 92 4c 01 	sts	0x014C, r1
		return;
     754:	35 c1       	rjmp	.+618    	; 0x9c0 <__stack+0xc1>
		// Rest - the note value doesn't matter.
		rest = 1;
		break;
	case 't':
		// set the tempo
		whole_note_duration = 60*400/getNumber()*10;
     756:	c0 ec       	ldi	r28, 0xC0	; 192
     758:	dd e5       	ldi	r29, 0x5D	; 93
		// set music staccato or legato
		if(currentCharacter() == 'l')
			staccato = false;
		else
		{
			staccato = true;
     75a:	aa 24       	eor	r10, r10
     75c:	a3 94       	inc	r10
		// set the volume
		volume = getNumber();
		goto parse_character;
	case '!':
		// reset to defaults
		octave = 4;
     75e:	14 e0       	ldi	r17, 0x04	; 4
     760:	71 2e       	mov	r7, r17
		whole_note_duration = 2000;
     762:	00 ed       	ldi	r16, 0xD0	; 208
     764:	17 e0       	ldi	r17, 0x07	; 7
		note_type = 4;
     766:	b4 e0       	ldi	r27, 0x04	; 4
     768:	eb 2e       	mov	r14, r27
     76a:	f1 2c       	mov	r15, r1
		duration = 500;
     76c:	a4 ef       	ldi	r26, 0xF4	; 244
     76e:	ca 2e       	mov	r12, r26
     770:	a1 e0       	ldi	r26, 0x01	; 1
     772:	da 2e       	mov	r13, r26
		volume = 15;
     774:	ff e0       	ldi	r31, 0x0F	; 15
     776:	8f 2e       	mov	r8, r31
     778:	91 2c       	mov	r9, r1
	}

 parse_character:

	// Get current character
	c = currentCharacter();
     77a:	0e 94 1b 02 	call	0x436	; 0x436 <_ZL16currentCharacterv>
	buzzerSequence ++;
     77e:	20 91 49 01 	lds	r18, 0x0149
     782:	30 91 4a 01 	lds	r19, 0x014A
     786:	2f 5f       	subi	r18, 0xFF	; 255
     788:	3f 4f       	sbci	r19, 0xFF	; 255
     78a:	30 93 4a 01 	sts	0x014A, r19
     78e:	20 93 49 01 	sts	0x0149, r18

	// Interpret the character.
	switch(c)
     792:	86 36       	cpi	r24, 0x66	; 102
     794:	f1 f1       	breq	.+124    	; 0x812 <_ZL8nextNotev+0xec>
     796:	87 36       	cpi	r24, 0x67	; 103
     798:	cc f4       	brge	.+50     	; 0x7cc <_ZL8nextNotev+0xa6>
     79a:	82 36       	cpi	r24, 0x62	; 98
     79c:	09 f4       	brne	.+2      	; 0x7a0 <_ZL8nextNotev+0x7a>
     79e:	af c0       	rjmp	.+350    	; 0x8fe <_ZL8nextNotev+0x1d8>
     7a0:	83 36       	cpi	r24, 0x63	; 99
     7a2:	7c f4       	brge	.+30     	; 0x7c2 <_ZL8nextNotev+0x9c>
     7a4:	8e 33       	cpi	r24, 0x3E	; 62
     7a6:	49 f1       	breq	.+82     	; 0x7fa <_ZL8nextNotev+0xd4>
     7a8:	8f 33       	cpi	r24, 0x3F	; 63
     7aa:	3c f4       	brge	.+14     	; 0x7ba <_ZL8nextNotev+0x94>
     7ac:	81 32       	cpi	r24, 0x21	; 33
     7ae:	09 f4       	brne	.+2      	; 0x7b2 <_ZL8nextNotev+0x8c>
     7b0:	87 c0       	rjmp	.+270    	; 0x8c0 <_ZL8nextNotev+0x19a>
     7b2:	8c 33       	cpi	r24, 0x3C	; 60
     7b4:	09 f0       	breq	.+2      	; 0x7b8 <_ZL8nextNotev+0x92>
     7b6:	9b c0       	rjmp	.+310    	; 0x8ee <_ZL8nextNotev+0x1c8>
     7b8:	22 c0       	rjmp	.+68     	; 0x7fe <_ZL8nextNotev+0xd8>
     7ba:	81 36       	cpi	r24, 0x61	; 97
     7bc:	09 f0       	breq	.+2      	; 0x7c0 <_ZL8nextNotev+0x9a>
     7be:	97 c0       	rjmp	.+302    	; 0x8ee <_ZL8nextNotev+0x1c8>
     7c0:	9b c0       	rjmp	.+310    	; 0x8f8 <_ZL8nextNotev+0x1d2>
     7c2:	84 36       	cpi	r24, 0x64	; 100
     7c4:	01 f1       	breq	.+64     	; 0x806 <_ZL8nextNotev+0xe0>
     7c6:	85 36       	cpi	r24, 0x65	; 101
     7c8:	0c f5       	brge	.+66     	; 0x80c <_ZL8nextNotev+0xe6>
     7ca:	1b c0       	rjmp	.+54     	; 0x802 <_ZL8nextNotev+0xdc>
     7cc:	8f 36       	cpi	r24, 0x6F	; 111
     7ce:	09 f4       	brne	.+2      	; 0x7d2 <_ZL8nextNotev+0xac>
     7d0:	47 c0       	rjmp	.+142    	; 0x860 <_ZL8nextNotev+0x13a>
     7d2:	80 37       	cpi	r24, 0x70	; 112
     7d4:	44 f4       	brge	.+16     	; 0x7e6 <_ZL8nextNotev+0xc0>
     7d6:	8c 36       	cpi	r24, 0x6C	; 108
     7d8:	11 f1       	breq	.+68     	; 0x81e <_ZL8nextNotev+0xf8>
     7da:	8d 36       	cpi	r24, 0x6D	; 109
     7dc:	61 f1       	breq	.+88     	; 0x836 <_ZL8nextNotev+0x110>
     7de:	87 36       	cpi	r24, 0x67	; 103
     7e0:	09 f0       	breq	.+2      	; 0x7e4 <_ZL8nextNotev+0xbe>
     7e2:	85 c0       	rjmp	.+266    	; 0x8ee <_ZL8nextNotev+0x1c8>
     7e4:	19 c0       	rjmp	.+50     	; 0x818 <_ZL8nextNotev+0xf2>
     7e6:	84 37       	cpi	r24, 0x74	; 116
     7e8:	09 f4       	brne	.+2      	; 0x7ec <_ZL8nextNotev+0xc6>
     7ea:	44 c0       	rjmp	.+136    	; 0x874 <_ZL8nextNotev+0x14e>
     7ec:	86 37       	cpi	r24, 0x76	; 118
     7ee:	09 f4       	brne	.+2      	; 0x7f2 <_ZL8nextNotev+0xcc>
     7f0:	60 c0       	rjmp	.+192    	; 0x8b2 <_ZL8nextNotev+0x18c>
     7f2:	82 37       	cpi	r24, 0x72	; 114
     7f4:	09 f0       	breq	.+2      	; 0x7f8 <_ZL8nextNotev+0xd2>
     7f6:	7b c0       	rjmp	.+246    	; 0x8ee <_ZL8nextNotev+0x1c8>
     7f8:	39 c0       	rjmp	.+114    	; 0x86c <_ZL8nextNotev+0x146>
	{
	case '>':
		// shift the octave temporarily up
		tmp_octave ++;
     7fa:	b3 94       	inc	r11
		goto parse_character;
     7fc:	be cf       	rjmp	.-132    	; 0x77a <_ZL8nextNotev+0x54>
	case '<':
		// shift the octave temporarily down
		tmp_octave --;
     7fe:	ba 94       	dec	r11
		goto parse_character;
     800:	bc cf       	rjmp	.-136    	; 0x77a <_ZL8nextNotev+0x54>
}

static void nextNote()
{
	unsigned char note = 0;
	unsigned char rest = 0;
     802:	ee 24       	eor	r14, r14
     804:	35 c0       	rjmp	.+106    	; 0x870 <_ZL8nextNotev+0x14a>
     806:	ee 24       	eor	r14, r14
		break;
	case 'c':
		note = NOTE_C(0);
		break;
	case 'd':
		note = NOTE_D(0);
     808:	82 e0       	ldi	r24, 0x02	; 2
		break;
     80a:	7b c0       	rjmp	.+246    	; 0x902 <__stack+0x3>
}

static void nextNote()
{
	unsigned char note = 0;
	unsigned char rest = 0;
     80c:	ee 24       	eor	r14, r14
		break;
	case 'd':
		note = NOTE_D(0);
		break;
	case 'e':
		note = NOTE_E(0);
     80e:	84 e0       	ldi	r24, 0x04	; 4
		break;
     810:	78 c0       	rjmp	.+240    	; 0x902 <__stack+0x3>
}

static void nextNote()
{
	unsigned char note = 0;
	unsigned char rest = 0;
     812:	ee 24       	eor	r14, r14
		break;
	case 'e':
		note = NOTE_E(0);
		break;
	case 'f':
		note = NOTE_F(0);
     814:	85 e0       	ldi	r24, 0x05	; 5
		break;
     816:	75 c0       	rjmp	.+234    	; 0x902 <__stack+0x3>
}

static void nextNote()
{
	unsigned char note = 0;
	unsigned char rest = 0;
     818:	ee 24       	eor	r14, r14
		break;
	case 'f':
		note = NOTE_F(0);
		break;
	case 'g':
		note = NOTE_G(0);
     81a:	87 e0       	ldi	r24, 0x07	; 7
		break;
     81c:	72 c0       	rjmp	.+228    	; 0x902 <__stack+0x3>
	case 'l':
		// set the default note duration
		note_type = getNumber();
     81e:	0e 94 3d 02 	call	0x47a	; 0x47a <_ZL9getNumberv>
     822:	bc 01       	movw	r22, r24
     824:	90 93 21 01 	sts	0x0121, r25
     828:	80 93 20 01 	sts	0x0120, r24
		duration = whole_note_duration/note_type;
     82c:	80 91 22 01 	lds	r24, 0x0122
     830:	90 91 23 01 	lds	r25, 0x0123
     834:	37 c0       	rjmp	.+110    	; 0x8a4 <_ZL8nextNotev+0x17e>
		goto parse_character;
	case 'm':
		// set music staccato or legato
		if(currentCharacter() == 'l')
     836:	0e 94 1b 02 	call	0x436	; 0x436 <_ZL16currentCharacterv>
     83a:	8c 36       	cpi	r24, 0x6C	; 108
     83c:	19 f4       	brne	.+6      	; 0x844 <_ZL8nextNotev+0x11e>
			staccato = false;
     83e:	10 92 4b 01 	sts	0x014B, r1
     842:	04 c0       	rjmp	.+8      	; 0x84c <_ZL8nextNotev+0x126>
		else
		{
			staccato = true;
     844:	a0 92 4b 01 	sts	0x014B, r10
			staccato_rest_duration = 0;
     848:	10 92 4c 01 	sts	0x014C, r1
		}
		buzzerSequence ++;
     84c:	80 91 49 01 	lds	r24, 0x0149
     850:	90 91 4a 01 	lds	r25, 0x014A
     854:	01 96       	adiw	r24, 0x01	; 1
     856:	90 93 4a 01 	sts	0x014A, r25
     85a:	80 93 49 01 	sts	0x0149, r24
		goto parse_character;
     85e:	8d cf       	rjmp	.-230    	; 0x77a <_ZL8nextNotev+0x54>
	case 'o':
		// set the octave permanently
		octave = getNumber();
     860:	0e 94 3d 02 	call	0x47a	; 0x47a <_ZL9getNumberv>
     864:	b8 2e       	mov	r11, r24
     866:	80 93 1f 01 	sts	0x011F, r24
		tmp_octave = octave;
		goto parse_character;
     86a:	87 cf       	rjmp	.-242    	; 0x77a <_ZL8nextNotev+0x54>
	case 'r':
		// Rest - the note value doesn't matter.
		rest = 1;
     86c:	ee 24       	eor	r14, r14
     86e:	e3 94       	inc	r14
	return arg;
}

static void nextNote()
{
	unsigned char note = 0;
     870:	80 e0       	ldi	r24, 0x00	; 0
		tmp_octave = octave;
		goto parse_character;
	case 'r':
		// Rest - the note value doesn't matter.
		rest = 1;
		break;
     872:	47 c0       	rjmp	.+142    	; 0x902 <__stack+0x3>
	case 't':
		// set the tempo
		whole_note_duration = 60*400/getNumber()*10;
     874:	0e 94 3d 02 	call	0x47a	; 0x47a <_ZL9getNumberv>
     878:	bc 01       	movw	r22, r24
     87a:	ce 01       	movw	r24, r28
     87c:	0e 94 b8 0a 	call	0x1570	; 0x1570 <__udivmodhi4>
     880:	cb 01       	movw	r24, r22
     882:	88 0f       	add	r24, r24
     884:	99 1f       	adc	r25, r25
     886:	53 e0       	ldi	r21, 0x03	; 3
     888:	66 0f       	add	r22, r22
     88a:	77 1f       	adc	r23, r23
     88c:	5a 95       	dec	r21
     88e:	e1 f7       	brne	.-8      	; 0x888 <_ZL8nextNotev+0x162>
     890:	86 0f       	add	r24, r22
     892:	97 1f       	adc	r25, r23
     894:	90 93 23 01 	sts	0x0123, r25
     898:	80 93 22 01 	sts	0x0122, r24
		duration = whole_note_duration/note_type;
     89c:	60 91 20 01 	lds	r22, 0x0120
     8a0:	70 91 21 01 	lds	r23, 0x0121
     8a4:	0e 94 b8 0a 	call	0x1570	; 0x1570 <__udivmodhi4>
     8a8:	70 93 25 01 	sts	0x0125, r23
     8ac:	60 93 24 01 	sts	0x0124, r22
		goto parse_character;
     8b0:	64 cf       	rjmp	.-312    	; 0x77a <_ZL8nextNotev+0x54>
	case 'v':
		// set the volume
		volume = getNumber();
     8b2:	0e 94 3d 02 	call	0x47a	; 0x47a <_ZL9getNumberv>
     8b6:	90 93 27 01 	sts	0x0127, r25
     8ba:	80 93 26 01 	sts	0x0126, r24
		goto parse_character;
     8be:	5d cf       	rjmp	.-326    	; 0x77a <_ZL8nextNotev+0x54>
	case '!':
		// reset to defaults
		octave = 4;
     8c0:	70 92 1f 01 	sts	0x011F, r7
		whole_note_duration = 2000;
     8c4:	10 93 23 01 	sts	0x0123, r17
     8c8:	00 93 22 01 	sts	0x0122, r16
		note_type = 4;
     8cc:	f0 92 21 01 	sts	0x0121, r15
     8d0:	e0 92 20 01 	sts	0x0120, r14
		duration = 500;
     8d4:	d0 92 25 01 	sts	0x0125, r13
     8d8:	c0 92 24 01 	sts	0x0124, r12
		volume = 15;
     8dc:	90 92 27 01 	sts	0x0127, r9
     8e0:	80 92 26 01 	sts	0x0126, r8
		staccato = 0;
     8e4:	10 92 4b 01 	sts	0x014B, r1
		// reset temp variables that depend on the defaults
		tmp_octave = octave;
     8e8:	44 e0       	ldi	r20, 0x04	; 4
     8ea:	b4 2e       	mov	r11, r20
     8ec:	46 cf       	rjmp	.-372    	; 0x77a <_ZL8nextNotev+0x54>
		tmp_duration = duration;
		goto parse_character;
	default:
		buzzerSequence = 0;
     8ee:	10 92 4a 01 	sts	0x014A, r1
     8f2:	10 92 49 01 	sts	0x0149, r1
		return;
     8f6:	64 c0       	rjmp	.+200    	; 0x9c0 <__stack+0xc1>
}

static void nextNote()
{
	unsigned char note = 0;
	unsigned char rest = 0;
     8f8:	ee 24       	eor	r14, r14
	case '<':
		// shift the octave temporarily down
		tmp_octave --;
		goto parse_character;
	case 'a':
		note = NOTE_A(0);
     8fa:	89 e0       	ldi	r24, 0x09	; 9
     8fc:	02 c0       	rjmp	.+4      	; 0x902 <__stack+0x3>
}

static void nextNote()
{
	unsigned char note = 0;
	unsigned char rest = 0;
     8fe:	ee 24       	eor	r14, r14
		goto parse_character;
	case 'a':
		note = NOTE_A(0);
		break;
	case 'b':
		note = NOTE_B(0);
     900:	8b e0       	ldi	r24, 0x0B	; 11
	default:
		buzzerSequence = 0;
		return;
	}

	note += tmp_octave*12;
     902:	9c e0       	ldi	r25, 0x0C	; 12
     904:	b9 9e       	mul	r11, r25
     906:	b0 2c       	mov	r11, r0
     908:	11 24       	eor	r1, r1
     90a:	b8 0e       	add	r11, r24

	// handle sharps and flats
	c = currentCharacter();
     90c:	0e 94 1b 02 	call	0x436	; 0x436 <_ZL16currentCharacterv>
	while(c == '+' || c == '#')
     910:	8b 32       	cpi	r24, 0x2B	; 43
     912:	11 f0       	breq	.+4      	; 0x918 <__stack+0x19>
     914:	83 32       	cpi	r24, 0x23	; 35
     916:	b9 f4       	brne	.+46     	; 0x946 <__stack+0x47>
	{
		buzzerSequence ++;
     918:	80 91 49 01 	lds	r24, 0x0149
     91c:	90 91 4a 01 	lds	r25, 0x014A
     920:	01 96       	adiw	r24, 0x01	; 1
     922:	90 93 4a 01 	sts	0x014A, r25
     926:	80 93 49 01 	sts	0x0149, r24
		note ++;
     92a:	b3 94       	inc	r11
     92c:	ef cf       	rjmp	.-34     	; 0x90c <__stack+0xd>
		c = currentCharacter();
	}
	while(c == '-')
	{
		buzzerSequence ++;
     92e:	80 91 49 01 	lds	r24, 0x0149
     932:	90 91 4a 01 	lds	r25, 0x014A
     936:	01 96       	adiw	r24, 0x01	; 1
     938:	90 93 4a 01 	sts	0x014A, r25
     93c:	80 93 49 01 	sts	0x0149, r24
		note --;
     940:	ba 94       	dec	r11
		c = currentCharacter();
     942:	0e 94 1b 02 	call	0x436	; 0x436 <_ZL16currentCharacterv>
	{
		buzzerSequence ++;
		note ++;
		c = currentCharacter();
	}
	while(c == '-')
     946:	8d 32       	cpi	r24, 0x2D	; 45
     948:	91 f3       	breq	.-28     	; 0x92e <__stack+0x2f>
		note --;
		c = currentCharacter();
	}

	// set the duration of just this note
	tmp_duration = duration;
     94a:	c0 91 24 01 	lds	r28, 0x0124
     94e:	d0 91 25 01 	lds	r29, 0x0125

	// If the input is 'c16', make it a 16th note, etc.
	if(c > '0' && c < '9')
     952:	81 53       	subi	r24, 0x31	; 49
     954:	88 30       	cpi	r24, 0x08	; 8
     956:	58 f4       	brcc	.+22     	; 0x96e <__stack+0x6f>
		tmp_duration = whole_note_duration/getNumber();
     958:	c0 91 22 01 	lds	r28, 0x0122
     95c:	d0 91 23 01 	lds	r29, 0x0123
     960:	0e 94 3d 02 	call	0x47a	; 0x47a <_ZL9getNumberv>
     964:	bc 01       	movw	r22, r24
     966:	ce 01       	movw	r24, r28
     968:	0e 94 b8 0a 	call	0x1570	; 0x1570 <__udivmodhi4>
     96c:	eb 01       	movw	r28, r22

	// Handle dotted notes - the first dot adds 50%, and each
	// additional dot adds 50% of the previous dot.
	dot_add = tmp_duration/2;
     96e:	8e 01       	movw	r16, r28
     970:	0c c0       	rjmp	.+24     	; 0x98a <__stack+0x8b>
	while(currentCharacter() == '.')
	{
		buzzerSequence ++;
     972:	20 91 49 01 	lds	r18, 0x0149
     976:	30 91 4a 01 	lds	r19, 0x014A
     97a:	2f 5f       	subi	r18, 0xFF	; 255
     97c:	3f 4f       	sbci	r19, 0xFF	; 255
     97e:	30 93 4a 01 	sts	0x014A, r19
     982:	20 93 49 01 	sts	0x0149, r18
		tmp_duration += dot_add;
     986:	c0 0f       	add	r28, r16
     988:	d1 1f       	adc	r29, r17
		dot_add /= 2;
     98a:	16 95       	lsr	r17
     98c:	07 95       	ror	r16
		tmp_duration = whole_note_duration/getNumber();

	// Handle dotted notes - the first dot adds 50%, and each
	// additional dot adds 50% of the previous dot.
	dot_add = tmp_duration/2;
	while(currentCharacter() == '.')
     98e:	0e 94 1b 02 	call	0x436	; 0x436 <_ZL16currentCharacterv>
     992:	8e 32       	cpi	r24, 0x2E	; 46
     994:	71 f3       	breq	.-36     	; 0x972 <__stack+0x73>
		buzzerSequence ++;
		tmp_duration += dot_add;
		dot_add /= 2;
	}

	if(staccato)
     996:	80 91 4b 01 	lds	r24, 0x014B
     99a:	88 23       	and	r24, r24
     99c:	39 f0       	breq	.+14     	; 0x9ac <__stack+0xad>
	{
		staccato_rest_duration = tmp_duration / 2;
     99e:	ce 01       	movw	r24, r28
     9a0:	96 95       	lsr	r25
     9a2:	87 95       	ror	r24
     9a4:	80 93 4c 01 	sts	0x014C, r24
		tmp_duration -= staccato_rest_duration;
     9a8:	c8 1b       	sub	r28, r24
     9aa:	d1 09       	sbc	r29, r1
	}
	
	// this will re-enable the timer1 overflow interrupt
	OrangutanBuzzer::playNote(rest ? SILENT_NOTE : note, tmp_duration, volume);
     9ac:	ee 20       	and	r14, r14
     9ae:	11 f0       	breq	.+4      	; 0x9b4 <__stack+0xb5>
     9b0:	bb 24       	eor	r11, r11
     9b2:	ba 94       	dec	r11
     9b4:	8b 2d       	mov	r24, r11
     9b6:	be 01       	movw	r22, r28
     9b8:	40 91 26 01 	lds	r20, 0x0126
     9bc:	0e 94 3d 03 	call	0x67a	; 0x67a <_ZN15OrangutanBuzzer8playNoteEhjh>
}
     9c0:	cd b7       	in	r28, 0x3d	; 61
     9c2:	de b7       	in	r29, 0x3e	; 62
     9c4:	ed e0       	ldi	r30, 0x0D	; 13
     9c6:	0c 94 2a 0b 	jmp	0x1654	; 0x1654 <__epilogue_restores__+0xa>

000009ca <__vector_13>:

static void nextNote();

// Timer1 overflow interrupt
ISR (TIMER1_OVF_vect)
{
     9ca:	1f 92       	push	r1
     9cc:	0f 92       	push	r0
     9ce:	0f b6       	in	r0, 0x3f	; 63
     9d0:	0f 92       	push	r0
     9d2:	11 24       	eor	r1, r1
     9d4:	2f 93       	push	r18
     9d6:	3f 93       	push	r19
     9d8:	4f 93       	push	r20
     9da:	5f 93       	push	r21
     9dc:	6f 93       	push	r22
     9de:	7f 93       	push	r23
     9e0:	8f 93       	push	r24
     9e2:	9f 93       	push	r25
     9e4:	af 93       	push	r26
     9e6:	bf 93       	push	r27
     9e8:	ef 93       	push	r30
     9ea:	ff 93       	push	r31
	if (buzzerTimeout-- == 0)
     9ec:	80 91 4f 01 	lds	r24, 0x014F
     9f0:	90 91 50 01 	lds	r25, 0x0150
     9f4:	9c 01       	movw	r18, r24
     9f6:	21 50       	subi	r18, 0x01	; 1
     9f8:	30 40       	sbci	r19, 0x00	; 0
     9fa:	30 93 50 01 	sts	0x0150, r19
     9fe:	20 93 4f 01 	sts	0x014F, r18
     a02:	00 97       	sbiw	r24, 0x00	; 0
     a04:	11 f5       	brne	.+68     	; 0xa4a <__vector_13+0x80>
	{
		DISABLE_TIMER1_INTERRUPT();
     a06:	10 92 6f 00 	sts	0x006F, r1
		sei();		// re-enable global interrupts (nextNote() is very slow)
     a0a:	78 94       	sei
		TCCR1B = (TCCR1B & 0xF8) | TIMER1_CLK_1;	// select IO clock
     a0c:	80 91 81 00 	lds	r24, 0x0081
     a10:	88 7f       	andi	r24, 0xF8	; 248
     a12:	81 60       	ori	r24, 0x01	; 1
     a14:	80 93 81 00 	sts	0x0081, r24
		OCR1A = (F_CPU/2) / 1000;			// set TOP for freq = 1 kHz
     a18:	80 e1       	ldi	r24, 0x10	; 16
     a1a:	97 e2       	ldi	r25, 0x27	; 39
     a1c:	90 93 89 00 	sts	0x0089, r25
     a20:	80 93 88 00 	sts	0x0088, r24
		OCR1B = 0;						// 0% duty cycle
     a24:	10 92 8b 00 	sts	0x008B, r1
     a28:	10 92 8a 00 	sts	0x008A, r1
		buzzerFinished = 1;
     a2c:	81 e0       	ldi	r24, 0x01	; 1
     a2e:	80 93 1e 01 	sts	0x011E, r24
		if (buzzerSequence && (play_mode_setting == PLAY_AUTOMATIC))
     a32:	80 91 49 01 	lds	r24, 0x0149
     a36:	90 91 4a 01 	lds	r25, 0x014A
     a3a:	00 97       	sbiw	r24, 0x00	; 0
     a3c:	31 f0       	breq	.+12     	; 0xa4a <__vector_13+0x80>
     a3e:	80 91 4e 01 	lds	r24, 0x014E
     a42:	88 23       	and	r24, r24
     a44:	11 f4       	brne	.+4      	; 0xa4a <__vector_13+0x80>
			nextNote();
     a46:	0e 94 93 03 	call	0x726	; 0x726 <_ZL8nextNotev>
	}
}
     a4a:	ff 91       	pop	r31
     a4c:	ef 91       	pop	r30
     a4e:	bf 91       	pop	r27
     a50:	af 91       	pop	r26
     a52:	9f 91       	pop	r25
     a54:	8f 91       	pop	r24
     a56:	7f 91       	pop	r23
     a58:	6f 91       	pop	r22
     a5a:	5f 91       	pop	r21
     a5c:	4f 91       	pop	r20
     a5e:	3f 91       	pop	r19
     a60:	2f 91       	pop	r18
     a62:	0f 90       	pop	r0
     a64:	0f be       	out	0x3f, r0	; 63
     a66:	0f 90       	pop	r0
     a68:	1f 90       	pop	r1
     a6a:	18 95       	reti

00000a6c <play_note>:
}

extern "C" void play_note(unsigned char note, unsigned int dur,
						  unsigned char volume)
{
	OrangutanBuzzer::playNote(note, dur, volume);
     a6c:	0e 94 3d 03 	call	0x67a	; 0x67a <_ZN15OrangutanBuzzer8playNoteEhjh>
}
     a70:	08 95       	ret

00000a72 <_ZN15OrangutanBuzzer9isPlayingEv>:


// Returns 1 if the buzzer is currently playing, otherwise it returns 0
unsigned char OrangutanBuzzer::isPlaying()
{
	return !buzzerFinished || buzzerSequence != 0;
     a72:	80 91 1e 01 	lds	r24, 0x011E
     a76:	88 23       	and	r24, r24
     a78:	51 f0       	breq	.+20     	; 0xa8e <_ZN15OrangutanBuzzer9isPlayingEv+0x1c>
}



// Returns 1 if the buzzer is currently playing, otherwise it returns 0
unsigned char OrangutanBuzzer::isPlaying()
     a7a:	81 e0       	ldi	r24, 0x01	; 1
     a7c:	20 91 49 01 	lds	r18, 0x0149
     a80:	30 91 4a 01 	lds	r19, 0x014A
     a84:	21 15       	cp	r18, r1
     a86:	31 05       	cpc	r19, r1
     a88:	19 f4       	brne	.+6      	; 0xa90 <_ZN15OrangutanBuzzer9isPlayingEv+0x1e>
     a8a:	80 e0       	ldi	r24, 0x00	; 0
     a8c:	08 95       	ret
{
	return !buzzerFinished || buzzerSequence != 0;
     a8e:	81 e0       	ldi	r24, 0x01	; 1
}
     a90:	08 95       	ret

00000a92 <is_playing>:
	OrangutanBuzzer::playFromProgramSpace(sequence_p);
}

extern "C" unsigned char is_playing()
{
	return OrangutanBuzzer::isPlaying();
     a92:	0e 94 39 05 	call	0xa72	; 0xa72 <_ZN15OrangutanBuzzer9isPlayingEv>
}
     a96:	08 95       	ret

00000a98 <_ZN15OrangutanBuzzer4playEPKc>:
//
// Here is an example from Bach:
//   play("T240 L8 a gafaeada c+adaeafa <aa<bac#ada c#adaeaf4");
void OrangutanBuzzer::play(const char *notes)
{
	DISABLE_TIMER1_INTERRUPT();	// prevent this from being interrupted
     a98:	10 92 6f 00 	sts	0x006F, r1
	buzzerSequence = notes;
     a9c:	90 93 4a 01 	sts	0x014A, r25
     aa0:	80 93 49 01 	sts	0x0149, r24
	use_program_space = 0;
     aa4:	10 92 4d 01 	sts	0x014D, r1
	staccato_rest_duration = 0;
     aa8:	10 92 4c 01 	sts	0x014C, r1
	nextNote();					// this re-enables the timer1 interrupt
     aac:	0e 94 93 03 	call	0x726	; 0x726 <_ZL8nextNotev>
}
     ab0:	08 95       	ret

00000ab2 <play>:
	OrangutanBuzzer::playNote(note, dur, volume);
}

extern "C" void play(const char *sequence)
{
	OrangutanBuzzer::play(sequence);
     ab2:	0e 94 4c 05 	call	0xa98	; 0xa98 <_ZN15OrangutanBuzzer4playEPKc>
}
     ab6:	08 95       	ret

00000ab8 <_ZN15OrangutanBuzzer20playFromProgramSpaceEPKc>:
	nextNote();					// this re-enables the timer1 interrupt
}

void OrangutanBuzzer::playFromProgramSpace(const char *notes_p)
{
	DISABLE_TIMER1_INTERRUPT();	// prevent this from being interrupted
     ab8:	10 92 6f 00 	sts	0x006F, r1
	buzzerSequence = notes_p;
     abc:	90 93 4a 01 	sts	0x014A, r25
     ac0:	80 93 49 01 	sts	0x0149, r24
	use_program_space = 1;
     ac4:	81 e0       	ldi	r24, 0x01	; 1
     ac6:	80 93 4d 01 	sts	0x014D, r24
	staccato_rest_duration = 0;
     aca:	10 92 4c 01 	sts	0x014C, r1
	nextNote();					// this re-enables the timer1 interrupt
     ace:	0e 94 93 03 	call	0x726	; 0x726 <_ZL8nextNotev>
}
     ad2:	08 95       	ret

00000ad4 <play_from_program_space>:
	OrangutanBuzzer::play(sequence);
}

extern "C" void play_from_program_space(const char *sequence_p)
{
	OrangutanBuzzer::playFromProgramSpace(sequence_p);
     ad4:	0e 94 5c 05 	call	0xab8	; 0xab8 <_ZN15OrangutanBuzzer20playFromProgramSpaceEPKc>
}
     ad8:	08 95       	ret

00000ada <_ZN15OrangutanBuzzer11stopPlayingEv>:


// stop all sound playback immediately
void OrangutanBuzzer::stopPlaying()
{
	DISABLE_TIMER1_INTERRUPT();					// disable interrupts
     ada:	10 92 6f 00 	sts	0x006F, r1
	TCCR1B = (TCCR1B & 0xF8) | TIMER1_CLK_1;	// select IO clock
     ade:	e1 e8       	ldi	r30, 0x81	; 129
     ae0:	f0 e0       	ldi	r31, 0x00	; 0
     ae2:	80 81       	ld	r24, Z
     ae4:	88 7f       	andi	r24, 0xF8	; 248
     ae6:	81 60       	ori	r24, 0x01	; 1
     ae8:	80 83       	st	Z, r24
	OCR1A = (F_CPU/2) / 1000;					// set TOP for freq = 1 kHz
     aea:	80 e1       	ldi	r24, 0x10	; 16
     aec:	97 e2       	ldi	r25, 0x27	; 39
     aee:	90 93 89 00 	sts	0x0089, r25
     af2:	80 93 88 00 	sts	0x0088, r24
	OCR1B = 0;									// 0% duty cycle
     af6:	10 92 8b 00 	sts	0x008B, r1
     afa:	10 92 8a 00 	sts	0x008A, r1
	buzzerFinished = 1;
     afe:	81 e0       	ldi	r24, 0x01	; 1
     b00:	80 93 1e 01 	sts	0x011E, r24
	buzzerSequence = 0;
     b04:	10 92 4a 01 	sts	0x014A, r1
     b08:	10 92 49 01 	sts	0x0149, r1
#ifdef _ORANGUTAN_X2
	OrangutanX2::buzzerOff();
#endif
}
     b0c:	08 95       	ret

00000b0e <stop_playing>:
	return OrangutanBuzzer::isPlaying();
}

extern "C" void stop_playing()
{
	OrangutanBuzzer::stopPlaying();
     b0e:	0e 94 6d 05 	call	0xada	; 0xada <_ZN15OrangutanBuzzer11stopPlayingEv>
}
     b12:	08 95       	ret

00000b14 <_ZN15OrangutanBuzzer9playCheckEv>:
// in your main loop to avoid delays between notes in the sequence.
//
// Returns true if it is still playing.
unsigned char OrangutanBuzzer::playCheck()
{
	if(buzzerFinished && buzzerSequence != 0)
     b14:	80 91 1e 01 	lds	r24, 0x011E
     b18:	88 23       	and	r24, r24
     b1a:	41 f0       	breq	.+16     	; 0xb2c <_ZN15OrangutanBuzzer9playCheckEv+0x18>
     b1c:	80 91 49 01 	lds	r24, 0x0149
     b20:	90 91 4a 01 	lds	r25, 0x014A
     b24:	00 97       	sbiw	r24, 0x00	; 0
     b26:	11 f0       	breq	.+4      	; 0xb2c <_ZN15OrangutanBuzzer9playCheckEv+0x18>
		nextNote();
     b28:	0e 94 93 03 	call	0x726	; 0x726 <_ZL8nextNotev>
	return buzzerSequence != 0;
     b2c:	81 e0       	ldi	r24, 0x01	; 1
     b2e:	20 91 49 01 	lds	r18, 0x0149
     b32:	30 91 4a 01 	lds	r19, 0x014A
     b36:	21 15       	cp	r18, r1
     b38:	31 05       	cpc	r19, r1
     b3a:	09 f4       	brne	.+2      	; 0xb3e <_ZN15OrangutanBuzzer9playCheckEv+0x2a>
     b3c:	80 e0       	ldi	r24, 0x00	; 0
}
     b3e:	08 95       	ret

00000b40 <_ZN15OrangutanBuzzer8playModeEh>:
// Usage: playMode(PLAY_AUTOMATIC) makes it automatic (the
// default), playMode(PLAY_CHECK) sets it to a mode where you have
// to call playCheck().
void OrangutanBuzzer::playMode(unsigned char mode)
{
	play_mode_setting = mode;
     b40:	80 93 4e 01 	sts	0x014E, r24

	// We want to check to make sure that we didn't miss a note if we
	// are going out of play-check mode.
	if(mode == PLAY_AUTOMATIC)
     b44:	88 23       	and	r24, r24
     b46:	11 f4       	brne	.+4      	; 0xb4c <_ZN15OrangutanBuzzer8playModeEh+0xc>
		playCheck();
     b48:	0e 94 8a 05 	call	0xb14	; 0xb14 <_ZN15OrangutanBuzzer9playCheckEv>
     b4c:	08 95       	ret

00000b4e <play_mode>:
	OrangutanBuzzer::stopPlaying();
}

extern "C" void play_mode(unsigned char mode)
{
	OrangutanBuzzer::playMode(mode);
     b4e:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN15OrangutanBuzzer8playModeEh>
}
     b52:	08 95       	ret

00000b54 <play_check>:

extern "C" unsigned char play_check()
{
	return OrangutanBuzzer::playCheck();
     b54:	0e 94 8a 05 	call	0xb14	; 0xb14 <_ZN15OrangutanBuzzer9playCheckEv>
}
     b58:	08 95       	ret

00000b5a <void_getchar>:
	return c;
}

extern "C" int void_getchar(FILE *f) {
	return 0;
}
     b5a:	80 e0       	ldi	r24, 0x00	; 0
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	08 95       	ret

00000b60 <delayMicroseconds.clone.0>:
		    "   pop  r22"     "\n\t"   
		    "   sbiw %0, 1"   "\n\t"
		    "   brne 1b"
		    : "=w" ( microseconds )  
		    : "0" ( microseconds )
		    );  
     b60:	81 e0       	ldi	r24, 0x01	; 1
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	6f 93       	push	r22
     b66:	64 e0       	ldi	r22, 0x04	; 4
     b68:	6a 95       	dec	r22
     b6a:	f1 f7       	brne	.-4      	; 0xb68 <delayMicroseconds.clone.0+0x8>
     b6c:	6f 91       	pop	r22
     b6e:	01 97       	sbiw	r24, 0x01	; 1
     b70:	c9 f7       	brne	.-14     	; 0xb64 <delayMicroseconds.clone.0+0x4>
}

// These are alternative aliases:
static inline void delay(unsigned int milliseconds) { delay_ms(milliseconds); }
static inline unsigned long millis(void) { return get_ms(); }
static inline void delayMicroseconds(unsigned int microseconds) { delay_us(microseconds); }
     b72:	08 95       	ret

00000b74 <_ZN12OrangutanLCDC1Ev>:

// constructor (doesn't do anything)

OrangutanLCD::OrangutanLCD()
{
}
     b74:	08 95       	ret

00000b76 <_ZN12OrangutanLCD8busyWaitEv>:
// Wait for the busy flag to clear.  The 4-bit interface is 
// more complicated than the 8-bit interface because E must
// be strobed twice to get the full eight bits back from
// the LCD, even though we're only interested in one of them.
void OrangutanLCD::busyWait()
{
     b76:	0f 93       	push	r16
     b78:	1f 93       	push	r17
     b7a:	cf 93       	push	r28
     b7c:	df 93       	push	r29
	uint8_t temp_ddr, data;

	// Save our DDR information
	temp_ddr = LCD_BF_DDR;
     b7e:	1a b1       	in	r17, 0x0a	; 10

	// Set up the data DDR for input
	LCD_BF_DDR &= ~LCD_BF_MASK;
     b80:	57 98       	cbi	0x0a, 7	; 10

	// Set up RS and RW to read the state of the LCD's busy flag
	LCD_RS_PORT &= ~(1 << LCD_RS);
     b82:	5a 98       	cbi	0x0b, 2	; 11
	LCD_RW_PORT |= 1 << LCD_RW;
     b84:	28 9a       	sbi	0x05, 0	; 5
	
	unsigned int usCounter = 0;
     b86:	c0 e0       	ldi	r28, 0x00	; 0
     b88:	d0 e0       	ldi	r29, 0x00	; 0

	do
	{
		delayMicroseconds(1);
     b8a:	0e 94 b0 05 	call	0xb60	; 0xb60 <delayMicroseconds.clone.0>
		
		// Bring E high
		LCD_E_PORT |= 1 << LCD_E;
     b8e:	5c 9a       	sbi	0x0b, 4	; 11

		// Wait at least 120ns (1us is excessive)
		delayMicroseconds(1);
     b90:	0e 94 b0 05 	call	0xb60	; 0xb60 <delayMicroseconds.clone.0>

		// Get the data back from the LCD
		data = LCD_BF_PIN;
     b94:	09 b1       	in	r16, 0x09	; 9
		// That excessive delay means our cycle time on E cannot be
		// shorter than 1000ns (500ns being the spec), so no further
		// delays are required

		// Bring E low
		LCD_E_PORT &= ~(1 << LCD_E);
     b96:	5c 98       	cbi	0x0b, 4	; 11
		usCounter += 2;

#ifndef _ORANGUTAN_X2

		// Wait a small bit
		delayMicroseconds(1);
     b98:	0e 94 b0 05 	call	0xb60	; 0xb60 <delayMicroseconds.clone.0>

		// When using the 4-bit interface, we still need to
		// strobe out the 4 bits we don't care about:

		// Bring E high
		LCD_E_PORT |= 1 << LCD_E;
     b9c:	5c 9a       	sbi	0x0b, 4	; 11

		// Wait at least 120ns (1us is excessive)
		delayMicroseconds(1);
     b9e:	0e 94 b0 05 	call	0xb60	; 0xb60 <delayMicroseconds.clone.0>

		// Bring E low
		LCD_E_PORT &= ~(1 << LCD_E);
     ba2:	5c 98       	cbi	0x0b, 4	; 11
	LCD_RS_PORT &= ~(1 << LCD_RS);
	LCD_RW_PORT |= 1 << LCD_RW;
	
	unsigned int usCounter = 0;

	do
     ba4:	07 ff       	sbrs	r16, 7
     ba6:	11 c0       	rjmp	.+34     	; 0xbca <_ZN12OrangutanLCD8busyWaitEv+0x54>
		delayMicroseconds(1);

		// Bring E low
		LCD_E_PORT &= ~(1 << LCD_E);
		
		usCounter += 2;
     ba8:	24 96       	adiw	r28, 0x04	; 4
	LCD_RS_PORT &= ~(1 << LCD_RS);
	LCD_RW_PORT |= 1 << LCD_RW;
	
	unsigned int usCounter = 0;

	do
     baa:	9e 01       	movw	r18, r28
     bac:	40 e0       	ldi	r20, 0x00	; 0
     bae:	50 e0       	ldi	r21, 0x00	; 0
     bb0:	80 91 55 01 	lds	r24, 0x0155
     bb4:	90 91 56 01 	lds	r25, 0x0156
     bb8:	a0 91 57 01 	lds	r26, 0x0157
     bbc:	b0 91 58 01 	lds	r27, 0x0158
     bc0:	28 17       	cp	r18, r24
     bc2:	39 07       	cpc	r19, r25
     bc4:	4a 07       	cpc	r20, r26
     bc6:	5b 07       	cpc	r21, r27
     bc8:	00 f3       	brcs	.-64     	; 0xb8a <_ZN12OrangutanLCD8busyWaitEv+0x14>
	}
	
#endif

	// Restore our DDR information
	LCD_BF_DDR = temp_ddr;
     bca:	1a b9       	out	0x0a, r17	; 10
}
     bcc:	df 91       	pop	r29
     bce:	cf 91       	pop	r28
     bd0:	1f 91       	pop	r17
     bd2:	0f 91       	pop	r16
     bd4:	08 95       	ret

00000bd6 <_ZN12OrangutanLCD8sendDataEh>:
#ifdef _ORANGUTAN_SVP
	PORTC = (PORTC & ~LCD_PORTC_MASK) | LCD_PORTC_DATA(data);
#elif defined(_ORANGUTAN_X2)
	PORTC = data;
#else
	PORTB = (PORTB & ~LCD_PORTB_MASK) | LCD_PORTB_DATA(data);
     bd6:	65 b1       	in	r22, 0x05	; 5
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	ac 01       	movw	r20, r24
     bdc:	41 70       	andi	r20, 0x01	; 1
     bde:	50 70       	andi	r21, 0x00	; 0
     be0:	44 0f       	add	r20, r20
     be2:	55 1f       	adc	r21, r21
     be4:	9c 01       	movw	r18, r24
     be6:	26 70       	andi	r18, 0x06	; 6
     be8:	30 70       	andi	r19, 0x00	; 0
     bea:	53 e0       	ldi	r21, 0x03	; 3
     bec:	22 0f       	add	r18, r18
     bee:	33 1f       	adc	r19, r19
     bf0:	5a 95       	dec	r21
     bf2:	e1 f7       	brne	.-8      	; 0xbec <_ZN12OrangutanLCD8sendDataEh+0x16>
     bf4:	24 2b       	or	r18, r20
     bf6:	6d 7c       	andi	r22, 0xCD	; 205
     bf8:	26 2b       	or	r18, r22
     bfa:	25 b9       	out	0x05, r18	; 5
	PORTD = (PORTD & ~LCD_PORTD_MASK) | LCD_PORTD_DATA(data);
     bfc:	2b b1       	in	r18, 0x0b	; 11
     bfe:	88 70       	andi	r24, 0x08	; 8
     c00:	90 70       	andi	r25, 0x00	; 0
     c02:	34 e0       	ldi	r19, 0x04	; 4
     c04:	88 0f       	add	r24, r24
     c06:	99 1f       	adc	r25, r25
     c08:	3a 95       	dec	r19
     c0a:	e1 f7       	brne	.-8      	; 0xc04 <_ZN12OrangutanLCD8sendDataEh+0x2e>
     c0c:	2f 77       	andi	r18, 0x7F	; 127
     c0e:	28 2b       	or	r18, r24
     c10:	2b b9       	out	0x0b, r18	; 11

	// At this point the four data lines are set, so the Enable pin 
	// is strobed to let the LCD latch them.

	// Bring E high
	LCD_E_PORT |= 1 << LCD_E;
     c12:	5c 9a       	sbi	0x0b, 4	; 11
	
	// Wait => 450ns (1us is excessive)
	delayMicroseconds(1);
     c14:	0e 94 b0 05 	call	0xb60	; 0xb60 <delayMicroseconds.clone.0>

	// Bring E low
	LCD_E_PORT &= ~(1 << LCD_E);
     c18:	5c 98       	cbi	0x0b, 4	; 11

	delayMicroseconds(1);
     c1a:	0e 94 b0 05 	call	0xb60	; 0xb60 <delayMicroseconds.clone.0>
	// Dropping out of the routine will take at least 10ns, the time
	// given by the datasheet for the LCD controller to read the
	// nibble on the falling edge of E

	// Our nibble has now been sent to the LCD.
}
     c1e:	08 95       	ret

00000c20 <_ZN12OrangutanLCD4sendEhhh>:


// Send either data or a command
void OrangutanLCD::send(unsigned char data, unsigned char rs, unsigned char numSends)
{	
     c20:	a2 e0       	ldi	r26, 0x02	; 2
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	e6 e1       	ldi	r30, 0x16	; 22
     c26:	f6 e0       	ldi	r31, 0x06	; 6
     c28:	0c 94 14 0b 	jmp	0x1628	; 0x1628 <__prologue_saves__+0x16>
     c2c:	e8 2e       	mov	r14, r24
	init();  // initialize the LCD if we haven't already
     c2e:	4a 83       	std	Y+2, r20	; 0x02
     c30:	69 83       	std	Y+1, r22	; 0x01
     c32:	0e 94 b9 06 	call	0xd72	; 0xd72 <_ZN12OrangutanLCD4initEv>

	// Wait until the busy flag clears
	busyWait();
     c36:	0e 94 bb 05 	call	0xb76	; 0xb76 <_ZN12OrangutanLCD8busyWaitEv>
	unsigned char temp_ddrc, temp_portc;
	temp_ddrc = DDRC;
	temp_portc = PORTC;
#else
	unsigned char temp_ddrb, temp_portb, temp_ddrd, temp_portd;
	temp_ddrb = DDRB;
     c3a:	14 b1       	in	r17, 0x04	; 4
	temp_portb = PORTB;
     c3c:	d5 b0       	in	r13, 0x05	; 5
	temp_ddrd = DDRD;
     c3e:	fa b0       	in	r15, 0x0a	; 10
	temp_portd = PORTD;
     c40:	0b b1       	in	r16, 0x0b	; 11
#endif

	// Clear RW and set or clear RS based on the rs argument
	LCD_RW_PORT &= ~(1 << LCD_RW);
     c42:	28 98       	cbi	0x05, 0	; 5
	if (rs)
     c44:	69 81       	ldd	r22, Y+1	; 0x01
     c46:	4a 81       	ldd	r20, Y+2	; 0x02
     c48:	66 23       	and	r22, r22
     c4a:	11 f0       	breq	.+4      	; 0xc50 <_ZN12OrangutanLCD4sendEhhh+0x30>
		LCD_RS_PORT |= 1 << LCD_RS;
     c4c:	5a 9a       	sbi	0x0b, 2	; 11
     c4e:	01 c0       	rjmp	.+2      	; 0xc52 <_ZN12OrangutanLCD4sendEhhh+0x32>
	else
		LCD_RS_PORT &= ~(1 << LCD_RS);
     c50:	5a 98       	cbi	0x0b, 2	; 11
#else

  #ifdef _ORANGUTAN_SVP
	DDRC |= LCD_PORTC_MASK;
  #else
	DDRB |= LCD_PORTB_MASK;
     c52:	84 b1       	in	r24, 0x04	; 4
     c54:	82 63       	ori	r24, 0x32	; 50
     c56:	84 b9       	out	0x04, r24	; 4
	DDRD |= LCD_PORTD_MASK;
     c58:	57 9a       	sbi	0x0a, 7	; 10
  #endif  // ifdef _ORANGUTAN_SVP

	if (numSends != 1)
     c5a:	41 30       	cpi	r20, 0x01	; 1
     c5c:	29 f0       	breq	.+10     	; 0xc68 <_ZN12OrangutanLCD4sendEhhh+0x48>
		sendData(data >> 4);	// send high nibble via 4-bit interface
     c5e:	8e 2d       	mov	r24, r14
     c60:	82 95       	swap	r24
     c62:	8f 70       	andi	r24, 0x0F	; 15
     c64:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <_ZN12OrangutanLCD8sendDataEh>
	sendData(data & 0x0F);	// send low nibble via 4-bit interface
     c68:	8e 2d       	mov	r24, r14
     c6a:	8f 70       	andi	r24, 0x0F	; 15
     c6c:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <_ZN12OrangutanLCD8sendDataEh>
	// Restore our DDR and port information
#if defined(_ORANGUTAN_SVP) || defined(_ORANGUTAN_X2)
	DDRC = temp_ddrc;
	PORTC = temp_portc;
#else
	DDRD = temp_ddrd;
     c70:	fa b8       	out	0x0a, r15	; 10
	PORTD = temp_portd;
     c72:	0b b9       	out	0x0b, r16	; 11
	DDRB = temp_ddrb;
     c74:	14 b9       	out	0x04, r17	; 4
	PORTB = temp_portb;
     c76:	d5 b8       	out	0x05, r13	; 5
#endif
}
     c78:	22 96       	adiw	r28, 0x02	; 2
     c7a:	e7 e0       	ldi	r30, 0x07	; 7
     c7c:	0c 94 30 0b 	jmp	0x1660	; 0x1660 <__epilogue_restores__+0x16>

00000c80 <_ZN12OrangutanLCD8send_cmdEh>:
	// sent via a single 8-bit transfer.
	static void send(unsigned char data, unsigned char rs, unsigned char numSends);
	
	static inline void send_cmd(unsigned char cmd)
	{
		send(cmd, 0, 2);
     c80:	60 e0       	ldi	r22, 0x00	; 0
     c82:	42 e0       	ldi	r20, 0x02	; 2
     c84:	0e 94 10 06 	call	0xc20	; 0xc20 <_ZN12OrangutanLCD4sendEhhh>
	}
     c88:	08 95       	ret

00000c8a <_ZN12OrangutanLCD9send_dataEh>:
		send(cmd, 0, 1);
	}

	static inline void send_data(unsigned char data)
	{
		send(data, 1, 2);
     c8a:	61 e0       	ldi	r22, 0x01	; 1
     c8c:	42 e0       	ldi	r20, 0x02	; 2
     c8e:	0e 94 10 06 	call	0xc20	; 0xc20 <_ZN12OrangutanLCD4sendEhhh>
	}
     c92:	08 95       	ret

00000c94 <_ZN12OrangutanLCD19loadCustomCharacterEPKch>:

#define LCD_CGRAM   6

// Loads a custom character
void OrangutanLCD::loadCustomCharacter(const char *picture_p, unsigned char number)
{
     c94:	ef 92       	push	r14
     c96:	ff 92       	push	r15
     c98:	1f 93       	push	r17
     c9a:	df 93       	push	r29
     c9c:	cf 93       	push	r28
     c9e:	0f 92       	push	r0
     ca0:	cd b7       	in	r28, 0x3d	; 61
     ca2:	de b7       	in	r29, 0x3e	; 62
  unsigned char i;

  // Each character takes up 8 bytes of the character memory, so we
  // multiply by 8 to get the address.
  number *= 8;
     ca4:	66 0f       	add	r22, r22
     ca6:	66 0f       	add	r22, r22
     ca8:	66 0f       	add	r22, r22
     caa:	7c 01       	movw	r14, r24

  for(i=0; i<8; i++)
     cac:	10 e0       	ldi	r17, 0x00	; 0


#define LCD_CGRAM   6

// Loads a custom character
void OrangutanLCD::loadCustomCharacter(const char *picture_p, unsigned char number)
     cae:	81 2f       	mov	r24, r17
     cb0:	86 0f       	add	r24, r22
  number *= 8;

  for(i=0; i<8; i++)
  {
    // set CG RAM address
    send_cmd((1<<LCD_CGRAM) | (number+i));
     cb2:	80 64       	ori	r24, 0x40	; 64
     cb4:	69 83       	std	Y+1, r22	; 0x01
     cb6:	0e 94 40 06 	call	0xc80	; 0xc80 <_ZN12OrangutanLCD8send_cmdEh>

    // write character data
    send_data(pgm_read_byte(picture_p+i));
     cba:	f7 01       	movw	r30, r14
     cbc:	84 91       	lpm	r24, Z+
     cbe:	0e 94 45 06 	call	0xc8a	; 0xc8a <_ZN12OrangutanLCD9send_dataEh>

  // Each character takes up 8 bytes of the character memory, so we
  // multiply by 8 to get the address.
  number *= 8;

  for(i=0; i<8; i++)
     cc2:	1f 5f       	subi	r17, 0xFF	; 255
     cc4:	08 94       	sec
     cc6:	e1 1c       	adc	r14, r1
     cc8:	f1 1c       	adc	r15, r1
     cca:	69 81       	ldd	r22, Y+1	; 0x01
     ccc:	18 30       	cpi	r17, 0x08	; 8
     cce:	79 f7       	brne	.-34     	; 0xcae <_ZN12OrangutanLCD19loadCustomCharacterEPKch+0x1a>
    send_cmd((1<<LCD_CGRAM) | (number+i));

    // write character data
    send_data(pgm_read_byte(picture_p+i));
  }
}
     cd0:	0f 90       	pop	r0
     cd2:	cf 91       	pop	r28
     cd4:	df 91       	pop	r29
     cd6:	1f 91       	pop	r17
     cd8:	ff 90       	pop	r15
     cda:	ef 90       	pop	r14
     cdc:	08 95       	ret

00000cde <lcd_load_custom_character>:
	OrangutanLCD::scroll(direction, num, delay_time);
}

extern "C" void lcd_load_custom_character(const char *picture_p, unsigned char number)
{
	OrangutanLCD::loadCustomCharacter(picture_p, number);
     cde:	0e 94 4a 06 	call	0xc94	; 0xc94 <_ZN12OrangutanLCD19loadCustomCharacterEPKch>
}
     ce2:	08 95       	ret

00000ce4 <print_character>:


// prints a single character at the current cursor location
void OrangutanLCD::print(char character)
{
	send_data(character);
     ce4:	0e 94 45 06 	call	0xc8a	; 0xc8a <_ZN12OrangutanLCD9send_dataEh>
}

extern "C" void print_character(char c)
{
	OrangutanLCD::print(c);
}
     ce8:	08 95       	ret

00000cea <_ZN12OrangutanLCD13send_4bit_cmdEh>:
		send(cmd, 0, 2);
	}

	static inline void send_4bit_cmd(unsigned char cmd)
	{
		send(cmd, 0, 1);
     cea:	60 e0       	ldi	r22, 0x00	; 0
     cec:	41 e0       	ldi	r20, 0x01	; 1
     cee:	0e 94 10 06 	call	0xc20	; 0xc20 <_ZN12OrangutanLCD4sendEhhh>
	}
     cf2:	08 95       	ret

00000cf4 <_ZN12OrangutanLCD5init2Ev>:
	LCD_BF_DDR &= ~LCD_BF_MASK;		// make pull-up pin an input
	LCD_BF_PORT |= LCD_BF_MASK;		// enable pull-up on BF pin
	lcdTimeout = 30000;		// 20ms

#else
	lcdTimeout = 10000;		// 3ms
     cf4:	80 e1       	ldi	r24, 0x10	; 16
     cf6:	97 e2       	ldi	r25, 0x27	; 39
     cf8:	a0 e0       	ldi	r26, 0x00	; 0
     cfa:	b0 e0       	ldi	r27, 0x00	; 0
     cfc:	80 93 55 01 	sts	0x0155, r24
     d00:	90 93 56 01 	sts	0x0156, r25
     d04:	a0 93 57 01 	sts	0x0157, r26
     d08:	b0 93 58 01 	sts	0x0158, r27
#endif
	
	// Set up the DDR for the LCD control lines
	LCD_RS_DDR |= 1 << LCD_RS;
     d0c:	52 9a       	sbi	0x0a, 2	; 10
	LCD_RW_DDR |= 1 << LCD_RW;
     d0e:	20 9a       	sbi	0x04, 0	; 4
	LCD_E_DDR |= 1 << LCD_E;
     d10:	54 9a       	sbi	0x0a, 4	; 10
		    : "0" ( microseconds )
		    );  
}

// These are alternative aliases:
static inline void delay(unsigned int milliseconds) { delay_ms(milliseconds); }
     d12:	8e e1       	ldi	r24, 0x1E	; 30
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	0e 94 ff 09 	call	0x13fe	; 0x13fe <delay_ms>
	delay(2);	// wait >100us
	send_cmd(0x38);	// 8-bit, 2 line, 5x8 dots char (busy flag is now valid)

#else	// Orangutan SVP, LV, SV, and 3pi robot

	send_4bit_cmd(0x3);	// function set
     d1a:	83 e0       	ldi	r24, 0x03	; 3
     d1c:	0e 94 75 06 	call	0xcea	; 0xcea <_ZN12OrangutanLCD13send_4bit_cmdEh>
     d20:	86 e0       	ldi	r24, 0x06	; 6
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	0e 94 ff 09 	call	0x13fe	; 0x13fe <delay_ms>
	delay(6);	// wait >4.1ms
	send_4bit_cmd(0x3);	// function set
     d28:	83 e0       	ldi	r24, 0x03	; 3
     d2a:	0e 94 75 06 	call	0xcea	; 0xcea <_ZN12OrangutanLCD13send_4bit_cmdEh>
     d2e:	82 e0       	ldi	r24, 0x02	; 2
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	0e 94 ff 09 	call	0x13fe	; 0x13fe <delay_ms>
	delay(2);	// wait >100us
	send_4bit_cmd(0x3);	// function set
     d36:	83 e0       	ldi	r24, 0x03	; 3
     d38:	0e 94 75 06 	call	0xcea	; 0xcea <_ZN12OrangutanLCD13send_4bit_cmdEh>
     d3c:	82 e0       	ldi	r24, 0x02	; 2
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	0e 94 ff 09 	call	0x13fe	; 0x13fe <delay_ms>
	delay(2);	// wait >100us
	send_4bit_cmd(0x2);	// 4-bit interface
     d44:	82 e0       	ldi	r24, 0x02	; 2
     d46:	0e 94 75 06 	call	0xcea	; 0xcea <_ZN12OrangutanLCD13send_4bit_cmdEh>
     d4a:	82 e0       	ldi	r24, 0x02	; 2
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	0e 94 ff 09 	call	0x13fe	; 0x13fe <delay_ms>
	delay(2);
	send_cmd(0x28);	// 4-bit, 2 line, 5x8 dots char (busy flag is now valid)
     d52:	88 e2       	ldi	r24, 0x28	; 40
     d54:	0e 94 40 06 	call	0xc80	; 0xc80 <_ZN12OrangutanLCD8send_cmdEh>

#endif

	send_cmd(0x08);	// display off, cursor off, blinking off
     d58:	88 e0       	ldi	r24, 0x08	; 8
     d5a:	0e 94 40 06 	call	0xc80	; 0xc80 <_ZN12OrangutanLCD8send_cmdEh>
	send_cmd(0x01);	// clear display
     d5e:	81 e0       	ldi	r24, 0x01	; 1
     d60:	0e 94 40 06 	call	0xc80	; 0xc80 <_ZN12OrangutanLCD8send_cmdEh>
	send_cmd(0x06);	// set entry mode: cursor shifts right, no scrolling
     d64:	86 e0       	ldi	r24, 0x06	; 6
     d66:	0e 94 40 06 	call	0xc80	; 0xc80 <_ZN12OrangutanLCD8send_cmdEh>
	send_cmd(0x0C);	// display on, cursor off, blinking off
     d6a:	8c e0       	ldi	r24, 0x0C	; 12
     d6c:	0e 94 40 06 	call	0xc80	; 0xc80 <_ZN12OrangutanLCD8send_cmdEh>
}
     d70:	08 95       	ret

00000d72 <_ZN12OrangutanLCD4initEv>:
  
	static inline void init()
	{
		static unsigned char initialized = 0;

		if (!initialized)
     d72:	80 91 59 01 	lds	r24, 0x0159
     d76:	88 23       	and	r24, r24
     d78:	29 f4       	brne	.+10     	; 0xd84 <_ZN12OrangutanLCD4initEv+0x12>
		{
			initialized = 1;
     d7a:	81 e0       	ldi	r24, 0x01	; 1
     d7c:	80 93 59 01 	sts	0x0159, r24
			init2();
     d80:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <_ZN12OrangutanLCD5init2Ev>
     d84:	08 95       	ret

00000d86 <_ZN12OrangutanLCD5clearEv>:


// clears the LCD screen and returns the cursor to position (0, 0)
void OrangutanLCD::clear()
{
	send_cmd(LCD_CLEAR);
     d86:	81 e0       	ldi	r24, 0x01	; 1
     d88:	0e 94 40 06 	call	0xc80	; 0xc80 <_ZN12OrangutanLCD8send_cmdEh>

	if (printf_chars == 0)		// if we haven't used printf(), return now
     d8c:	80 91 51 01 	lds	r24, 0x0151
     d90:	90 91 52 01 	lds	r25, 0x0152
     d94:	00 97       	sbiw	r24, 0x00	; 0
     d96:	11 f1       	breq	.+68     	; 0xddc <_ZN12OrangutanLCD5clearEv+0x56>
     d98:	a0 e0       	ldi	r26, 0x00	; 0

	unsigned char i;

	// clear out the LCD
	for(i = 0; i < SAVED_CHARS; i++)
		printf_chars[i] = ' ';
     d9a:	b0 e2       	ldi	r27, 0x20	; 32
     d9c:	08 c0       	rjmp	.+16     	; 0xdae <_ZN12OrangutanLCD5clearEv+0x28>
     d9e:	e0 91 51 01 	lds	r30, 0x0151
     da2:	f0 91 52 01 	lds	r31, 0x0152
     da6:	e2 0f       	add	r30, r18
     da8:	f3 1f       	adc	r31, r19
     daa:	b0 83       	st	Z, r27
		return;

	unsigned char i;

	// clear out the LCD
	for(i = 0; i < SAVED_CHARS; i++)
     dac:	af 5f       	subi	r26, 0xFF	; 255
     dae:	2a 2f       	mov	r18, r26
     db0:	30 e0       	ldi	r19, 0x00	; 0
     db2:	80 91 40 01 	lds	r24, 0x0140
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	01 97       	sbiw	r24, 0x01	; 1
     dba:	60 91 41 01 	lds	r22, 0x0141
     dbe:	70 e0       	ldi	r23, 0x00	; 0
     dc0:	86 9f       	mul	r24, r22
     dc2:	a0 01       	movw	r20, r0
     dc4:	87 9f       	mul	r24, r23
     dc6:	50 0d       	add	r21, r0
     dc8:	96 9f       	mul	r25, r22
     dca:	50 0d       	add	r21, r0
     dcc:	11 24       	eor	r1, r1
     dce:	24 17       	cp	r18, r20
     dd0:	35 07       	cpc	r19, r21
     dd2:	2c f3       	brlt	.-54     	; 0xd9e <_ZN12OrangutanLCD5clearEv+0x18>
		printf_chars[i] = ' ';

	col = 0;
     dd4:	10 92 54 01 	sts	0x0154, r1
	row = 0;
     dd8:	10 92 53 01 	sts	0x0153, r1
     ddc:	08 95       	ret

00000dde <clear>:
	OrangutanLCD::initPrintf(width, height);
}

extern "C" void clear()
{
	OrangutanLCD::clear();
     dde:	0e 94 c3 06 	call	0xd86	; 0xd86 <_ZN12OrangutanLCD5clearEv>
}
     de2:	08 95       	ret

00000de4 <_ZN12OrangutanLCD5printEc>:


// prints a single character at the current cursor location
void OrangutanLCD::print(char character)
{
	send_data(character);
     de4:	0e 94 45 06 	call	0xc8a	; 0xc8a <_ZN12OrangutanLCD9send_dataEh>
}
     de8:	08 95       	ret

00000dea <_ZN12OrangutanLCD5printEPKc>:

// sends a string to the LCD.  The string is printed from 
// wherever the cursor is and will not span lines.  (This lets you 
// concatenate print statements.)
void OrangutanLCD::print(const char *str)
{
     dea:	cf 93       	push	r28
     dec:	df 93       	push	r29
     dee:	c8 2f       	mov	r28, r24
     df0:	d9 2f       	mov	r29, r25
	while (*str != 0)
     df2:	02 c0       	rjmp	.+4      	; 0xdf8 <_ZN12OrangutanLCD5printEPKc+0xe>
		send_data(*str++);
     df4:	0e 94 45 06 	call	0xc8a	; 0xc8a <_ZN12OrangutanLCD9send_dataEh>
// sends a string to the LCD.  The string is printed from 
// wherever the cursor is and will not span lines.  (This lets you 
// concatenate print statements.)
void OrangutanLCD::print(const char *str)
{
	while (*str != 0)
     df8:	89 91       	ld	r24, Y+
     dfa:	88 23       	and	r24, r24
     dfc:	d9 f7       	brne	.-10     	; 0xdf4 <_ZN12OrangutanLCD5printEPKc+0xa>
		send_data(*str++);
}
     dfe:	df 91       	pop	r29
     e00:	cf 91       	pop	r28
     e02:	08 95       	ret

00000e04 <print>:
	OrangutanLCD::clear();
}

extern "C" void print(const char *str)
{
	OrangutanLCD::print(str);
     e04:	0e 94 f5 06 	call	0xdea	; 0xdea <_ZN12OrangutanLCD5printEPKc>
}
     e08:	08 95       	ret

00000e0a <_ZN12OrangutanLCD21printFromProgramSpaceEPKc>:

// sends a string to the LCD.  The string is printed from 
// wherever the cursor is and will not span lines.  (This lets you 
// concatenate print statements.)
void OrangutanLCD::printFromProgramSpace(const char *str)
{
     e0a:	cf 93       	push	r28
     e0c:	df 93       	push	r29
     e0e:	ec 01       	movw	r28, r24
	char c;
	while ((c = pgm_read_byte(str)) != 0)
     e10:	03 c0       	rjmp	.+6      	; 0xe18 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc+0xe>
	{
		send_data(c);
     e12:	0e 94 45 06 	call	0xc8a	; 0xc8a <_ZN12OrangutanLCD9send_dataEh>
		str ++;
     e16:	21 96       	adiw	r28, 0x01	; 1
// wherever the cursor is and will not span lines.  (This lets you 
// concatenate print statements.)
void OrangutanLCD::printFromProgramSpace(const char *str)
{
	char c;
	while ((c = pgm_read_byte(str)) != 0)
     e18:	fe 01       	movw	r30, r28
     e1a:	84 91       	lpm	r24, Z+
     e1c:	88 23       	and	r24, r24
     e1e:	c9 f7       	brne	.-14     	; 0xe12 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc+0x8>
	{
		send_data(c);
		str ++;
	}
}
     e20:	df 91       	pop	r29
     e22:	cf 91       	pop	r28
     e24:	08 95       	ret

00000e26 <print_from_program_space>:
	OrangutanLCD::print(str);
}

extern "C" void print_from_program_space(const char *str)
{
	OrangutanLCD::printFromProgramSpace(str);
     e26:	0e 94 05 07 	call	0xe0a	; 0xe0a <_ZN12OrangutanLCD21printFromProgramSpaceEPKc>
}
     e2a:	08 95       	ret

00000e2c <_ZN12OrangutanLCD7printInEPKc>:

// other LCD libraries have this incorrectly named method, so it is here to
// provide some semblance of compatibility
void OrangutanLCD::printIn(const char *str)
{
	print(str);
     e2c:	0e 94 f5 06 	call	0xdea	; 0xdea <_ZN12OrangutanLCD5printEPKc>
}
     e30:	08 95       	ret

00000e32 <_ZN12OrangutanLCD5printEm>:

// prints an unsigned long.  This prints from wherever the cursor is and will
// not span lines.  (This lets you concatenate print statements.)  This
// will only print as many characters as there are digits in the number.
void OrangutanLCD::print(unsigned long value)
{
     e32:	aa e0       	ldi	r26, 0x0A	; 10
     e34:	b0 e0       	ldi	r27, 0x00	; 0
     e36:	ef e1       	ldi	r30, 0x1F	; 31
     e38:	f7 e0       	ldi	r31, 0x07	; 7
     e3a:	0c 94 11 0b 	jmp	0x1622	; 0x1622 <__prologue_saves__+0x10>
     e3e:	9b 01       	movw	r18, r22
     e40:	ac 01       	movw	r20, r24
	unsigned char str[10];
	unsigned char i = 10;
     e42:	1a e0       	ldi	r17, 0x0A	; 10
	unsigned char digit;

	do
	{
		digit = value;
		value /= 10;
     e44:	ea e0       	ldi	r30, 0x0A	; 10
     e46:	ce 2e       	mov	r12, r30
     e48:	d1 2c       	mov	r13, r1
     e4a:	e1 2c       	mov	r14, r1
     e4c:	f1 2c       	mov	r15, r1
		digit -= value * 10;
		str[--i] = '0' + (unsigned char)digit;
     e4e:	5e 01       	movw	r10, r28
     e50:	08 94       	sec
     e52:	a1 1c       	adc	r10, r1
     e54:	b1 1c       	adc	r11, r1
    // print_long on the Orangutan SVP, but I don't know why.  -David
	unsigned char digit;

	do
	{
		digit = value;
     e56:	02 2f       	mov	r16, r18
		value /= 10;
     e58:	ca 01       	movw	r24, r20
     e5a:	b9 01       	movw	r22, r18
     e5c:	a7 01       	movw	r20, r14
     e5e:	96 01       	movw	r18, r12
     e60:	0e 94 cc 0a 	call	0x1598	; 0x1598 <__udivmodsi4>
		digit -= value * 10;
		str[--i] = '0' + (unsigned char)digit;
     e64:	11 50       	subi	r17, 0x01	; 1
     e66:	f5 01       	movw	r30, r10
     e68:	e1 0f       	add	r30, r17
     e6a:	f1 1d       	adc	r31, r1

	do
	{
		digit = value;
		value /= 10;
		digit -= value * 10;
     e6c:	00 5d       	subi	r16, 0xD0	; 208
     e6e:	92 2f       	mov	r25, r18
     e70:	99 0f       	add	r25, r25
     e72:	89 2f       	mov	r24, r25
     e74:	88 0f       	add	r24, r24
     e76:	88 0f       	add	r24, r24
     e78:	89 0f       	add	r24, r25
		str[--i] = '0' + (unsigned char)digit;
     e7a:	08 1b       	sub	r16, r24
     e7c:	00 83       	st	Z, r16

    // Changed digit from a long to char 2009-11-20.  This fixed a bug with
    // print_long on the Orangutan SVP, but I don't know why.  -David
	unsigned char digit;

	do
     e7e:	21 15       	cp	r18, r1
     e80:	31 05       	cpc	r19, r1
     e82:	41 05       	cpc	r20, r1
     e84:	51 05       	cpc	r21, r1
     e86:	39 f7       	brne	.-50     	; 0xe56 <_ZN12OrangutanLCD5printEm+0x24>
     e88:	08 c0       	rjmp	.+16     	; 0xe9a <_ZN12OrangutanLCD5printEm+0x68>
		str[--i] = '0' + (unsigned char)digit;
	}
	while (value != 0);

	for(; i < 10; i++)
		send_data(str[i]);
     e8a:	f6 01       	movw	r30, r12
     e8c:	e1 0f       	add	r30, r17
     e8e:	f1 1d       	adc	r31, r1
     e90:	80 81       	ld	r24, Z
     e92:	0e 94 45 06 	call	0xc8a	; 0xc8a <_ZN12OrangutanLCD9send_dataEh>
		digit -= value * 10;
		str[--i] = '0' + (unsigned char)digit;
	}
	while (value != 0);

	for(; i < 10; i++)
     e96:	1f 5f       	subi	r17, 0xFF	; 255
     e98:	04 c0       	rjmp	.+8      	; 0xea2 <_ZN12OrangutanLCD5printEm+0x70>
		send_data(str[i]);
     e9a:	6e 01       	movw	r12, r28
     e9c:	08 94       	sec
     e9e:	c1 1c       	adc	r12, r1
     ea0:	d1 1c       	adc	r13, r1
		digit -= value * 10;
		str[--i] = '0' + (unsigned char)digit;
	}
	while (value != 0);

	for(; i < 10; i++)
     ea2:	1a 30       	cpi	r17, 0x0A	; 10
     ea4:	90 f3       	brcs	.-28     	; 0xe8a <_ZN12OrangutanLCD5printEm+0x58>
		send_data(str[i]);
}
     ea6:	2a 96       	adiw	r28, 0x0a	; 10
     ea8:	ea e0       	ldi	r30, 0x0A	; 10
     eaa:	0c 94 2d 0b 	jmp	0x165a	; 0x165a <__epilogue_restores__+0x10>

00000eae <_ZN12OrangutanLCD5printEl>:
// prints a signed long.  This prints from wherever the cursor is and will not
// span lines.  (This lets you concatenate print statements.)  This function
// will only print as many characters as there are digits in the number (plus
// a minus sign if the number is negative).
void OrangutanLCD::print(long value)
{
     eae:	ef 92       	push	r14
     eb0:	ff 92       	push	r15
     eb2:	0f 93       	push	r16
     eb4:	1f 93       	push	r17
     eb6:	7b 01       	movw	r14, r22
     eb8:	8c 01       	movw	r16, r24
	if (value < 0)
     eba:	97 ff       	sbrs	r25, 7
     ebc:	0b c0       	rjmp	.+22     	; 0xed4 <_ZN12OrangutanLCD5printEl+0x26>
	{
		value = -value;
     ebe:	10 95       	com	r17
     ec0:	00 95       	com	r16
     ec2:	f0 94       	com	r15
     ec4:	e0 94       	com	r14
     ec6:	e1 1c       	adc	r14, r1
     ec8:	f1 1c       	adc	r15, r1
     eca:	01 1d       	adc	r16, r1
     ecc:	11 1d       	adc	r17, r1
		send_data('-');		// print the minus sign
     ece:	8d e2       	ldi	r24, 0x2D	; 45
     ed0:	0e 94 45 06 	call	0xc8a	; 0xc8a <_ZN12OrangutanLCD9send_dataEh>
	}
	print((unsigned long)value);
     ed4:	c8 01       	movw	r24, r16
     ed6:	b7 01       	movw	r22, r14
     ed8:	0e 94 19 07 	call	0xe32	; 0xe32 <_ZN12OrangutanLCD5printEm>
}
     edc:	1f 91       	pop	r17
     ede:	0f 91       	pop	r16
     ee0:	ff 90       	pop	r15
     ee2:	ef 90       	pop	r14
     ee4:	08 95       	ret

00000ee6 <print_long>:
	OrangutanLCD::print(c);
}

extern "C" void print_long(long value)
{
	OrangutanLCD::print(value);
     ee6:	0e 94 57 07 	call	0xeae	; 0xeae <_ZN12OrangutanLCD5printEl>
}
     eea:	08 95       	ret

00000eec <print_unsigned_long>:

extern "C" void print_unsigned_long(unsigned long value)
{
	OrangutanLCD::print(value);
     eec:	0e 94 19 07 	call	0xe32	; 0xe32 <_ZN12OrangutanLCD5printEm>
}
     ef0:	08 95       	ret

00000ef2 <_ZN12OrangutanLCD14printHexNibbleEh>:


// display a hex nibble (half of a hex byte) at your current cursor location
void OrangutanLCD::printHexNibble(unsigned char nibble)
{
	if (nibble < 10)
     ef2:	8a 30       	cpi	r24, 0x0A	; 10
     ef4:	10 f4       	brcc	.+4      	; 0xefa <_ZN12OrangutanLCD14printHexNibbleEh+0x8>
		send_data('0' + nibble);
     ef6:	80 5d       	subi	r24, 0xD0	; 208
     ef8:	01 c0       	rjmp	.+2      	; 0xefc <_ZN12OrangutanLCD14printHexNibbleEh+0xa>
	else
		send_data('A' + (nibble - 10));
     efa:	89 5c       	subi	r24, 0xC9	; 201
     efc:	0e 94 45 06 	call	0xc8a	; 0xc8a <_ZN12OrangutanLCD9send_dataEh>
     f00:	08 95       	ret

00000f02 <_ZN12OrangutanLCD8printHexEh>:
	printHex((unsigned char)word);
}

// display a single-byte value in hex (00 - FF) at the current cursor location
void OrangutanLCD::printHex(unsigned char byte)
{
     f02:	cf 93       	push	r28
     f04:	c8 2f       	mov	r28, r24
	printHexNibble(byte >> 4);	 // display high byte high nibble
     f06:	82 95       	swap	r24
     f08:	8f 70       	andi	r24, 0x0F	; 15
     f0a:	0e 94 79 07 	call	0xef2	; 0xef2 <_ZN12OrangutanLCD14printHexNibbleEh>
	printHexNibble(byte & 0x0F); // display high byte low nibble
     f0e:	8c 2f       	mov	r24, r28
     f10:	8f 70       	andi	r24, 0x0F	; 15
     f12:	0e 94 79 07 	call	0xef2	; 0xef2 <_ZN12OrangutanLCD14printHexNibbleEh>
}
     f16:	cf 91       	pop	r28
     f18:	08 95       	ret

00000f1a <_ZN12OrangutanLCD8printHexEj>:
		send_data('A' + (nibble - 10));
}

// display a two-byte value in hex (0000 - FFFF) at the current cursor location
void OrangutanLCD::printHex(unsigned int word)
{
     f1a:	cf 93       	push	r28
     f1c:	c8 2f       	mov	r28, r24
	printHex((unsigned char)(word >> 8));
     f1e:	89 2f       	mov	r24, r25
     f20:	0e 94 81 07 	call	0xf02	; 0xf02 <_ZN12OrangutanLCD8printHexEh>
	printHex((unsigned char)word);
     f24:	8c 2f       	mov	r24, r28
     f26:	0e 94 81 07 	call	0xf02	; 0xf02 <_ZN12OrangutanLCD8printHexEh>
}
     f2a:	cf 91       	pop	r28
     f2c:	08 95       	ret

00000f2e <print_hex>:
	OrangutanLCD::print(value);
}

extern "C" void print_hex(unsigned int value)
{
	OrangutanLCD::printHex(value);
     f2e:	0e 94 8d 07 	call	0xf1a	; 0xf1a <_ZN12OrangutanLCD8printHexEj>
}
     f32:	08 95       	ret

00000f34 <print_hex_byte>:

extern "C" void print_hex_byte(unsigned char value)
{
	OrangutanLCD::printHex(value);
     f34:	0e 94 81 07 	call	0xf02	; 0xf02 <_ZN12OrangutanLCD8printHexEh>
}
     f38:	08 95       	ret

00000f3a <_ZN12OrangutanLCD11printBinaryEh>:
}


// display a byte in binary starting at your current cursor location
void OrangutanLCD::printBinary(unsigned char byte)
{
     f3a:	1f 93       	push	r17
     f3c:	cf 93       	push	r28
     f3e:	df 93       	push	r29
     f40:	18 2f       	mov	r17, r24
     f42:	d8 e0       	ldi	r29, 0x08	; 8
	unsigned char i, bitmask;

	bitmask = 1 << 7;
     f44:	c0 e8       	ldi	r28, 0x80	; 128
	for (i = 0; i < 8; i++)
	{
		if (byte & bitmask)
     f46:	8c 2f       	mov	r24, r28
     f48:	81 23       	and	r24, r17
     f4a:	11 f0       	breq	.+4      	; 0xf50 <_ZN12OrangutanLCD11printBinaryEh+0x16>
			send_data('1');
     f4c:	81 e3       	ldi	r24, 0x31	; 49
     f4e:	01 c0       	rjmp	.+2      	; 0xf52 <_ZN12OrangutanLCD11printBinaryEh+0x18>
		else
			send_data('0');
     f50:	80 e3       	ldi	r24, 0x30	; 48
     f52:	0e 94 45 06 	call	0xc8a	; 0xc8a <_ZN12OrangutanLCD9send_dataEh>
     f56:	d1 50       	subi	r29, 0x01	; 1
void OrangutanLCD::printBinary(unsigned char byte)
{
	unsigned char i, bitmask;

	bitmask = 1 << 7;
	for (i = 0; i < 8; i++)
     f58:	11 f0       	breq	.+4      	; 0xf5e <_ZN12OrangutanLCD11printBinaryEh+0x24>
	{
		if (byte & bitmask)
			send_data('1');
		else
			send_data('0');
		bitmask >>= 1;
     f5a:	c6 95       	lsr	r28
     f5c:	f4 cf       	rjmp	.-24     	; 0xf46 <_ZN12OrangutanLCD11printBinaryEh+0xc>
	}
}
     f5e:	df 91       	pop	r29
     f60:	cf 91       	pop	r28
     f62:	1f 91       	pop	r17
     f64:	08 95       	ret

00000f66 <print_binary>:
	OrangutanLCD::printHex(value);
}

extern "C" void print_binary(unsigned char value)
{
	OrangutanLCD::printBinary(value);
     f66:	0e 94 9d 07 	call	0xf3a	; 0xf3a <_ZN12OrangutanLCD11printBinaryEh>
}
     f6a:	08 95       	ret

00000f6c <_ZN12OrangutanLCD6gotoXYEhh>:

// moves the cursor to the specified (x, y) position
// x is a zero-based column indicator (0 <= x <= 7)
// y is a zero-based row indicator (0 <= y <= LCD rows-1)
void OrangutanLCD::gotoXY(unsigned char x, unsigned char y)
{
     f6c:	a5 e0       	ldi	r26, 0x05	; 5
     f6e:	b0 e0       	ldi	r27, 0x00	; 0
     f70:	ec eb       	ldi	r30, 0xBC	; 188
     f72:	f7 e0       	ldi	r31, 0x07	; 7
     f74:	0c 94 18 0b 	jmp	0x1630	; 0x1630 <__prologue_saves__+0x1e>
     f78:	18 2f       	mov	r17, r24
	// The actual memory locations are 0x00, and 0x40, but since
	// D7 needs to be high in order to set a new memory location, we can go
	// ahead and make the seventh bit of our memory location bytes to 1,
	// which makes the numbers 0x80 and 0xC0:

	unsigned char line_mem[] = {0x80, 0xC0, 0x94, 0xD4};
     f7a:	80 e8       	ldi	r24, 0x80	; 128
     f7c:	89 83       	std	Y+1, r24	; 0x01
     f7e:	80 ec       	ldi	r24, 0xC0	; 192
     f80:	8a 83       	std	Y+2, r24	; 0x02
     f82:	84 e9       	ldi	r24, 0x94	; 148
     f84:	8b 83       	std	Y+3, r24	; 0x03
     f86:	84 ed       	ldi	r24, 0xD4	; 212
     f88:	8c 83       	std	Y+4, r24	; 0x04

	// Grab the location in the LCD's memory of the start of line y,
	// and add X to it to get the right character location.
	send_cmd(line_mem[y] + x);
     f8a:	fe 01       	movw	r30, r28
     f8c:	e6 0f       	add	r30, r22
     f8e:	f1 1d       	adc	r31, r1
     f90:	81 81       	ldd	r24, Z+1	; 0x01
     f92:	81 0f       	add	r24, r17
     f94:	6d 83       	std	Y+5, r22	; 0x05
     f96:	0e 94 40 06 	call	0xc80	; 0xc80 <_ZN12OrangutanLCD8send_cmdEh>

	// Save it for use with printf.
	col = x;
     f9a:	10 93 54 01 	sts	0x0154, r17
	row = y;
     f9e:	6d 81       	ldd	r22, Y+5	; 0x05
     fa0:	60 93 53 01 	sts	0x0153, r22
}
     fa4:	25 96       	adiw	r28, 0x05	; 5
     fa6:	e3 e0       	ldi	r30, 0x03	; 3
     fa8:	0c 94 34 0b 	jmp	0x1668	; 0x1668 <__epilogue_restores__+0x1e>

00000fac <lcd_goto_xy>:
	return 0;
}

extern "C" void lcd_goto_xy(unsigned char col, unsigned char row)
{
	OrangutanLCD::gotoXY(col,row);
     fac:	0e 94 b6 07 	call	0xf6c	; 0xf6c <_ZN12OrangutanLCD6gotoXYEhh>
}
     fb0:	08 95       	ret

00000fb2 <lcd_putchar>:
unsigned char numLCDCols = LCD_WIDTH;
#define SAVED_CHARS		(numLCDCols*(numLCDRows-1))

// This function is called by printf.
extern "C" int lcd_putchar(char c, FILE *f)
{
     fb2:	a0 e0       	ldi	r26, 0x00	; 0
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
     fb6:	ef ed       	ldi	r30, 0xDF	; 223
     fb8:	f7 e0       	ldi	r31, 0x07	; 7
     fba:	0c 94 13 0b 	jmp	0x1626	; 0x1626 <__prologue_saves__+0x14>
     fbe:	d8 2e       	mov	r13, r24
	unsigned char nextline=0; /* should we go to next line after output? */
	unsigned char repos=0; /* should we relocate */
	unsigned char i;

	if (printf_chars == 0)
     fc0:	80 91 51 01 	lds	r24, 0x0151
     fc4:	90 91 52 01 	lds	r25, 0x0152
     fc8:	00 97       	sbiw	r24, 0x00	; 0
     fca:	09 f4       	brne	.+2      	; 0xfce <lcd_putchar+0x1c>
     fcc:	fa c0       	rjmp	.+500    	; 0x11c2 <lcd_putchar+0x210>
	{
		return c;
	}

	/* control characters */
	if (c == '\n')
     fce:	8d 2d       	mov	r24, r13
     fd0:	8a 30       	cpi	r24, 0x0A	; 10
     fd2:	09 f4       	brne	.+2      	; 0xfd6 <lcd_putchar+0x24>
     fd4:	43 c0       	rjmp	.+134    	; 0x105c <lcd_putchar+0xaa>
	{
		nextline = 1;
	}
	else if (c == 8) { // ^H
     fd6:	88 30       	cpi	r24, 0x08	; 8
     fd8:	c9 f4       	brne	.+50     	; 0x100c <lcd_putchar+0x5a>
		col--;
     fda:	80 91 54 01 	lds	r24, 0x0154
     fde:	81 50       	subi	r24, 0x01	; 1
     fe0:	80 93 54 01 	sts	0x0154, r24
		if (col == (unsigned char)-1) { row--; col = numLCDCols-1; }
     fe4:	8f 3f       	cpi	r24, 0xFF	; 255
     fe6:	51 f4       	brne	.+20     	; 0xffc <lcd_putchar+0x4a>
     fe8:	80 91 53 01 	lds	r24, 0x0153
     fec:	81 50       	subi	r24, 0x01	; 1
     fee:	80 93 53 01 	sts	0x0153, r24
     ff2:	80 91 41 01 	lds	r24, 0x0141
     ff6:	81 50       	subi	r24, 0x01	; 1
     ff8:	80 93 54 01 	sts	0x0154, r24
		if (row == (unsigned char)-1) { row = 0; col = 0; }
     ffc:	80 91 53 01 	lds	r24, 0x0153
    1000:	8f 3f       	cpi	r24, 0xFF	; 255
    1002:	09 f0       	breq	.+2      	; 0x1006 <lcd_putchar+0x54>
    1004:	d8 c0       	rjmp	.+432    	; 0x11b6 <lcd_putchar+0x204>
    1006:	10 92 53 01 	sts	0x0153, r1
    100a:	d3 c0       	rjmp	.+422    	; 0x11b2 <lcd_putchar+0x200>


// prints a single character at the current cursor location
void OrangutanLCD::print(char character)
{
	send_data(character);
    100c:	8d 2d       	mov	r24, r13
    100e:	0e 94 45 06 	call	0xc8a	; 0xc8a <_ZN12OrangutanLCD9send_dataEh>
		repos = 1;
	}
	else
	{
		OrangutanLCD::print(c); /* write the character */
		if (row != 0) printf_chars[(row-1)*numLCDCols + col]=c; /* remember the character */
    1012:	80 91 53 01 	lds	r24, 0x0153
    1016:	88 23       	and	r24, r24
    1018:	b9 f0       	breq	.+46     	; 0x1048 <lcd_putchar+0x96>
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	01 97       	sbiw	r24, 0x01	; 1
    101e:	40 91 41 01 	lds	r20, 0x0141
    1022:	50 e0       	ldi	r21, 0x00	; 0
    1024:	84 9f       	mul	r24, r20
    1026:	90 01       	movw	r18, r0
    1028:	85 9f       	mul	r24, r21
    102a:	30 0d       	add	r19, r0
    102c:	94 9f       	mul	r25, r20
    102e:	30 0d       	add	r19, r0
    1030:	11 24       	eor	r1, r1
    1032:	80 91 54 01 	lds	r24, 0x0154
    1036:	e0 91 51 01 	lds	r30, 0x0151
    103a:	f0 91 52 01 	lds	r31, 0x0152
    103e:	e2 0f       	add	r30, r18
    1040:	f3 1f       	adc	r31, r19
    1042:	e8 0f       	add	r30, r24
    1044:	f1 1d       	adc	r31, r1
    1046:	d0 82       	st	Z, r13
		col++;
    1048:	80 91 54 01 	lds	r24, 0x0154
    104c:	8f 5f       	subi	r24, 0xFF	; 255
    104e:	80 93 54 01 	sts	0x0154, r24

		if (col == numLCDCols) nextline = 1;
    1052:	90 91 41 01 	lds	r25, 0x0141
    1056:	89 17       	cp	r24, r25
    1058:	09 f0       	breq	.+2      	; 0x105c <lcd_putchar+0xaa>
    105a:	b3 c0       	rjmp	.+358    	; 0x11c2 <lcd_putchar+0x210>
	}

	if (nextline)
	{
		if (row == numLCDRows - 1)
    105c:	40 91 53 01 	lds	r20, 0x0153
    1060:	24 2f       	mov	r18, r20
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	80 91 40 01 	lds	r24, 0x0140
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	01 97       	sbiw	r24, 0x01	; 1
    106c:	28 17       	cp	r18, r24
    106e:	39 07       	cpc	r19, r25
    1070:	09 f0       	breq	.+2      	; 0x1074 <lcd_putchar+0xc2>
    1072:	9c c0       	rjmp	.+312    	; 0x11ac <lcd_putchar+0x1fa>
    1074:	c0 e0       	ldi	r28, 0x00	; 0
    1076:	d0 e0       	ldi	r29, 0x00	; 0
    1078:	41 c0       	rjmp	.+130    	; 0x10fc <lcd_putchar+0x14a>
            // it is never possible for the user to use the lower
            // right corner of his LCD.
			char j;
			for (j = 0; j < numLCDRows-2; j++)  	// draw top LCD_HEIGHT-2 rows
			{
				OrangutanLCD::gotoXY(0, j);
    107a:	80 e0       	ldi	r24, 0x00	; 0
    107c:	6c 2f       	mov	r22, r28
    107e:	0e 94 b6 07 	call	0xf6c	; 0xf6c <_ZN12OrangutanLCD6gotoXYEhh>
				for (i = 0; i < numLCDCols; i++)
    1082:	cc 24       	eor	r12, r12
    1084:	8e 01       	movw	r16, r28
    1086:	0f 5f       	subi	r16, 0xFF	; 255
    1088:	1f 4f       	sbci	r17, 0xFF	; 255
    108a:	33 c0       	rjmp	.+102    	; 0x10f2 <lcd_putchar+0x140>
				{
					OrangutanLCD::print(printf_chars[j*numLCDCols + i]);
    108c:	ec 2c       	mov	r14, r12
    108e:	ff 24       	eor	r15, r15
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	c2 9f       	mul	r28, r18
    1094:	c0 01       	movw	r24, r0
    1096:	c3 9f       	mul	r28, r19
    1098:	90 0d       	add	r25, r0
    109a:	d2 9f       	mul	r29, r18
    109c:	90 0d       	add	r25, r0
    109e:	11 24       	eor	r1, r1
    10a0:	e0 91 51 01 	lds	r30, 0x0151
    10a4:	f0 91 52 01 	lds	r31, 0x0152
    10a8:	ee 0d       	add	r30, r14
    10aa:	ff 1d       	adc	r31, r15
    10ac:	e8 0f       	add	r30, r24
    10ae:	f9 1f       	adc	r31, r25


// prints a single character at the current cursor location
void OrangutanLCD::print(char character)
{
	send_data(character);
    10b0:	80 81       	ld	r24, Z
    10b2:	0e 94 45 06 	call	0xc8a	; 0xc8a <_ZN12OrangutanLCD9send_dataEh>
			{
				OrangutanLCD::gotoXY(0, j);
				for (i = 0; i < numLCDCols; i++)
				{
					OrangutanLCD::print(printf_chars[j*numLCDCols + i]);
					printf_chars[j*numLCDCols + i] = printf_chars[(j+1)*numLCDCols + i];
    10b6:	80 91 51 01 	lds	r24, 0x0151
    10ba:	90 91 52 01 	lds	r25, 0x0152
    10be:	20 91 41 01 	lds	r18, 0x0141
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	c2 9f       	mul	r28, r18
    10c6:	f0 01       	movw	r30, r0
    10c8:	c3 9f       	mul	r28, r19
    10ca:	f0 0d       	add	r31, r0
    10cc:	d2 9f       	mul	r29, r18
    10ce:	f0 0d       	add	r31, r0
    10d0:	11 24       	eor	r1, r1
    10d2:	8e 0d       	add	r24, r14
    10d4:	9f 1d       	adc	r25, r15
    10d6:	e8 0f       	add	r30, r24
    10d8:	f9 1f       	adc	r31, r25
    10da:	02 9f       	mul	r16, r18
    10dc:	d0 01       	movw	r26, r0
    10de:	03 9f       	mul	r16, r19
    10e0:	b0 0d       	add	r27, r0
    10e2:	12 9f       	mul	r17, r18
    10e4:	b0 0d       	add	r27, r0
    10e6:	11 24       	eor	r1, r1
    10e8:	a8 0f       	add	r26, r24
    10ea:	b9 1f       	adc	r27, r25
    10ec:	8c 91       	ld	r24, X
    10ee:	80 83       	st	Z, r24
            // right corner of his LCD.
			char j;
			for (j = 0; j < numLCDRows-2; j++)  	// draw top LCD_HEIGHT-2 rows
			{
				OrangutanLCD::gotoXY(0, j);
				for (i = 0; i < numLCDCols; i++)
    10f0:	c3 94       	inc	r12
    10f2:	20 91 41 01 	lds	r18, 0x0141
    10f6:	c2 16       	cp	r12, r18
    10f8:	48 f2       	brcs	.-110    	; 0x108c <lcd_putchar+0xda>
    10fa:	e8 01       	movw	r28, r16
			/******* scroll! *******/
            // Note: because of the way we implement scrolling,
            // it is never possible for the user to use the lower
            // right corner of his LCD.
			char j;
			for (j = 0; j < numLCDRows-2; j++)  	// draw top LCD_HEIGHT-2 rows
    10fc:	60 91 40 01 	lds	r22, 0x0140
    1100:	86 2f       	mov	r24, r22
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	02 97       	sbiw	r24, 0x02	; 2
    1106:	c8 17       	cp	r28, r24
    1108:	d9 07       	cpc	r29, r25
    110a:	0c f4       	brge	.+2      	; 0x110e <lcd_putchar+0x15c>
    110c:	b6 cf       	rjmp	.-148    	; 0x107a <lcd_putchar+0xc8>
				{
					OrangutanLCD::print(printf_chars[j*numLCDCols + i]);
					printf_chars[j*numLCDCols + i] = printf_chars[(j+1)*numLCDCols + i];
				}
			}
			if (numLCDRows >= 2)
    110e:	62 30       	cpi	r22, 0x02	; 2
    1110:	e0 f1       	brcs	.+120    	; 0x118a <lcd_putchar+0x1d8>
			{
				OrangutanLCD::gotoXY(0, numLCDRows-2);	// draw row above bottom row
    1112:	62 50       	subi	r22, 0x02	; 2
    1114:	80 e0       	ldi	r24, 0x00	; 0
    1116:	0e 94 b6 07 	call	0xf6c	; 0xf6c <_ZN12OrangutanLCD6gotoXYEhh>
				for (i = 0; i < numLCDCols; i++)
    111a:	00 e0       	ldi	r16, 0x00	; 0
				{
					OrangutanLCD::print(printf_chars[(numLCDRows-2)*numLCDCols + i]);
					printf_chars[(numLCDRows-2)*numLCDCols + i] = ' ';	// clear saved bottom row
    111c:	10 e2       	ldi	r17, 0x20	; 32
				}
			}
			if (numLCDRows >= 2)
			{
				OrangutanLCD::gotoXY(0, numLCDRows-2);	// draw row above bottom row
				for (i = 0; i < numLCDCols; i++)
    111e:	31 c0       	rjmp	.+98     	; 0x1182 <lcd_putchar+0x1d0>
				{
					OrangutanLCD::print(printf_chars[(numLCDRows-2)*numLCDCols + i]);
    1120:	c0 2f       	mov	r28, r16
    1122:	d0 e0       	ldi	r29, 0x00	; 0
    1124:	80 91 40 01 	lds	r24, 0x0140
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	02 97       	sbiw	r24, 0x02	; 2
    112c:	50 e0       	ldi	r21, 0x00	; 0
    112e:	84 9f       	mul	r24, r20
    1130:	90 01       	movw	r18, r0
    1132:	85 9f       	mul	r24, r21
    1134:	30 0d       	add	r19, r0
    1136:	94 9f       	mul	r25, r20
    1138:	30 0d       	add	r19, r0
    113a:	11 24       	eor	r1, r1
    113c:	e0 91 51 01 	lds	r30, 0x0151
    1140:	f0 91 52 01 	lds	r31, 0x0152
    1144:	ec 0f       	add	r30, r28
    1146:	fd 1f       	adc	r31, r29
    1148:	e2 0f       	add	r30, r18
    114a:	f3 1f       	adc	r31, r19


// prints a single character at the current cursor location
void OrangutanLCD::print(char character)
{
	send_data(character);
    114c:	80 81       	ld	r24, Z
    114e:	0e 94 45 06 	call	0xc8a	; 0xc8a <_ZN12OrangutanLCD9send_dataEh>
			{
				OrangutanLCD::gotoXY(0, numLCDRows-2);	// draw row above bottom row
				for (i = 0; i < numLCDCols; i++)
				{
					OrangutanLCD::print(printf_chars[(numLCDRows-2)*numLCDCols + i]);
					printf_chars[(numLCDRows-2)*numLCDCols + i] = ' ';	// clear saved bottom row
    1152:	80 91 40 01 	lds	r24, 0x0140
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	02 97       	sbiw	r24, 0x02	; 2
    115a:	40 91 41 01 	lds	r20, 0x0141
    115e:	50 e0       	ldi	r21, 0x00	; 0
    1160:	84 9f       	mul	r24, r20
    1162:	90 01       	movw	r18, r0
    1164:	85 9f       	mul	r24, r21
    1166:	30 0d       	add	r19, r0
    1168:	94 9f       	mul	r25, r20
    116a:	30 0d       	add	r19, r0
    116c:	11 24       	eor	r1, r1
    116e:	e0 91 51 01 	lds	r30, 0x0151
    1172:	f0 91 52 01 	lds	r31, 0x0152
    1176:	ec 0f       	add	r30, r28
    1178:	fd 1f       	adc	r31, r29
    117a:	e2 0f       	add	r30, r18
    117c:	f3 1f       	adc	r31, r19
    117e:	10 83       	st	Z, r17
				}
			}
			if (numLCDRows >= 2)
			{
				OrangutanLCD::gotoXY(0, numLCDRows-2);	// draw row above bottom row
				for (i = 0; i < numLCDCols; i++)
    1180:	0f 5f       	subi	r16, 0xFF	; 255
    1182:	40 91 41 01 	lds	r20, 0x0141
    1186:	04 17       	cp	r16, r20
    1188:	58 f2       	brcs	.-106    	; 0x1120 <lcd_putchar+0x16e>
				{
					OrangutanLCD::print(printf_chars[(numLCDRows-2)*numLCDCols + i]);
					printf_chars[(numLCDRows-2)*numLCDCols + i] = ' ';	// clear saved bottom row
				}
			}
			OrangutanLCD::gotoXY(0, numLCDRows-1);		// erase bottom row
    118a:	60 91 40 01 	lds	r22, 0x0140
    118e:	61 50       	subi	r22, 0x01	; 1
    1190:	80 e0       	ldi	r24, 0x00	; 0
    1192:	0e 94 b6 07 	call	0xf6c	; 0xf6c <_ZN12OrangutanLCD6gotoXYEhh>
			for (i = 0; i < numLCDCols; i++)
    1196:	c0 e0       	ldi	r28, 0x00	; 0
    1198:	04 c0       	rjmp	.+8      	; 0x11a2 <lcd_putchar+0x1f0>


// prints a single character at the current cursor location
void OrangutanLCD::print(char character)
{
	send_data(character);
    119a:	80 e2       	ldi	r24, 0x20	; 32
    119c:	0e 94 45 06 	call	0xc8a	; 0xc8a <_ZN12OrangutanLCD9send_dataEh>
					OrangutanLCD::print(printf_chars[(numLCDRows-2)*numLCDCols + i]);
					printf_chars[(numLCDRows-2)*numLCDCols + i] = ' ';	// clear saved bottom row
				}
			}
			OrangutanLCD::gotoXY(0, numLCDRows-1);		// erase bottom row
			for (i = 0; i < numLCDCols; i++)
    11a0:	cf 5f       	subi	r28, 0xFF	; 255
    11a2:	80 91 41 01 	lds	r24, 0x0141
    11a6:	c8 17       	cp	r28, r24
    11a8:	c0 f3       	brcs	.-16     	; 0x119a <lcd_putchar+0x1e8>
    11aa:	03 c0       	rjmp	.+6      	; 0x11b2 <lcd_putchar+0x200>
			{
				OrangutanLCD::print(' ');
			}
		}
		else
			row++;
    11ac:	4f 5f       	subi	r20, 0xFF	; 255
    11ae:	40 93 53 01 	sts	0x0153, r20
		col = 0;
    11b2:	10 92 54 01 	sts	0x0154, r1
		repos = 1;
	}

	if (repos)
	{
		OrangutanLCD::gotoXY(col, row);
    11b6:	80 91 54 01 	lds	r24, 0x0154
    11ba:	60 91 53 01 	lds	r22, 0x0153
    11be:	0e 94 b6 07 	call	0xf6c	; 0xf6c <_ZN12OrangutanLCD6gotoXYEhh>
	}

	return c;
    11c2:	2d 2d       	mov	r18, r13
    11c4:	33 27       	eor	r19, r19
    11c6:	27 fd       	sbrc	r18, 7
    11c8:	30 95       	com	r19
}
    11ca:	c9 01       	movw	r24, r18
    11cc:	cd b7       	in	r28, 0x3d	; 61
    11ce:	de b7       	in	r29, 0x3e	; 62
    11d0:	e8 e0       	ldi	r30, 0x08	; 8
    11d2:	0c 94 2f 0b 	jmp	0x165e	; 0x165e <__epilogue_restores__+0x14>

000011d6 <_ZN12OrangutanLCD10showCursorEh>:

// Shows the cursor as either a BLINKING or SOLID block
// cursorType should be either CURSOR_BLINKING or CURSOR_SOLID
void OrangutanLCD::showCursor(unsigned char cursorType)
{
	if (cursorType == CURSOR_BLINKING)
    11d6:	81 30       	cpi	r24, 0x01	; 1
    11d8:	11 f4       	brne	.+4      	; 0x11de <_ZN12OrangutanLCD10showCursorEh+0x8>
		send_cmd(LCD_SHOW_BLINK);
    11da:	8f e0       	ldi	r24, 0x0F	; 15
    11dc:	01 c0       	rjmp	.+2      	; 0x11e0 <_ZN12OrangutanLCD10showCursorEh+0xa>
	else
		send_cmd(LCD_SHOW_SOLID);
    11de:	8e e0       	ldi	r24, 0x0E	; 14
    11e0:	0e 94 40 06 	call	0xc80	; 0xc80 <_ZN12OrangutanLCD8send_cmdEh>
    11e4:	08 95       	ret

000011e6 <lcd_show_cursor>:
	OrangutanLCD::printBinary(value);
}

extern "C" void lcd_show_cursor(unsigned char cursorType)
{
	OrangutanLCD::showCursor(cursorType);
    11e6:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <_ZN12OrangutanLCD10showCursorEh>
}
    11ea:	08 95       	ret

000011ec <_ZN12OrangutanLCD10hideCursorEv>:


// Hides the cursor
void OrangutanLCD::hideCursor()
{
	send_cmd(LCD_HIDE);
    11ec:	8c e0       	ldi	r24, 0x0C	; 12
    11ee:	0e 94 40 06 	call	0xc80	; 0xc80 <_ZN12OrangutanLCD8send_cmdEh>
}
    11f2:	08 95       	ret

000011f4 <lcd_hide_cursor>:
	OrangutanLCD::showCursor(cursorType);
}

extern "C" void lcd_hide_cursor()
{
	OrangutanLCD::hideCursor();
    11f4:	0e 94 f6 08 	call	0x11ec	; 0x11ec <_ZN12OrangutanLCD10hideCursorEv>
}
    11f8:	08 95       	ret

000011fa <_ZN12OrangutanLCD10moveCursorEhh>:

// shifts the cursor LEFT or RIGHT the given number of positions.
// direction should be either LCD_LEFT or LCD_RIGHT
void OrangutanLCD::moveCursor(unsigned char direction, 
							   unsigned char num)
{
    11fa:	cf 93       	push	r28
    11fc:	df 93       	push	r29
    11fe:	c8 2f       	mov	r28, r24
    1200:	d6 2f       	mov	r29, r22
	while(num-- > 0)
    1202:	08 c0       	rjmp	.+16     	; 0x1214 <_ZN12OrangutanLCD10moveCursorEhh+0x1a>
	{
		if (direction == LCD_LEFT)
    1204:	cc 23       	and	r28, r28
    1206:	11 f4       	brne	.+4      	; 0x120c <_ZN12OrangutanLCD10moveCursorEhh+0x12>
			send_cmd(LCD_CURSOR_L);
    1208:	80 e1       	ldi	r24, 0x10	; 16
    120a:	01 c0       	rjmp	.+2      	; 0x120e <_ZN12OrangutanLCD10moveCursorEhh+0x14>
		else
			send_cmd(LCD_CURSOR_R);
    120c:	84 e1       	ldi	r24, 0x14	; 20
    120e:	0e 94 40 06 	call	0xc80	; 0xc80 <_ZN12OrangutanLCD8send_cmdEh>
    1212:	d1 50       	subi	r29, 0x01	; 1
// shifts the cursor LEFT or RIGHT the given number of positions.
// direction should be either LCD_LEFT or LCD_RIGHT
void OrangutanLCD::moveCursor(unsigned char direction, 
							   unsigned char num)
{
	while(num-- > 0)
    1214:	dd 23       	and	r29, r29
    1216:	b1 f7       	brne	.-20     	; 0x1204 <_ZN12OrangutanLCD10moveCursorEhh+0xa>
		if (direction == LCD_LEFT)
			send_cmd(LCD_CURSOR_L);
		else
			send_cmd(LCD_CURSOR_R);
	}
}
    1218:	df 91       	pop	r29
    121a:	cf 91       	pop	r28
    121c:	08 95       	ret

0000121e <lcd_move_cursor>:
	OrangutanLCD::hideCursor();
}

extern "C" void lcd_move_cursor(unsigned char direction, unsigned char num)
{
	OrangutanLCD::moveCursor(direction, num);
    121e:	0e 94 fd 08 	call	0x11fa	; 0x11fa <_ZN12OrangutanLCD10moveCursorEhh>
}
    1222:	08 95       	ret

00001224 <_ZN12OrangutanLCD6scrollEhhj>:
// positions, delaying for delay_time milliseconds between each shift.
// This is what you'd use for a scrolling display.
// direction should be either LCD_LEFT or LCD_RIGHT
void OrangutanLCD::scroll(unsigned char direction, unsigned char num, 
						   unsigned int delay_time)
{
    1224:	0f 93       	push	r16
    1226:	1f 93       	push	r17
    1228:	cf 93       	push	r28
    122a:	df 93       	push	r29
    122c:	18 2f       	mov	r17, r24
    122e:	06 2f       	mov	r16, r22
    1230:	ea 01       	movw	r28, r20
	while(num--)
    1232:	0b c0       	rjmp	.+22     	; 0x124a <_ZN12OrangutanLCD6scrollEhhj+0x26>
	{
		if (direction == LCD_LEFT)
    1234:	11 23       	and	r17, r17
    1236:	11 f4       	brne	.+4      	; 0x123c <_ZN12OrangutanLCD6scrollEhhj+0x18>
			send_cmd(LCD_SHIFT_L);
    1238:	88 e1       	ldi	r24, 0x18	; 24
    123a:	01 c0       	rjmp	.+2      	; 0x123e <_ZN12OrangutanLCD6scrollEhhj+0x1a>
		else
			send_cmd(LCD_SHIFT_R);
    123c:	8c e1       	ldi	r24, 0x1C	; 28
    123e:	0e 94 40 06 	call	0xc80	; 0xc80 <_ZN12OrangutanLCD8send_cmdEh>
    1242:	ce 01       	movw	r24, r28
    1244:	0e 94 ff 09 	call	0x13fe	; 0x13fe <delay_ms>
    1248:	01 50       	subi	r16, 0x01	; 1
// This is what you'd use for a scrolling display.
// direction should be either LCD_LEFT or LCD_RIGHT
void OrangutanLCD::scroll(unsigned char direction, unsigned char num, 
						   unsigned int delay_time)
{
	while(num--)
    124a:	00 23       	and	r16, r16
    124c:	99 f7       	brne	.-26     	; 0x1234 <_ZN12OrangutanLCD6scrollEhhj+0x10>
			send_cmd(LCD_SHIFT_L);
		else
			send_cmd(LCD_SHIFT_R);
		delay(delay_time);
	}
}
    124e:	df 91       	pop	r29
    1250:	cf 91       	pop	r28
    1252:	1f 91       	pop	r17
    1254:	0f 91       	pop	r16
    1256:	08 95       	ret

00001258 <lcd_scroll>:
}

extern "C" void lcd_scroll(unsigned char direction, unsigned char num, 
					   unsigned int delay_time)
{
	OrangutanLCD::scroll(direction, num, delay_time);
    1258:	0e 94 12 09 	call	0x1224	; 0x1224 <_ZN12OrangutanLCD6scrollEhhj>
}
    125c:	08 95       	ret

0000125e <_ZN12OrangutanLCD10initPrintfEv>:

// Initializes the LCD library for printf support.  After this,
// printf will start sending characters to the LCD.
void OrangutanLCD::initPrintf()
{
	if (printf_chars != 0)
    125e:	80 91 51 01 	lds	r24, 0x0151
    1262:	90 91 52 01 	lds	r25, 0x0152
    1266:	00 97       	sbiw	r24, 0x00	; 0
    1268:	11 f0       	breq	.+4      	; 0x126e <_ZN12OrangutanLCD10initPrintfEv+0x10>
		free(printf_chars);
    126a:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <free>
		
	printf_chars = (char*)malloc(sizeof(char)*SAVED_CHARS);
    126e:	20 91 40 01 	lds	r18, 0x0140
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	21 50       	subi	r18, 0x01	; 1
    1276:	30 40       	sbci	r19, 0x00	; 0
    1278:	80 91 41 01 	lds	r24, 0x0141
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	ac 01       	movw	r20, r24
    1280:	24 9f       	mul	r18, r20
    1282:	c0 01       	movw	r24, r0
    1284:	25 9f       	mul	r18, r21
    1286:	90 0d       	add	r25, r0
    1288:	34 9f       	mul	r19, r20
    128a:	90 0d       	add	r25, r0
    128c:	11 24       	eor	r1, r1
    128e:	0e 94 40 0b 	call	0x1680	; 0x1680 <malloc>
    1292:	90 93 52 01 	sts	0x0152, r25
    1296:	80 93 51 01 	sts	0x0151, r24
	if (printf_chars == 0)
    129a:	00 97       	sbiw	r24, 0x00	; 0
    129c:	21 f1       	breq	.+72     	; 0x12e6 <_ZN12OrangutanLCD10initPrintfEv+0x88>
    129e:	a0 e0       	ldi	r26, 0x00	; 0
		return;
	unsigned char i;
	for (i = 0; i < SAVED_CHARS; i++)
		printf_chars[i] = ' ';
    12a0:	b0 e2       	ldi	r27, 0x20	; 32
    12a2:	08 c0       	rjmp	.+16     	; 0x12b4 <_ZN12OrangutanLCD10initPrintfEv+0x56>
    12a4:	e0 91 51 01 	lds	r30, 0x0151
    12a8:	f0 91 52 01 	lds	r31, 0x0152
    12ac:	e2 0f       	add	r30, r18
    12ae:	f3 1f       	adc	r31, r19
    12b0:	b0 83       	st	Z, r27
		
	printf_chars = (char*)malloc(sizeof(char)*SAVED_CHARS);
	if (printf_chars == 0)
		return;
	unsigned char i;
	for (i = 0; i < SAVED_CHARS; i++)
    12b2:	af 5f       	subi	r26, 0xFF	; 255
    12b4:	2a 2f       	mov	r18, r26
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	80 91 40 01 	lds	r24, 0x0140
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	01 97       	sbiw	r24, 0x01	; 1
    12c0:	60 91 41 01 	lds	r22, 0x0141
    12c4:	70 e0       	ldi	r23, 0x00	; 0
    12c6:	86 9f       	mul	r24, r22
    12c8:	a0 01       	movw	r20, r0
    12ca:	87 9f       	mul	r24, r23
    12cc:	50 0d       	add	r21, r0
    12ce:	96 9f       	mul	r25, r22
    12d0:	50 0d       	add	r21, r0
    12d2:	11 24       	eor	r1, r1
    12d4:	24 17       	cp	r18, r20
    12d6:	35 07       	cpc	r19, r21
    12d8:	2c f3       	brlt	.-54     	; 0x12a4 <_ZN12OrangutanLCD10initPrintfEv+0x46>
		printf_chars[i] = ' ';
	fdevopen(lcd_putchar, void_getchar);
    12da:	89 ed       	ldi	r24, 0xD9	; 217
    12dc:	97 e0       	ldi	r25, 0x07	; 7
    12de:	6d ea       	ldi	r22, 0xAD	; 173
    12e0:	75 e0       	ldi	r23, 0x05	; 5
    12e2:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <fdevopen>
    12e6:	08 95       	ret

000012e8 <lcd_init_printf>:
	OrangutanLCD::gotoXY(col,row);
}

extern "C" void lcd_init_printf()
{
	OrangutanLCD::initPrintf();
    12e8:	0e 94 2f 09 	call	0x125e	; 0x125e <_ZN12OrangutanLCD10initPrintfEv>
}
    12ec:	08 95       	ret

000012ee <lcd_init_printf_with_dimensions>:
	fdevopen(lcd_putchar, void_getchar);
}

void OrangutanLCD::initPrintf(unsigned char lcdWidth, unsigned char lcdHeight)
{
	numLCDCols = lcdWidth;
    12ee:	80 93 41 01 	sts	0x0141, r24
	numLCDRows = lcdHeight;
    12f2:	60 93 40 01 	sts	0x0140, r22
	initPrintf();
    12f6:	0e 94 2f 09 	call	0x125e	; 0x125e <_ZN12OrangutanLCD10initPrintfEv>
}

extern "C" void lcd_init_printf_with_dimensions(unsigned char width, unsigned char height)
{
	OrangutanLCD::initPrintf(width, height);
}
    12fa:	08 95       	ret

000012fc <_ZN12OrangutanLCD10initPrintfEhh>:
	fdevopen(lcd_putchar, void_getchar);
}

void OrangutanLCD::initPrintf(unsigned char lcdWidth, unsigned char lcdHeight)
{
	numLCDCols = lcdWidth;
    12fc:	80 93 41 01 	sts	0x0141, r24
	numLCDRows = lcdHeight;
    1300:	60 93 40 01 	sts	0x0140, r22
	initPrintf();
    1304:	0e 94 2f 09 	call	0x125e	; 0x125e <_ZN12OrangutanLCD10initPrintfEv>
}
    1308:	08 95       	ret

0000130a <_ZN13OrangutanTime17delayMicrosecondsEj>:
						  "   pop  r22"     "\n\t"   
						  "   sbiw %0, 1"   "\n\t"
						  "   brne 1b"
						  : "=w" ( microseconds )  
						  : "0" ( microseconds )
						  );  
    130a:	6f 93       	push	r22
    130c:	64 e0       	ldi	r22, 0x04	; 4
    130e:	6a 95       	dec	r22
    1310:	f1 f7       	brne	.-4      	; 0x130e <_ZN13OrangutanTime17delayMicrosecondsEj+0x4>
    1312:	6f 91       	pop	r22
    1314:	01 97       	sbiw	r24, 0x01	; 1
    1316:	c9 f7       	brne	.-14     	; 0x130a <_ZN13OrangutanTime17delayMicrosecondsEj>
	}
    1318:	08 95       	ret

0000131a <__vector_9>:
		"pop r25"					"\n\t"	// restore the registers we used in this ISR
		"pop r24"					"\n\t"
		"pop r2"					"\n\t"

		"reti"						"\n\t"	// return
		);
    131a:	2f 92       	push	r2
    131c:	8f 93       	push	r24
    131e:	9f 93       	push	r25
    1320:	2f b6       	in	r2, 0x3f	; 63
    1322:	80 91 5b 01 	lds	r24, 0x015B
    1326:	90 91 5c 01 	lds	r25, 0x015C
    132a:	01 96       	adiw	r24, 0x01	; 1
    132c:	80 93 5b 01 	sts	0x015B, r24
    1330:	90 93 5c 01 	sts	0x015C, r25
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	80 91 5d 01 	lds	r24, 0x015D
    133a:	89 1f       	adc	r24, r25
    133c:	80 93 5d 01 	sts	0x015D, r24
    1340:	90 91 63 01 	lds	r25, 0x0163
    1344:	9c 5f       	subi	r25, 0xFC	; 252
    1346:	90 93 63 01 	sts	0x0163, r25
    134a:	80 91 62 01 	lds	r24, 0x0162
    134e:	80 51       	subi	r24, 0x10	; 16
    1350:	97 42       	sbci	r25, 0x27	; 39
    1352:	c0 f0       	brcs	.+48     	; 0x1384 <end>
    1354:	90 93 63 01 	sts	0x0163, r25
    1358:	80 93 62 01 	sts	0x0162, r24
    135c:	80 91 5e 01 	lds	r24, 0x015E
    1360:	90 91 5f 01 	lds	r25, 0x015F
    1364:	01 96       	adiw	r24, 0x01	; 1
    1366:	80 93 5e 01 	sts	0x015E, r24
    136a:	90 93 5f 01 	sts	0x015F, r25
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	80 91 60 01 	lds	r24, 0x0160
    1374:	89 1f       	adc	r24, r25
    1376:	80 93 60 01 	sts	0x0160, r24
    137a:	80 91 61 01 	lds	r24, 0x0161
    137e:	89 1f       	adc	r24, r25
    1380:	80 93 61 01 	sts	0x0161, r24

00001384 <end>:
    1384:	2f be       	out	0x3f, r2	; 63
    1386:	9f 91       	pop	r25
    1388:	8f 91       	pop	r24
    138a:	2f 90       	pop	r2
    138c:	18 95       	reti

0000138e <ticks_to_microseconds>:
// inline assembly code.

extern "C" {
	unsigned long get_ticks() { return OrangutanTime::ticks(); }
	unsigned long ticks_to_microseconds(unsigned long numTicks)
	{
    138e:	0f 93       	push	r16
    1390:	1f 93       	push	r17
// unsigned long ticks = OrangutanTime::ticks();
// ... (do something)
// unsigned long elapsedMicroseconds = OrangutanTime::ticksToMicroseconds(OrangutanTime::ticks() - ticks);
unsigned long OrangutanTime::ticksToMicroseconds(unsigned long numTicks)
{
	return (numTicks * 2 + 2) / 5;
    1392:	6f 5f       	subi	r22, 0xFF	; 255
    1394:	7f 4f       	sbci	r23, 0xFF	; 255
    1396:	8f 4f       	sbci	r24, 0xFF	; 255
    1398:	9f 4f       	sbci	r25, 0xFF	; 255
    139a:	66 0f       	add	r22, r22
    139c:	77 1f       	adc	r23, r23
    139e:	88 1f       	adc	r24, r24
    13a0:	99 1f       	adc	r25, r25
    13a2:	25 e0       	ldi	r18, 0x05	; 5
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	40 e0       	ldi	r20, 0x00	; 0
    13a8:	50 e0       	ldi	r21, 0x00	; 0
    13aa:	0e 94 cc 0a 	call	0x1598	; 0x1598 <__udivmodsi4>
extern "C" {
	unsigned long get_ticks() { return OrangutanTime::ticks(); }
	unsigned long ticks_to_microseconds(unsigned long numTicks)
	{
		return OrangutanTime::ticksToMicroseconds(numTicks);
	}
    13ae:	b9 01       	movw	r22, r18
    13b0:	ca 01       	movw	r24, r20
    13b2:	1f 91       	pop	r17
    13b4:	0f 91       	pop	r16
    13b6:	08 95       	ret

000013b8 <_ZN13OrangutanTime19ticksToMicrosecondsEm>:
// elapsed over a period.  For example:
// unsigned long ticks = OrangutanTime::ticks();
// ... (do something)
// unsigned long elapsedMicroseconds = OrangutanTime::ticksToMicroseconds(OrangutanTime::ticks() - ticks);
unsigned long OrangutanTime::ticksToMicroseconds(unsigned long numTicks)
{
    13b8:	0f 93       	push	r16
    13ba:	1f 93       	push	r17
	return (numTicks * 2 + 2) / 5;
    13bc:	6f 5f       	subi	r22, 0xFF	; 255
    13be:	7f 4f       	sbci	r23, 0xFF	; 255
    13c0:	8f 4f       	sbci	r24, 0xFF	; 255
    13c2:	9f 4f       	sbci	r25, 0xFF	; 255
    13c4:	66 0f       	add	r22, r22
    13c6:	77 1f       	adc	r23, r23
    13c8:	88 1f       	adc	r24, r24
    13ca:	99 1f       	adc	r25, r25
    13cc:	25 e0       	ldi	r18, 0x05	; 5
    13ce:	30 e0       	ldi	r19, 0x00	; 0
    13d0:	40 e0       	ldi	r20, 0x00	; 0
    13d2:	50 e0       	ldi	r21, 0x00	; 0
    13d4:	0e 94 cc 0a 	call	0x1598	; 0x1598 <__udivmodsi4>
}
    13d8:	b9 01       	movw	r22, r18
    13da:	ca 01       	movw	r24, r20
    13dc:	1f 91       	pop	r17
    13de:	0f 91       	pop	r16
    13e0:	08 95       	ret

000013e2 <_ZN13OrangutanTime17delayMillisecondsEj>:
	TIMSK2 |= 1 << TOIE2;	// enable timer2 overflow interrupt
	return value;
}

void OrangutanTime::delayMilliseconds(unsigned int milliseconds)
{
    13e2:	cf 93       	push	r28
    13e4:	df 93       	push	r29
    13e6:	ec 01       	movw	r28, r24
	while (milliseconds--)
    13e8:	05 c0       	rjmp	.+10     	; 0x13f4 <_ZN13OrangutanTime17delayMillisecondsEj+0x12>
	  delayMicroseconds(1000);
    13ea:	88 ee       	ldi	r24, 0xE8	; 232
    13ec:	93 e0       	ldi	r25, 0x03	; 3
    13ee:	0e 94 85 09 	call	0x130a	; 0x130a <_ZN13OrangutanTime17delayMicrosecondsEj>
    13f2:	21 97       	sbiw	r28, 0x01	; 1
	return value;
}

void OrangutanTime::delayMilliseconds(unsigned int milliseconds)
{
	while (milliseconds--)
    13f4:	20 97       	sbiw	r28, 0x00	; 0
    13f6:	c9 f7       	brne	.-14     	; 0x13ea <_ZN13OrangutanTime17delayMillisecondsEj+0x8>
	  delayMicroseconds(1000);
}
    13f8:	df 91       	pop	r29
    13fa:	cf 91       	pop	r28
    13fc:	08 95       	ret

000013fe <delay_ms>:
	unsigned long ticks_to_microseconds(unsigned long numTicks)
	{
		return OrangutanTime::ticksToMicroseconds(numTicks);
	}
	unsigned long get_ms() { return OrangutanTime::ms(); }
	void delay_ms(unsigned int milliseconds) { OrangutanTime::delayMilliseconds(milliseconds); }
    13fe:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <_ZN13OrangutanTime17delayMillisecondsEj>
    1402:	08 95       	ret

00001404 <_ZN13OrangutanTime5init2Ev>:
	  delayMicroseconds(1000);
}

void OrangutanTime::init2()
{
	TIMSK2 &= ~(1 << TOIE2);	// disable timer2 overflow interrupt
    1404:	e0 e7       	ldi	r30, 0x70	; 112
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	80 81       	ld	r24, Z
    140a:	8e 7f       	andi	r24, 0xFE	; 254
    140c:	80 83       	st	Z, r24
		TCCR2A |= 0x01;
		TCCR2B &= 0xF0;
		TCCR2B |= 0x01;		// timer2 ticks at 20 MHz (prescaler = 1)
*/

	TCCR2A |= 0x03;		// fast PWM, TOP = 0xFF
    140e:	a0 eb       	ldi	r26, 0xB0	; 176
    1410:	b0 e0       	ldi	r27, 0x00	; 0
    1412:	8c 91       	ld	r24, X
    1414:	83 60       	ori	r24, 0x03	; 3
    1416:	8c 93       	st	X, r24
	TCCR2B &= 0xF0;
    1418:	a1 eb       	ldi	r26, 0xB1	; 177
    141a:	b0 e0       	ldi	r27, 0x00	; 0
    141c:	8c 91       	ld	r24, X
    141e:	80 7f       	andi	r24, 0xF0	; 240
    1420:	8c 93       	st	X, r24
	TCCR2B |= 0x02;		// timer 2 ticks at 2.5 MHz (prescaler = 8)
    1422:	8c 91       	ld	r24, X
    1424:	82 60       	ori	r24, 0x02	; 2
    1426:	8c 93       	st	X, r24

	TIFR2 |= 1 << TOV2;	// clear timer2 overflow flag
    1428:	b8 9a       	sbi	0x17, 0	; 23
	TIMSK2 |= 1 << TOIE2;	// enable timer2 overflow interrupt
    142a:	80 81       	ld	r24, Z
    142c:	81 60       	ori	r24, 0x01	; 1
    142e:	80 83       	st	Z, r24
	sei();				// enable global interrupts
    1430:	78 94       	sei
}
    1432:	08 95       	ret

00001434 <_ZN13OrangutanTime4initEv>:

	static inline void init()
	{
		static unsigned char initialized = 0;

		if (!initialized)
    1434:	80 91 64 01 	lds	r24, 0x0164
    1438:	88 23       	and	r24, r24
    143a:	29 f4       	brne	.+10     	; 0x1446 <_ZN13OrangutanTime4initEv+0x12>
		{
			initialized = 1;
    143c:	81 e0       	ldi	r24, 0x01	; 1
    143e:	80 93 64 01 	sts	0x0164, r24
			init2();
    1442:	0e 94 02 0a 	call	0x1404	; 0x1404 <_ZN13OrangutanTime5init2Ev>
    1446:	08 95       	ret

00001448 <_ZN13OrangutanTime2msEv>:
// differential time computations would give an incorrect result across an overflow.  Our
// method for tracking elapsed milliseconds gives a correct result when performing a time
// differential across an overflow.
unsigned long OrangutanTime::ms()
{
	init();
    1448:	0e 94 1a 0a 	call	0x1434	; 0x1434 <_ZN13OrangutanTime4initEv>
	unsigned long value;
	TIMSK2 &= ~(1 << TOIE2);	// disable timer2 overflow interrupt
    144c:	e0 e7       	ldi	r30, 0x70	; 112
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	80 81       	ld	r24, Z
    1452:	8e 7f       	andi	r24, 0xFE	; 254
    1454:	80 83       	st	Z, r24
	value = msCounter;
    1456:	20 91 5e 01 	lds	r18, 0x015E
    145a:	30 91 5f 01 	lds	r19, 0x015F
    145e:	40 91 60 01 	lds	r20, 0x0160
    1462:	50 91 61 01 	lds	r21, 0x0161
	TIMSK2 |= 1 << TOIE2;	// enable timer2 overflow interrupt
    1466:	80 81       	ld	r24, Z
    1468:	81 60       	ori	r24, 0x01	; 1
    146a:	80 83       	st	Z, r24
	return value;
}
    146c:	b9 01       	movw	r22, r18
    146e:	ca 01       	movw	r24, r20
    1470:	08 95       	ret

00001472 <get_ms>:
	unsigned long get_ticks() { return OrangutanTime::ticks(); }
	unsigned long ticks_to_microseconds(unsigned long numTicks)
	{
		return OrangutanTime::ticksToMicroseconds(numTicks);
	}
	unsigned long get_ms() { return OrangutanTime::ms(); }
    1472:	0e 94 24 0a 	call	0x1448	; 0x1448 <_ZN13OrangutanTime2msEv>
    1476:	08 95       	ret

00001478 <_ZN13OrangutanTime5ticksEv>:

// number of ticks (in units of 0.4 us) that have elapsed since OrangutanTime was
// initialized.
unsigned long OrangutanTime::ticks()
{
	init();
    1478:	0e 94 1a 0a 	call	0x1434	; 0x1434 <_ZN13OrangutanTime4initEv>
	TIMSK2 &= ~(1 << TOIE2);	// disable timer2 overflow interrupt
    147c:	80 91 70 00 	lds	r24, 0x0070
    1480:	8e 7f       	andi	r24, 0xFE	; 254
    1482:	80 93 70 00 	sts	0x0070, r24
	unsigned long numTicks = TCNT2 | tickCount;	// TCNT2 is lowest byte of tickCount
    1486:	20 91 b2 00 	lds	r18, 0x00B2
    148a:	80 91 5a 01 	lds	r24, 0x015A
    148e:	90 91 5b 01 	lds	r25, 0x015B
    1492:	a0 91 5c 01 	lds	r26, 0x015C
    1496:	b0 91 5d 01 	lds	r27, 0x015D
	if (TIFR2 & (1 << TOV2))	// if TCNT2 has overflowed since we disabled t2 ovf interrupt
    149a:	b8 99       	sbic	0x17, 0	; 23
    149c:	04 c0       	rjmp	.+8      	; 0x14a6 <_ZN13OrangutanTime5ticksEv+0x2e>
// initialized.
unsigned long OrangutanTime::ticks()
{
	init();
	TIMSK2 &= ~(1 << TOIE2);	// disable timer2 overflow interrupt
	unsigned long numTicks = TCNT2 | tickCount;	// TCNT2 is lowest byte of tickCount
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	40 e0       	ldi	r20, 0x00	; 0
    14a2:	50 e0       	ldi	r21, 0x00	; 0
    14a4:	11 c0       	rjmp	.+34     	; 0x14c8 <_ZN13OrangutanTime5ticksEv+0x50>
	{
		// NOTE: it is important to perform this computation again.  If we use a value of TCNT2 read
		// before we checked for the overflow, it might be something like 255 while it becomes 0 after
		// the overflow.  Using an old value could produce a result that is bigger than it should be.
		// For example, the following line should *NOT* be: numTicks += 256;
		numTicks = TCNT2 | (tickCount + 256);		// compute ticks again and add 256 for the overflow
    14a6:	80 91 b2 00 	lds	r24, 0x00B2
    14aa:	20 91 5a 01 	lds	r18, 0x015A
    14ae:	30 91 5b 01 	lds	r19, 0x015B
    14b2:	40 91 5c 01 	lds	r20, 0x015C
    14b6:	50 91 5d 01 	lds	r21, 0x015D
    14ba:	20 50       	subi	r18, 0x00	; 0
    14bc:	3f 4f       	sbci	r19, 0xFF	; 255
    14be:	4f 4f       	sbci	r20, 0xFF	; 255
    14c0:	5f 4f       	sbci	r21, 0xFF	; 255
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	a0 e0       	ldi	r26, 0x00	; 0
    14c6:	b0 e0       	ldi	r27, 0x00	; 0
    14c8:	28 2b       	or	r18, r24
    14ca:	39 2b       	or	r19, r25
    14cc:	4a 2b       	or	r20, r26
    14ce:	5b 2b       	or	r21, r27
	}
	TIMSK2 |= 1 << TOIE2;	// enable timer2 overflow interrupt
    14d0:	80 91 70 00 	lds	r24, 0x0070
    14d4:	81 60       	ori	r24, 0x01	; 1
    14d6:	80 93 70 00 	sts	0x0070, r24
	return numTicks;
}
    14da:	b9 01       	movw	r22, r18
    14dc:	ca 01       	movw	r24, r20
    14de:	08 95       	ret

000014e0 <get_ticks>:
// There are some inline ones defined to alias to these in the C
// header files.  Also, delay_us() is only in the header, since it's
// inline assembly code.

extern "C" {
	unsigned long get_ticks() { return OrangutanTime::ticks(); }
    14e0:	0e 94 3c 0a 	call	0x1478	; 0x1478 <_ZN13OrangutanTime5ticksEv>
    14e4:	08 95       	ret

000014e6 <_ZN13OrangutanTime5resetEv>:
}

// resets millisecond counter, but does not reset tick counter
void OrangutanTime::reset()
{
	init();
    14e6:	0e 94 1a 0a 	call	0x1434	; 0x1434 <_ZN13OrangutanTime4initEv>
	TIMSK2 &= ~(1 << TOIE2);	// disable timer2 overflow interrupt
    14ea:	e0 e7       	ldi	r30, 0x70	; 112
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	80 81       	ld	r24, Z
    14f0:	8e 7f       	andi	r24, 0xFE	; 254
    14f2:	80 83       	st	Z, r24
	msCounter = 0;
    14f4:	10 92 5e 01 	sts	0x015E, r1
    14f8:	10 92 5f 01 	sts	0x015F, r1
    14fc:	10 92 60 01 	sts	0x0160, r1
    1500:	10 92 61 01 	sts	0x0161, r1
	us_over_10 = 0;
    1504:	10 92 63 01 	sts	0x0163, r1
    1508:	10 92 62 01 	sts	0x0162, r1
	TIMSK2 |= 1 << TOIE2;	// enable timer2 overflow interrupt
    150c:	80 81       	ld	r24, Z
    150e:	81 60       	ori	r24, 0x01	; 1
    1510:	80 83       	st	Z, r24
}
    1512:	08 95       	ret

00001514 <time_reset>:
	{
		return OrangutanTime::ticksToMicroseconds(numTicks);
	}
	unsigned long get_ms() { return OrangutanTime::ms(); }
	void delay_ms(unsigned int milliseconds) { OrangutanTime::delayMilliseconds(milliseconds); }
	void time_reset() { OrangutanTime::reset(); }
    1514:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <_ZN13OrangutanTime5resetEv>
    1518:	08 95       	ret

0000151a <__mulsi3>:
    151a:	62 9f       	mul	r22, r18
    151c:	d0 01       	movw	r26, r0
    151e:	73 9f       	mul	r23, r19
    1520:	f0 01       	movw	r30, r0
    1522:	82 9f       	mul	r24, r18
    1524:	e0 0d       	add	r30, r0
    1526:	f1 1d       	adc	r31, r1
    1528:	64 9f       	mul	r22, r20
    152a:	e0 0d       	add	r30, r0
    152c:	f1 1d       	adc	r31, r1
    152e:	92 9f       	mul	r25, r18
    1530:	f0 0d       	add	r31, r0
    1532:	83 9f       	mul	r24, r19
    1534:	f0 0d       	add	r31, r0
    1536:	74 9f       	mul	r23, r20
    1538:	f0 0d       	add	r31, r0
    153a:	65 9f       	mul	r22, r21
    153c:	f0 0d       	add	r31, r0
    153e:	99 27       	eor	r25, r25
    1540:	72 9f       	mul	r23, r18
    1542:	b0 0d       	add	r27, r0
    1544:	e1 1d       	adc	r30, r1
    1546:	f9 1f       	adc	r31, r25
    1548:	63 9f       	mul	r22, r19
    154a:	b0 0d       	add	r27, r0
    154c:	e1 1d       	adc	r30, r1
    154e:	f9 1f       	adc	r31, r25
    1550:	bd 01       	movw	r22, r26
    1552:	cf 01       	movw	r24, r30
    1554:	11 24       	eor	r1, r1
    1556:	08 95       	ret

00001558 <__udivmodqi4>:
    1558:	99 1b       	sub	r25, r25
    155a:	79 e0       	ldi	r23, 0x09	; 9
    155c:	04 c0       	rjmp	.+8      	; 0x1566 <__udivmodqi4_ep>

0000155e <__udivmodqi4_loop>:
    155e:	99 1f       	adc	r25, r25
    1560:	96 17       	cp	r25, r22
    1562:	08 f0       	brcs	.+2      	; 0x1566 <__udivmodqi4_ep>
    1564:	96 1b       	sub	r25, r22

00001566 <__udivmodqi4_ep>:
    1566:	88 1f       	adc	r24, r24
    1568:	7a 95       	dec	r23
    156a:	c9 f7       	brne	.-14     	; 0x155e <__udivmodqi4_loop>
    156c:	80 95       	com	r24
    156e:	08 95       	ret

00001570 <__udivmodhi4>:
    1570:	aa 1b       	sub	r26, r26
    1572:	bb 1b       	sub	r27, r27
    1574:	51 e1       	ldi	r21, 0x11	; 17
    1576:	07 c0       	rjmp	.+14     	; 0x1586 <__udivmodhi4_ep>

00001578 <__udivmodhi4_loop>:
    1578:	aa 1f       	adc	r26, r26
    157a:	bb 1f       	adc	r27, r27
    157c:	a6 17       	cp	r26, r22
    157e:	b7 07       	cpc	r27, r23
    1580:	10 f0       	brcs	.+4      	; 0x1586 <__udivmodhi4_ep>
    1582:	a6 1b       	sub	r26, r22
    1584:	b7 0b       	sbc	r27, r23

00001586 <__udivmodhi4_ep>:
    1586:	88 1f       	adc	r24, r24
    1588:	99 1f       	adc	r25, r25
    158a:	5a 95       	dec	r21
    158c:	a9 f7       	brne	.-22     	; 0x1578 <__udivmodhi4_loop>
    158e:	80 95       	com	r24
    1590:	90 95       	com	r25
    1592:	bc 01       	movw	r22, r24
    1594:	cd 01       	movw	r24, r26
    1596:	08 95       	ret

00001598 <__udivmodsi4>:
    1598:	a1 e2       	ldi	r26, 0x21	; 33
    159a:	1a 2e       	mov	r1, r26
    159c:	aa 1b       	sub	r26, r26
    159e:	bb 1b       	sub	r27, r27
    15a0:	fd 01       	movw	r30, r26
    15a2:	0d c0       	rjmp	.+26     	; 0x15be <__udivmodsi4_ep>

000015a4 <__udivmodsi4_loop>:
    15a4:	aa 1f       	adc	r26, r26
    15a6:	bb 1f       	adc	r27, r27
    15a8:	ee 1f       	adc	r30, r30
    15aa:	ff 1f       	adc	r31, r31
    15ac:	a2 17       	cp	r26, r18
    15ae:	b3 07       	cpc	r27, r19
    15b0:	e4 07       	cpc	r30, r20
    15b2:	f5 07       	cpc	r31, r21
    15b4:	20 f0       	brcs	.+8      	; 0x15be <__udivmodsi4_ep>
    15b6:	a2 1b       	sub	r26, r18
    15b8:	b3 0b       	sbc	r27, r19
    15ba:	e4 0b       	sbc	r30, r20
    15bc:	f5 0b       	sbc	r31, r21

000015be <__udivmodsi4_ep>:
    15be:	66 1f       	adc	r22, r22
    15c0:	77 1f       	adc	r23, r23
    15c2:	88 1f       	adc	r24, r24
    15c4:	99 1f       	adc	r25, r25
    15c6:	1a 94       	dec	r1
    15c8:	69 f7       	brne	.-38     	; 0x15a4 <__udivmodsi4_loop>
    15ca:	60 95       	com	r22
    15cc:	70 95       	com	r23
    15ce:	80 95       	com	r24
    15d0:	90 95       	com	r25
    15d2:	9b 01       	movw	r18, r22
    15d4:	ac 01       	movw	r20, r24
    15d6:	bd 01       	movw	r22, r26
    15d8:	cf 01       	movw	r24, r30
    15da:	08 95       	ret

000015dc <__divmodsi4>:
    15dc:	97 fb       	bst	r25, 7
    15de:	09 2e       	mov	r0, r25
    15e0:	05 26       	eor	r0, r21
    15e2:	0e d0       	rcall	.+28     	; 0x1600 <__divmodsi4_neg1>
    15e4:	57 fd       	sbrc	r21, 7
    15e6:	04 d0       	rcall	.+8      	; 0x15f0 <__divmodsi4_neg2>
    15e8:	d7 df       	rcall	.-82     	; 0x1598 <__udivmodsi4>
    15ea:	0a d0       	rcall	.+20     	; 0x1600 <__divmodsi4_neg1>
    15ec:	00 1c       	adc	r0, r0
    15ee:	38 f4       	brcc	.+14     	; 0x15fe <__divmodsi4_exit>

000015f0 <__divmodsi4_neg2>:
    15f0:	50 95       	com	r21
    15f2:	40 95       	com	r20
    15f4:	30 95       	com	r19
    15f6:	21 95       	neg	r18
    15f8:	3f 4f       	sbci	r19, 0xFF	; 255
    15fa:	4f 4f       	sbci	r20, 0xFF	; 255
    15fc:	5f 4f       	sbci	r21, 0xFF	; 255

000015fe <__divmodsi4_exit>:
    15fe:	08 95       	ret

00001600 <__divmodsi4_neg1>:
    1600:	f6 f7       	brtc	.-4      	; 0x15fe <__divmodsi4_exit>
    1602:	90 95       	com	r25
    1604:	80 95       	com	r24
    1606:	70 95       	com	r23
    1608:	61 95       	neg	r22
    160a:	7f 4f       	sbci	r23, 0xFF	; 255
    160c:	8f 4f       	sbci	r24, 0xFF	; 255
    160e:	9f 4f       	sbci	r25, 0xFF	; 255
    1610:	08 95       	ret

00001612 <__prologue_saves__>:
    1612:	2f 92       	push	r2
    1614:	3f 92       	push	r3
    1616:	4f 92       	push	r4
    1618:	5f 92       	push	r5
    161a:	6f 92       	push	r6
    161c:	7f 92       	push	r7
    161e:	8f 92       	push	r8
    1620:	9f 92       	push	r9
    1622:	af 92       	push	r10
    1624:	bf 92       	push	r11
    1626:	cf 92       	push	r12
    1628:	df 92       	push	r13
    162a:	ef 92       	push	r14
    162c:	ff 92       	push	r15
    162e:	0f 93       	push	r16
    1630:	1f 93       	push	r17
    1632:	cf 93       	push	r28
    1634:	df 93       	push	r29
    1636:	cd b7       	in	r28, 0x3d	; 61
    1638:	de b7       	in	r29, 0x3e	; 62
    163a:	ca 1b       	sub	r28, r26
    163c:	db 0b       	sbc	r29, r27
    163e:	0f b6       	in	r0, 0x3f	; 63
    1640:	f8 94       	cli
    1642:	de bf       	out	0x3e, r29	; 62
    1644:	0f be       	out	0x3f, r0	; 63
    1646:	cd bf       	out	0x3d, r28	; 61
    1648:	09 94       	ijmp

0000164a <__epilogue_restores__>:
    164a:	2a 88       	ldd	r2, Y+18	; 0x12
    164c:	39 88       	ldd	r3, Y+17	; 0x11
    164e:	48 88       	ldd	r4, Y+16	; 0x10
    1650:	5f 84       	ldd	r5, Y+15	; 0x0f
    1652:	6e 84       	ldd	r6, Y+14	; 0x0e
    1654:	7d 84       	ldd	r7, Y+13	; 0x0d
    1656:	8c 84       	ldd	r8, Y+12	; 0x0c
    1658:	9b 84       	ldd	r9, Y+11	; 0x0b
    165a:	aa 84       	ldd	r10, Y+10	; 0x0a
    165c:	b9 84       	ldd	r11, Y+9	; 0x09
    165e:	c8 84       	ldd	r12, Y+8	; 0x08
    1660:	df 80       	ldd	r13, Y+7	; 0x07
    1662:	ee 80       	ldd	r14, Y+6	; 0x06
    1664:	fd 80       	ldd	r15, Y+5	; 0x05
    1666:	0c 81       	ldd	r16, Y+4	; 0x04
    1668:	1b 81       	ldd	r17, Y+3	; 0x03
    166a:	aa 81       	ldd	r26, Y+2	; 0x02
    166c:	b9 81       	ldd	r27, Y+1	; 0x01
    166e:	ce 0f       	add	r28, r30
    1670:	d1 1d       	adc	r29, r1
    1672:	0f b6       	in	r0, 0x3f	; 63
    1674:	f8 94       	cli
    1676:	de bf       	out	0x3e, r29	; 62
    1678:	0f be       	out	0x3f, r0	; 63
    167a:	cd bf       	out	0x3d, r28	; 61
    167c:	ed 01       	movw	r28, r26
    167e:	08 95       	ret

00001680 <malloc>:
    1680:	cf 93       	push	r28
    1682:	df 93       	push	r29
    1684:	82 30       	cpi	r24, 0x02	; 2
    1686:	91 05       	cpc	r25, r1
    1688:	10 f4       	brcc	.+4      	; 0x168e <malloc+0xe>
    168a:	82 e0       	ldi	r24, 0x02	; 2
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	e0 91 67 01 	lds	r30, 0x0167
    1692:	f0 91 68 01 	lds	r31, 0x0168
    1696:	40 e0       	ldi	r20, 0x00	; 0
    1698:	50 e0       	ldi	r21, 0x00	; 0
    169a:	20 e0       	ldi	r18, 0x00	; 0
    169c:	30 e0       	ldi	r19, 0x00	; 0
    169e:	26 c0       	rjmp	.+76     	; 0x16ec <malloc+0x6c>
    16a0:	60 81       	ld	r22, Z
    16a2:	71 81       	ldd	r23, Z+1	; 0x01
    16a4:	68 17       	cp	r22, r24
    16a6:	79 07       	cpc	r23, r25
    16a8:	e0 f0       	brcs	.+56     	; 0x16e2 <malloc+0x62>
    16aa:	68 17       	cp	r22, r24
    16ac:	79 07       	cpc	r23, r25
    16ae:	81 f4       	brne	.+32     	; 0x16d0 <malloc+0x50>
    16b0:	82 81       	ldd	r24, Z+2	; 0x02
    16b2:	93 81       	ldd	r25, Z+3	; 0x03
    16b4:	21 15       	cp	r18, r1
    16b6:	31 05       	cpc	r19, r1
    16b8:	31 f0       	breq	.+12     	; 0x16c6 <malloc+0x46>
    16ba:	d9 01       	movw	r26, r18
    16bc:	13 96       	adiw	r26, 0x03	; 3
    16be:	9c 93       	st	X, r25
    16c0:	8e 93       	st	-X, r24
    16c2:	12 97       	sbiw	r26, 0x02	; 2
    16c4:	2b c0       	rjmp	.+86     	; 0x171c <malloc+0x9c>
    16c6:	90 93 68 01 	sts	0x0168, r25
    16ca:	80 93 67 01 	sts	0x0167, r24
    16ce:	26 c0       	rjmp	.+76     	; 0x171c <malloc+0x9c>
    16d0:	41 15       	cp	r20, r1
    16d2:	51 05       	cpc	r21, r1
    16d4:	19 f0       	breq	.+6      	; 0x16dc <malloc+0x5c>
    16d6:	64 17       	cp	r22, r20
    16d8:	75 07       	cpc	r23, r21
    16da:	18 f4       	brcc	.+6      	; 0x16e2 <malloc+0x62>
    16dc:	ab 01       	movw	r20, r22
    16de:	e9 01       	movw	r28, r18
    16e0:	df 01       	movw	r26, r30
    16e2:	9f 01       	movw	r18, r30
    16e4:	72 81       	ldd	r23, Z+2	; 0x02
    16e6:	63 81       	ldd	r22, Z+3	; 0x03
    16e8:	e7 2f       	mov	r30, r23
    16ea:	f6 2f       	mov	r31, r22
    16ec:	30 97       	sbiw	r30, 0x00	; 0
    16ee:	c1 f6       	brne	.-80     	; 0x16a0 <malloc+0x20>
    16f0:	41 15       	cp	r20, r1
    16f2:	51 05       	cpc	r21, r1
    16f4:	01 f1       	breq	.+64     	; 0x1736 <malloc+0xb6>
    16f6:	48 1b       	sub	r20, r24
    16f8:	59 0b       	sbc	r21, r25
    16fa:	44 30       	cpi	r20, 0x04	; 4
    16fc:	51 05       	cpc	r21, r1
    16fe:	80 f4       	brcc	.+32     	; 0x1720 <malloc+0xa0>
    1700:	12 96       	adiw	r26, 0x02	; 2
    1702:	8d 91       	ld	r24, X+
    1704:	9c 91       	ld	r25, X
    1706:	13 97       	sbiw	r26, 0x03	; 3
    1708:	20 97       	sbiw	r28, 0x00	; 0
    170a:	19 f0       	breq	.+6      	; 0x1712 <malloc+0x92>
    170c:	9b 83       	std	Y+3, r25	; 0x03
    170e:	8a 83       	std	Y+2, r24	; 0x02
    1710:	04 c0       	rjmp	.+8      	; 0x171a <malloc+0x9a>
    1712:	90 93 68 01 	sts	0x0168, r25
    1716:	80 93 67 01 	sts	0x0167, r24
    171a:	fd 01       	movw	r30, r26
    171c:	32 96       	adiw	r30, 0x02	; 2
    171e:	46 c0       	rjmp	.+140    	; 0x17ac <malloc+0x12c>
    1720:	fd 01       	movw	r30, r26
    1722:	e4 0f       	add	r30, r20
    1724:	f5 1f       	adc	r31, r21
    1726:	81 93       	st	Z+, r24
    1728:	91 93       	st	Z+, r25
    172a:	42 50       	subi	r20, 0x02	; 2
    172c:	50 40       	sbci	r21, 0x00	; 0
    172e:	11 96       	adiw	r26, 0x01	; 1
    1730:	5c 93       	st	X, r21
    1732:	4e 93       	st	-X, r20
    1734:	3b c0       	rjmp	.+118    	; 0x17ac <malloc+0x12c>
    1736:	20 91 65 01 	lds	r18, 0x0165
    173a:	30 91 66 01 	lds	r19, 0x0166
    173e:	21 15       	cp	r18, r1
    1740:	31 05       	cpc	r19, r1
    1742:	41 f4       	brne	.+16     	; 0x1754 <malloc+0xd4>
    1744:	20 91 44 01 	lds	r18, 0x0144
    1748:	30 91 45 01 	lds	r19, 0x0145
    174c:	30 93 66 01 	sts	0x0166, r19
    1750:	20 93 65 01 	sts	0x0165, r18
    1754:	20 91 46 01 	lds	r18, 0x0146
    1758:	30 91 47 01 	lds	r19, 0x0147
    175c:	21 15       	cp	r18, r1
    175e:	31 05       	cpc	r19, r1
    1760:	41 f4       	brne	.+16     	; 0x1772 <malloc+0xf2>
    1762:	2d b7       	in	r18, 0x3d	; 61
    1764:	3e b7       	in	r19, 0x3e	; 62
    1766:	40 91 42 01 	lds	r20, 0x0142
    176a:	50 91 43 01 	lds	r21, 0x0143
    176e:	24 1b       	sub	r18, r20
    1770:	35 0b       	sbc	r19, r21
    1772:	e0 91 65 01 	lds	r30, 0x0165
    1776:	f0 91 66 01 	lds	r31, 0x0166
    177a:	e2 17       	cp	r30, r18
    177c:	f3 07       	cpc	r31, r19
    177e:	a0 f4       	brcc	.+40     	; 0x17a8 <malloc+0x128>
    1780:	2e 1b       	sub	r18, r30
    1782:	3f 0b       	sbc	r19, r31
    1784:	28 17       	cp	r18, r24
    1786:	39 07       	cpc	r19, r25
    1788:	78 f0       	brcs	.+30     	; 0x17a8 <malloc+0x128>
    178a:	ac 01       	movw	r20, r24
    178c:	4e 5f       	subi	r20, 0xFE	; 254
    178e:	5f 4f       	sbci	r21, 0xFF	; 255
    1790:	24 17       	cp	r18, r20
    1792:	35 07       	cpc	r19, r21
    1794:	48 f0       	brcs	.+18     	; 0x17a8 <malloc+0x128>
    1796:	4e 0f       	add	r20, r30
    1798:	5f 1f       	adc	r21, r31
    179a:	50 93 66 01 	sts	0x0166, r21
    179e:	40 93 65 01 	sts	0x0165, r20
    17a2:	81 93       	st	Z+, r24
    17a4:	91 93       	st	Z+, r25
    17a6:	02 c0       	rjmp	.+4      	; 0x17ac <malloc+0x12c>
    17a8:	e0 e0       	ldi	r30, 0x00	; 0
    17aa:	f0 e0       	ldi	r31, 0x00	; 0
    17ac:	cf 01       	movw	r24, r30
    17ae:	df 91       	pop	r29
    17b0:	cf 91       	pop	r28
    17b2:	08 95       	ret

000017b4 <free>:
    17b4:	cf 93       	push	r28
    17b6:	df 93       	push	r29
    17b8:	00 97       	sbiw	r24, 0x00	; 0
    17ba:	09 f4       	brne	.+2      	; 0x17be <free+0xa>
    17bc:	91 c0       	rjmp	.+290    	; 0x18e0 <free+0x12c>
    17be:	fc 01       	movw	r30, r24
    17c0:	32 97       	sbiw	r30, 0x02	; 2
    17c2:	13 82       	std	Z+3, r1	; 0x03
    17c4:	12 82       	std	Z+2, r1	; 0x02
    17c6:	60 91 67 01 	lds	r22, 0x0167
    17ca:	70 91 68 01 	lds	r23, 0x0168
    17ce:	61 15       	cp	r22, r1
    17d0:	71 05       	cpc	r23, r1
    17d2:	81 f4       	brne	.+32     	; 0x17f4 <free+0x40>
    17d4:	20 81       	ld	r18, Z
    17d6:	31 81       	ldd	r19, Z+1	; 0x01
    17d8:	28 0f       	add	r18, r24
    17da:	39 1f       	adc	r19, r25
    17dc:	80 91 65 01 	lds	r24, 0x0165
    17e0:	90 91 66 01 	lds	r25, 0x0166
    17e4:	82 17       	cp	r24, r18
    17e6:	93 07       	cpc	r25, r19
    17e8:	99 f5       	brne	.+102    	; 0x1850 <free+0x9c>
    17ea:	f0 93 66 01 	sts	0x0166, r31
    17ee:	e0 93 65 01 	sts	0x0165, r30
    17f2:	76 c0       	rjmp	.+236    	; 0x18e0 <free+0x12c>
    17f4:	db 01       	movw	r26, r22
    17f6:	80 e0       	ldi	r24, 0x00	; 0
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	02 c0       	rjmp	.+4      	; 0x1800 <free+0x4c>
    17fc:	cd 01       	movw	r24, r26
    17fe:	d9 01       	movw	r26, r18
    1800:	ae 17       	cp	r26, r30
    1802:	bf 07       	cpc	r27, r31
    1804:	48 f4       	brcc	.+18     	; 0x1818 <free+0x64>
    1806:	12 96       	adiw	r26, 0x02	; 2
    1808:	2d 91       	ld	r18, X+
    180a:	3c 91       	ld	r19, X
    180c:	13 97       	sbiw	r26, 0x03	; 3
    180e:	21 15       	cp	r18, r1
    1810:	31 05       	cpc	r19, r1
    1812:	a1 f7       	brne	.-24     	; 0x17fc <free+0x48>
    1814:	cd 01       	movw	r24, r26
    1816:	21 c0       	rjmp	.+66     	; 0x185a <free+0xa6>
    1818:	b3 83       	std	Z+3, r27	; 0x03
    181a:	a2 83       	std	Z+2, r26	; 0x02
    181c:	ef 01       	movw	r28, r30
    181e:	49 91       	ld	r20, Y+
    1820:	59 91       	ld	r21, Y+
    1822:	9e 01       	movw	r18, r28
    1824:	24 0f       	add	r18, r20
    1826:	35 1f       	adc	r19, r21
    1828:	a2 17       	cp	r26, r18
    182a:	b3 07       	cpc	r27, r19
    182c:	79 f4       	brne	.+30     	; 0x184c <free+0x98>
    182e:	2d 91       	ld	r18, X+
    1830:	3c 91       	ld	r19, X
    1832:	11 97       	sbiw	r26, 0x01	; 1
    1834:	24 0f       	add	r18, r20
    1836:	35 1f       	adc	r19, r21
    1838:	2e 5f       	subi	r18, 0xFE	; 254
    183a:	3f 4f       	sbci	r19, 0xFF	; 255
    183c:	31 83       	std	Z+1, r19	; 0x01
    183e:	20 83       	st	Z, r18
    1840:	12 96       	adiw	r26, 0x02	; 2
    1842:	2d 91       	ld	r18, X+
    1844:	3c 91       	ld	r19, X
    1846:	13 97       	sbiw	r26, 0x03	; 3
    1848:	33 83       	std	Z+3, r19	; 0x03
    184a:	22 83       	std	Z+2, r18	; 0x02
    184c:	00 97       	sbiw	r24, 0x00	; 0
    184e:	29 f4       	brne	.+10     	; 0x185a <free+0xa6>
    1850:	f0 93 68 01 	sts	0x0168, r31
    1854:	e0 93 67 01 	sts	0x0167, r30
    1858:	43 c0       	rjmp	.+134    	; 0x18e0 <free+0x12c>
    185a:	dc 01       	movw	r26, r24
    185c:	13 96       	adiw	r26, 0x03	; 3
    185e:	fc 93       	st	X, r31
    1860:	ee 93       	st	-X, r30
    1862:	12 97       	sbiw	r26, 0x02	; 2
    1864:	4d 91       	ld	r20, X+
    1866:	5d 91       	ld	r21, X+
    1868:	a4 0f       	add	r26, r20
    186a:	b5 1f       	adc	r27, r21
    186c:	ea 17       	cp	r30, r26
    186e:	fb 07       	cpc	r31, r27
    1870:	69 f4       	brne	.+26     	; 0x188c <free+0xd8>
    1872:	20 81       	ld	r18, Z
    1874:	31 81       	ldd	r19, Z+1	; 0x01
    1876:	24 0f       	add	r18, r20
    1878:	35 1f       	adc	r19, r21
    187a:	2e 5f       	subi	r18, 0xFE	; 254
    187c:	3f 4f       	sbci	r19, 0xFF	; 255
    187e:	ec 01       	movw	r28, r24
    1880:	39 83       	std	Y+1, r19	; 0x01
    1882:	28 83       	st	Y, r18
    1884:	22 81       	ldd	r18, Z+2	; 0x02
    1886:	33 81       	ldd	r19, Z+3	; 0x03
    1888:	3b 83       	std	Y+3, r19	; 0x03
    188a:	2a 83       	std	Y+2, r18	; 0x02
    188c:	e0 e0       	ldi	r30, 0x00	; 0
    188e:	f0 e0       	ldi	r31, 0x00	; 0
    1890:	02 c0       	rjmp	.+4      	; 0x1896 <free+0xe2>
    1892:	fb 01       	movw	r30, r22
    1894:	bc 01       	movw	r22, r24
    1896:	db 01       	movw	r26, r22
    1898:	12 96       	adiw	r26, 0x02	; 2
    189a:	8d 91       	ld	r24, X+
    189c:	9c 91       	ld	r25, X
    189e:	13 97       	sbiw	r26, 0x03	; 3
    18a0:	00 97       	sbiw	r24, 0x00	; 0
    18a2:	b9 f7       	brne	.-18     	; 0x1892 <free+0xde>
    18a4:	9b 01       	movw	r18, r22
    18a6:	2e 5f       	subi	r18, 0xFE	; 254
    18a8:	3f 4f       	sbci	r19, 0xFF	; 255
    18aa:	8d 91       	ld	r24, X+
    18ac:	9c 91       	ld	r25, X
    18ae:	11 97       	sbiw	r26, 0x01	; 1
    18b0:	82 0f       	add	r24, r18
    18b2:	93 1f       	adc	r25, r19
    18b4:	40 91 65 01 	lds	r20, 0x0165
    18b8:	50 91 66 01 	lds	r21, 0x0166
    18bc:	48 17       	cp	r20, r24
    18be:	59 07       	cpc	r21, r25
    18c0:	79 f4       	brne	.+30     	; 0x18e0 <free+0x12c>
    18c2:	30 97       	sbiw	r30, 0x00	; 0
    18c4:	29 f4       	brne	.+10     	; 0x18d0 <free+0x11c>
    18c6:	10 92 68 01 	sts	0x0168, r1
    18ca:	10 92 67 01 	sts	0x0167, r1
    18ce:	02 c0       	rjmp	.+4      	; 0x18d4 <free+0x120>
    18d0:	13 82       	std	Z+3, r1	; 0x03
    18d2:	12 82       	std	Z+2, r1	; 0x02
    18d4:	22 50       	subi	r18, 0x02	; 2
    18d6:	30 40       	sbci	r19, 0x00	; 0
    18d8:	30 93 66 01 	sts	0x0166, r19
    18dc:	20 93 65 01 	sts	0x0165, r18
    18e0:	df 91       	pop	r29
    18e2:	cf 91       	pop	r28
    18e4:	08 95       	ret

000018e6 <fdevopen>:
    18e6:	0f 93       	push	r16
    18e8:	1f 93       	push	r17
    18ea:	cf 93       	push	r28
    18ec:	df 93       	push	r29
    18ee:	8c 01       	movw	r16, r24
    18f0:	eb 01       	movw	r28, r22
    18f2:	00 97       	sbiw	r24, 0x00	; 0
    18f4:	11 f4       	brne	.+4      	; 0x18fa <fdevopen+0x14>
    18f6:	20 97       	sbiw	r28, 0x00	; 0
    18f8:	c9 f1       	breq	.+114    	; 0x196c <fdevopen+0x86>
    18fa:	81 e0       	ldi	r24, 0x01	; 1
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	6e e0       	ldi	r22, 0x0E	; 14
    1900:	70 e0       	ldi	r23, 0x00	; 0
    1902:	0e 94 be 0c 	call	0x197c	; 0x197c <calloc>
    1906:	fc 01       	movw	r30, r24
    1908:	9c 01       	movw	r18, r24
    190a:	00 97       	sbiw	r24, 0x00	; 0
    190c:	89 f1       	breq	.+98     	; 0x1970 <fdevopen+0x8a>
    190e:	80 e8       	ldi	r24, 0x80	; 128
    1910:	83 83       	std	Z+3, r24	; 0x03
    1912:	20 97       	sbiw	r28, 0x00	; 0
    1914:	71 f0       	breq	.+28     	; 0x1932 <fdevopen+0x4c>
    1916:	d3 87       	std	Z+11, r29	; 0x0b
    1918:	c2 87       	std	Z+10, r28	; 0x0a
    191a:	81 e8       	ldi	r24, 0x81	; 129
    191c:	83 83       	std	Z+3, r24	; 0x03
    191e:	80 91 69 01 	lds	r24, 0x0169
    1922:	90 91 6a 01 	lds	r25, 0x016A
    1926:	00 97       	sbiw	r24, 0x00	; 0
    1928:	21 f4       	brne	.+8      	; 0x1932 <fdevopen+0x4c>
    192a:	f0 93 6a 01 	sts	0x016A, r31
    192e:	e0 93 69 01 	sts	0x0169, r30
    1932:	01 15       	cp	r16, r1
    1934:	11 05       	cpc	r17, r1
    1936:	e1 f0       	breq	.+56     	; 0x1970 <fdevopen+0x8a>
    1938:	11 87       	std	Z+9, r17	; 0x09
    193a:	00 87       	std	Z+8, r16	; 0x08
    193c:	83 81       	ldd	r24, Z+3	; 0x03
    193e:	82 60       	ori	r24, 0x02	; 2
    1940:	83 83       	std	Z+3, r24	; 0x03
    1942:	80 91 6b 01 	lds	r24, 0x016B
    1946:	90 91 6c 01 	lds	r25, 0x016C
    194a:	00 97       	sbiw	r24, 0x00	; 0
    194c:	89 f4       	brne	.+34     	; 0x1970 <fdevopen+0x8a>
    194e:	f0 93 6c 01 	sts	0x016C, r31
    1952:	e0 93 6b 01 	sts	0x016B, r30
    1956:	80 91 6d 01 	lds	r24, 0x016D
    195a:	90 91 6e 01 	lds	r25, 0x016E
    195e:	00 97       	sbiw	r24, 0x00	; 0
    1960:	39 f4       	brne	.+14     	; 0x1970 <fdevopen+0x8a>
    1962:	f0 93 6e 01 	sts	0x016E, r31
    1966:	e0 93 6d 01 	sts	0x016D, r30
    196a:	02 c0       	rjmp	.+4      	; 0x1970 <fdevopen+0x8a>
    196c:	20 e0       	ldi	r18, 0x00	; 0
    196e:	30 e0       	ldi	r19, 0x00	; 0
    1970:	c9 01       	movw	r24, r18
    1972:	df 91       	pop	r29
    1974:	cf 91       	pop	r28
    1976:	1f 91       	pop	r17
    1978:	0f 91       	pop	r16
    197a:	08 95       	ret

0000197c <calloc>:
    197c:	0f 93       	push	r16
    197e:	1f 93       	push	r17
    1980:	cf 93       	push	r28
    1982:	df 93       	push	r29
    1984:	68 9f       	mul	r22, r24
    1986:	80 01       	movw	r16, r0
    1988:	69 9f       	mul	r22, r25
    198a:	10 0d       	add	r17, r0
    198c:	78 9f       	mul	r23, r24
    198e:	10 0d       	add	r17, r0
    1990:	11 24       	eor	r1, r1
    1992:	c8 01       	movw	r24, r16
    1994:	0e 94 40 0b 	call	0x1680	; 0x1680 <malloc>
    1998:	c8 2f       	mov	r28, r24
    199a:	d9 2f       	mov	r29, r25
    199c:	20 97       	sbiw	r28, 0x00	; 0
    199e:	31 f0       	breq	.+12     	; 0x19ac <calloc+0x30>
    19a0:	8c 2f       	mov	r24, r28
    19a2:	60 e0       	ldi	r22, 0x00	; 0
    19a4:	70 e0       	ldi	r23, 0x00	; 0
    19a6:	a8 01       	movw	r20, r16
    19a8:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <memset>
    19ac:	ce 01       	movw	r24, r28
    19ae:	df 91       	pop	r29
    19b0:	cf 91       	pop	r28
    19b2:	1f 91       	pop	r17
    19b4:	0f 91       	pop	r16
    19b6:	08 95       	ret

000019b8 <memset>:
    19b8:	dc 01       	movw	r26, r24
    19ba:	01 c0       	rjmp	.+2      	; 0x19be <memset+0x6>
    19bc:	6d 93       	st	X+, r22
    19be:	41 50       	subi	r20, 0x01	; 1
    19c0:	50 40       	sbci	r21, 0x00	; 0
    19c2:	e0 f7       	brcc	.-8      	; 0x19bc <memset+0x4>
    19c4:	08 95       	ret

000019c6 <_exit>:
    19c6:	f8 94       	cli

000019c8 <__stop_program>:
    19c8:	ff cf       	rjmp	.-2      	; 0x19c8 <__stop_program>
